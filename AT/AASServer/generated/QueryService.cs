// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.2
//
// <auto-generated>
//
// Generated from file `QueryService.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;
using _Microsoft = global::Microsoft;

#pragma warning disable 1591

namespace IceCompactId
{
}

namespace PortServerIce
{
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
#if !SILVERLIGHT
    [_System.Serializable]
#endif
    public partial class PSIceFundAccount : _System.ICloneable
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public int ClientId;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public string ClientName;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public int FundId;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public string FundName;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public PortServerIce.PSIceFundType FundType;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public PSIceFundAccount()
        {
            ClientName = "";
            FundName = "";
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public PSIceFundAccount(int ClientId, string ClientName, int FundId, string FundName, PortServerIce.PSIceFundType FundType)
        {
            this.ClientId = ClientId;
            this.ClientName = ClientName;
            this.FundId = FundId;
            this.FundName = FundName;
            this.FundType = FundType;
        }

        #endregion

        #region ICloneable members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public override int GetHashCode()
        {
            int h__ = 5381;
            IceInternal.HashUtil.hashAdd(ref h__, "::PortServerIce::PSIceFundAccount");
            IceInternal.HashUtil.hashAdd(ref h__, ClientId);
            IceInternal.HashUtil.hashAdd(ref h__, ClientName);
            IceInternal.HashUtil.hashAdd(ref h__, FundId);
            IceInternal.HashUtil.hashAdd(ref h__, FundName);
            IceInternal.HashUtil.hashAdd(ref h__, FundType);
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public override bool Equals(object other__)
        {
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            if(other__ == null)
            {
                return false;
            }
            if(GetType() != other__.GetType())
            {
                return false;
            }
            PSIceFundAccount o__ = (PSIceFundAccount)other__;
            if(!ClientId.Equals(o__.ClientId))
            {
                return false;
            }
            if(ClientName == null)
            {
                if(o__.ClientName != null)
                {
                    return false;
                }
            }
            else
            {
                if(!ClientName.Equals(o__.ClientName))
                {
                    return false;
                }
            }
            if(!FundId.Equals(o__.FundId))
            {
                return false;
            }
            if(FundName == null)
            {
                if(o__.FundName != null)
                {
                    return false;
                }
            }
            else
            {
                if(!FundName.Equals(o__.FundName))
                {
                    return false;
                }
            }
            if(!FundType.Equals(o__.FundType))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static bool operator==(PSIceFundAccount lhs__, PSIceFundAccount rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static bool operator!=(PSIceFundAccount lhs__, PSIceFundAccount rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshalling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public void write__(IceInternal.BasicStream os__)
        {
            os__.writeInt(ClientId);
            os__.writeString(ClientName);
            os__.writeInt(FundId);
            os__.writeString(FundName);
            os__.writeEnum((int)FundType, 1);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public void read__(IceInternal.BasicStream is__)
        {
            ClientId = is__.readInt();
            ClientName = is__.readString();
            FundId = is__.readInt();
            FundName = is__.readString();
            FundType = (PortServerIce.PSIceFundType)is__.readEnum(1);
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static void write__(IceInternal.BasicStream os__, PSIceFundAccount v__)
        {
            if(v__ == null)
            {
                nullMarshalValue__.write__(os__);
            }
            else
            {
                v__.write__(os__);
            }
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static PSIceFundAccount read__(IceInternal.BasicStream is__, PSIceFundAccount v__)
        {
            if(v__ == null)
            {
                v__ = new PSIceFundAccount();
            }
            v__.read__(is__);
            return v__;
        }
        
        private static readonly PSIceFundAccount nullMarshalValue__ = new PSIceFundAccount();

        #endregion
    }

    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
#if !SILVERLIGHT
    [_System.Serializable]
#endif
    public partial class PSIceStockAccount : _System.ICloneable
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public int FundId;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public string FundName;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public string StockAccount;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public PortServerIce.PSIceMarket Market;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public PSIceStockAccount()
        {
            FundName = "";
            StockAccount = "";
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public PSIceStockAccount(int FundId, string FundName, string StockAccount, PortServerIce.PSIceMarket Market)
        {
            this.FundId = FundId;
            this.FundName = FundName;
            this.StockAccount = StockAccount;
            this.Market = Market;
        }

        #endregion

        #region ICloneable members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public override int GetHashCode()
        {
            int h__ = 5381;
            IceInternal.HashUtil.hashAdd(ref h__, "::PortServerIce::PSIceStockAccount");
            IceInternal.HashUtil.hashAdd(ref h__, FundId);
            IceInternal.HashUtil.hashAdd(ref h__, FundName);
            IceInternal.HashUtil.hashAdd(ref h__, StockAccount);
            IceInternal.HashUtil.hashAdd(ref h__, Market);
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public override bool Equals(object other__)
        {
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            if(other__ == null)
            {
                return false;
            }
            if(GetType() != other__.GetType())
            {
                return false;
            }
            PSIceStockAccount o__ = (PSIceStockAccount)other__;
            if(!FundId.Equals(o__.FundId))
            {
                return false;
            }
            if(FundName == null)
            {
                if(o__.FundName != null)
                {
                    return false;
                }
            }
            else
            {
                if(!FundName.Equals(o__.FundName))
                {
                    return false;
                }
            }
            if(StockAccount == null)
            {
                if(o__.StockAccount != null)
                {
                    return false;
                }
            }
            else
            {
                if(!StockAccount.Equals(o__.StockAccount))
                {
                    return false;
                }
            }
            if(!Market.Equals(o__.Market))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static bool operator==(PSIceStockAccount lhs__, PSIceStockAccount rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static bool operator!=(PSIceStockAccount lhs__, PSIceStockAccount rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshalling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public void write__(IceInternal.BasicStream os__)
        {
            os__.writeInt(FundId);
            os__.writeString(FundName);
            os__.writeString(StockAccount);
            os__.writeEnum((int)Market, 1);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public void read__(IceInternal.BasicStream is__)
        {
            FundId = is__.readInt();
            FundName = is__.readString();
            StockAccount = is__.readString();
            Market = (PortServerIce.PSIceMarket)is__.readEnum(1);
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static void write__(IceInternal.BasicStream os__, PSIceStockAccount v__)
        {
            if(v__ == null)
            {
                nullMarshalValue__.write__(os__);
            }
            else
            {
                v__.write__(os__);
            }
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static PSIceStockAccount read__(IceInternal.BasicStream is__, PSIceStockAccount v__)
        {
            if(v__ == null)
            {
                v__ = new PSIceStockAccount();
            }
            v__.read__(is__);
            return v__;
        }
        
        private static readonly PSIceStockAccount nullMarshalValue__ = new PSIceStockAccount();

        #endregion
    }

    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
#if !SILVERLIGHT
    [_System.Serializable]
#endif
    public partial class PSIceFundSummary : _System.ICloneable
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public long EnableMargin;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public long UsedMargin;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public long EnableFund;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public long CashBuyFund;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public long ShareBuyFund;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public long CashRefundFund;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public long EnableCashCredit;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public long UsedCashCredit;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public long UsedCashMargin;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public long CashDebt;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public long EnableShareCredit;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public long UsedShareCredit;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public long UsedShareMargin;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public long ShareDebt;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public long NetAsset;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public PSIceFundSummary()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public PSIceFundSummary(long EnableMargin, long UsedMargin, long EnableFund, long CashBuyFund, long ShareBuyFund, long CashRefundFund, long EnableCashCredit, long UsedCashCredit, long UsedCashMargin, long CashDebt, long EnableShareCredit, long UsedShareCredit, long UsedShareMargin, long ShareDebt, long NetAsset)
        {
            this.EnableMargin = EnableMargin;
            this.UsedMargin = UsedMargin;
            this.EnableFund = EnableFund;
            this.CashBuyFund = CashBuyFund;
            this.ShareBuyFund = ShareBuyFund;
            this.CashRefundFund = CashRefundFund;
            this.EnableCashCredit = EnableCashCredit;
            this.UsedCashCredit = UsedCashCredit;
            this.UsedCashMargin = UsedCashMargin;
            this.CashDebt = CashDebt;
            this.EnableShareCredit = EnableShareCredit;
            this.UsedShareCredit = UsedShareCredit;
            this.UsedShareMargin = UsedShareMargin;
            this.ShareDebt = ShareDebt;
            this.NetAsset = NetAsset;
        }

        #endregion

        #region ICloneable members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public override int GetHashCode()
        {
            int h__ = 5381;
            IceInternal.HashUtil.hashAdd(ref h__, "::PortServerIce::PSIceFundSummary");
            IceInternal.HashUtil.hashAdd(ref h__, EnableMargin);
            IceInternal.HashUtil.hashAdd(ref h__, UsedMargin);
            IceInternal.HashUtil.hashAdd(ref h__, EnableFund);
            IceInternal.HashUtil.hashAdd(ref h__, CashBuyFund);
            IceInternal.HashUtil.hashAdd(ref h__, ShareBuyFund);
            IceInternal.HashUtil.hashAdd(ref h__, CashRefundFund);
            IceInternal.HashUtil.hashAdd(ref h__, EnableCashCredit);
            IceInternal.HashUtil.hashAdd(ref h__, UsedCashCredit);
            IceInternal.HashUtil.hashAdd(ref h__, UsedCashMargin);
            IceInternal.HashUtil.hashAdd(ref h__, CashDebt);
            IceInternal.HashUtil.hashAdd(ref h__, EnableShareCredit);
            IceInternal.HashUtil.hashAdd(ref h__, UsedShareCredit);
            IceInternal.HashUtil.hashAdd(ref h__, UsedShareMargin);
            IceInternal.HashUtil.hashAdd(ref h__, ShareDebt);
            IceInternal.HashUtil.hashAdd(ref h__, NetAsset);
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public override bool Equals(object other__)
        {
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            if(other__ == null)
            {
                return false;
            }
            if(GetType() != other__.GetType())
            {
                return false;
            }
            PSIceFundSummary o__ = (PSIceFundSummary)other__;
            if(!EnableMargin.Equals(o__.EnableMargin))
            {
                return false;
            }
            if(!UsedMargin.Equals(o__.UsedMargin))
            {
                return false;
            }
            if(!EnableFund.Equals(o__.EnableFund))
            {
                return false;
            }
            if(!CashBuyFund.Equals(o__.CashBuyFund))
            {
                return false;
            }
            if(!ShareBuyFund.Equals(o__.ShareBuyFund))
            {
                return false;
            }
            if(!CashRefundFund.Equals(o__.CashRefundFund))
            {
                return false;
            }
            if(!EnableCashCredit.Equals(o__.EnableCashCredit))
            {
                return false;
            }
            if(!UsedCashCredit.Equals(o__.UsedCashCredit))
            {
                return false;
            }
            if(!UsedCashMargin.Equals(o__.UsedCashMargin))
            {
                return false;
            }
            if(!CashDebt.Equals(o__.CashDebt))
            {
                return false;
            }
            if(!EnableShareCredit.Equals(o__.EnableShareCredit))
            {
                return false;
            }
            if(!UsedShareCredit.Equals(o__.UsedShareCredit))
            {
                return false;
            }
            if(!UsedShareMargin.Equals(o__.UsedShareMargin))
            {
                return false;
            }
            if(!ShareDebt.Equals(o__.ShareDebt))
            {
                return false;
            }
            if(!NetAsset.Equals(o__.NetAsset))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static bool operator==(PSIceFundSummary lhs__, PSIceFundSummary rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static bool operator!=(PSIceFundSummary lhs__, PSIceFundSummary rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshalling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public void write__(IceInternal.BasicStream os__)
        {
            os__.writeLong(EnableMargin);
            os__.writeLong(UsedMargin);
            os__.writeLong(EnableFund);
            os__.writeLong(CashBuyFund);
            os__.writeLong(ShareBuyFund);
            os__.writeLong(CashRefundFund);
            os__.writeLong(EnableCashCredit);
            os__.writeLong(UsedCashCredit);
            os__.writeLong(UsedCashMargin);
            os__.writeLong(CashDebt);
            os__.writeLong(EnableShareCredit);
            os__.writeLong(UsedShareCredit);
            os__.writeLong(UsedShareMargin);
            os__.writeLong(ShareDebt);
            os__.writeLong(NetAsset);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public void read__(IceInternal.BasicStream is__)
        {
            EnableMargin = is__.readLong();
            UsedMargin = is__.readLong();
            EnableFund = is__.readLong();
            CashBuyFund = is__.readLong();
            ShareBuyFund = is__.readLong();
            CashRefundFund = is__.readLong();
            EnableCashCredit = is__.readLong();
            UsedCashCredit = is__.readLong();
            UsedCashMargin = is__.readLong();
            CashDebt = is__.readLong();
            EnableShareCredit = is__.readLong();
            UsedShareCredit = is__.readLong();
            UsedShareMargin = is__.readLong();
            ShareDebt = is__.readLong();
            NetAsset = is__.readLong();
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static void write__(IceInternal.BasicStream os__, PSIceFundSummary v__)
        {
            if(v__ == null)
            {
                nullMarshalValue__.write__(os__);
            }
            else
            {
                v__.write__(os__);
            }
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static PSIceFundSummary read__(IceInternal.BasicStream is__, PSIceFundSummary v__)
        {
            if(v__ == null)
            {
                v__ = new PSIceFundSummary();
            }
            v__.read__(is__);
            return v__;
        }
        
        private static readonly PSIceFundSummary nullMarshalValue__ = new PSIceFundSummary();

        #endregion
    }

    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
#if !SILVERLIGHT
    [_System.Serializable]
#endif
    public partial class PSIcePosition : _System.ICloneable
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public string Index;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public PortServerIce.PSIceMarket Market;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public string StockAccount;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public string Code;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public int CurrentVolume;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public int EnableVolume;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public int BuyVolume;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public int SellVolume;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public PSIcePosition()
        {
            Index = "";
            StockAccount = "";
            Code = "";
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public PSIcePosition(string Index, PortServerIce.PSIceMarket Market, string StockAccount, string Code, int CurrentVolume, int EnableVolume, int BuyVolume, int SellVolume)
        {
            this.Index = Index;
            this.Market = Market;
            this.StockAccount = StockAccount;
            this.Code = Code;
            this.CurrentVolume = CurrentVolume;
            this.EnableVolume = EnableVolume;
            this.BuyVolume = BuyVolume;
            this.SellVolume = SellVolume;
        }

        #endregion

        #region ICloneable members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public override int GetHashCode()
        {
            int h__ = 5381;
            IceInternal.HashUtil.hashAdd(ref h__, "::PortServerIce::PSIcePosition");
            IceInternal.HashUtil.hashAdd(ref h__, Index);
            IceInternal.HashUtil.hashAdd(ref h__, Market);
            IceInternal.HashUtil.hashAdd(ref h__, StockAccount);
            IceInternal.HashUtil.hashAdd(ref h__, Code);
            IceInternal.HashUtil.hashAdd(ref h__, CurrentVolume);
            IceInternal.HashUtil.hashAdd(ref h__, EnableVolume);
            IceInternal.HashUtil.hashAdd(ref h__, BuyVolume);
            IceInternal.HashUtil.hashAdd(ref h__, SellVolume);
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public override bool Equals(object other__)
        {
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            if(other__ == null)
            {
                return false;
            }
            if(GetType() != other__.GetType())
            {
                return false;
            }
            PSIcePosition o__ = (PSIcePosition)other__;
            if(Index == null)
            {
                if(o__.Index != null)
                {
                    return false;
                }
            }
            else
            {
                if(!Index.Equals(o__.Index))
                {
                    return false;
                }
            }
            if(!Market.Equals(o__.Market))
            {
                return false;
            }
            if(StockAccount == null)
            {
                if(o__.StockAccount != null)
                {
                    return false;
                }
            }
            else
            {
                if(!StockAccount.Equals(o__.StockAccount))
                {
                    return false;
                }
            }
            if(Code == null)
            {
                if(o__.Code != null)
                {
                    return false;
                }
            }
            else
            {
                if(!Code.Equals(o__.Code))
                {
                    return false;
                }
            }
            if(!CurrentVolume.Equals(o__.CurrentVolume))
            {
                return false;
            }
            if(!EnableVolume.Equals(o__.EnableVolume))
            {
                return false;
            }
            if(!BuyVolume.Equals(o__.BuyVolume))
            {
                return false;
            }
            if(!SellVolume.Equals(o__.SellVolume))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static bool operator==(PSIcePosition lhs__, PSIcePosition rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static bool operator!=(PSIcePosition lhs__, PSIcePosition rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshalling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public void write__(IceInternal.BasicStream os__)
        {
            os__.writeString(Index);
            os__.writeEnum((int)Market, 1);
            os__.writeString(StockAccount);
            os__.writeString(Code);
            os__.writeInt(CurrentVolume);
            os__.writeInt(EnableVolume);
            os__.writeInt(BuyVolume);
            os__.writeInt(SellVolume);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public void read__(IceInternal.BasicStream is__)
        {
            Index = is__.readString();
            Market = (PortServerIce.PSIceMarket)is__.readEnum(1);
            StockAccount = is__.readString();
            Code = is__.readString();
            CurrentVolume = is__.readInt();
            EnableVolume = is__.readInt();
            BuyVolume = is__.readInt();
            SellVolume = is__.readInt();
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static void write__(IceInternal.BasicStream os__, PSIcePosition v__)
        {
            if(v__ == null)
            {
                nullMarshalValue__.write__(os__);
            }
            else
            {
                v__.write__(os__);
            }
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static PSIcePosition read__(IceInternal.BasicStream is__, PSIcePosition v__)
        {
            if(v__ == null)
            {
                v__ = new PSIcePosition();
            }
            v__.read__(is__);
            return v__;
        }
        
        private static readonly PSIcePosition nullMarshalValue__ = new PSIcePosition();

        #endregion
    }

    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
#if !SILVERLIGHT
    [_System.Serializable]
#endif
    public partial class PSIceSharePosition : _System.ICloneable
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public string Index;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public PortServerIce.PSIceMarket Market;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public string StockAccount;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public string Code;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public int ShareVolume;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public PSIceSharePosition()
        {
            Index = "";
            StockAccount = "";
            Code = "";
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public PSIceSharePosition(string Index, PortServerIce.PSIceMarket Market, string StockAccount, string Code, int ShareVolume)
        {
            this.Index = Index;
            this.Market = Market;
            this.StockAccount = StockAccount;
            this.Code = Code;
            this.ShareVolume = ShareVolume;
        }

        #endregion

        #region ICloneable members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public override int GetHashCode()
        {
            int h__ = 5381;
            IceInternal.HashUtil.hashAdd(ref h__, "::PortServerIce::PSIceSharePosition");
            IceInternal.HashUtil.hashAdd(ref h__, Index);
            IceInternal.HashUtil.hashAdd(ref h__, Market);
            IceInternal.HashUtil.hashAdd(ref h__, StockAccount);
            IceInternal.HashUtil.hashAdd(ref h__, Code);
            IceInternal.HashUtil.hashAdd(ref h__, ShareVolume);
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public override bool Equals(object other__)
        {
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            if(other__ == null)
            {
                return false;
            }
            if(GetType() != other__.GetType())
            {
                return false;
            }
            PSIceSharePosition o__ = (PSIceSharePosition)other__;
            if(Index == null)
            {
                if(o__.Index != null)
                {
                    return false;
                }
            }
            else
            {
                if(!Index.Equals(o__.Index))
                {
                    return false;
                }
            }
            if(!Market.Equals(o__.Market))
            {
                return false;
            }
            if(StockAccount == null)
            {
                if(o__.StockAccount != null)
                {
                    return false;
                }
            }
            else
            {
                if(!StockAccount.Equals(o__.StockAccount))
                {
                    return false;
                }
            }
            if(Code == null)
            {
                if(o__.Code != null)
                {
                    return false;
                }
            }
            else
            {
                if(!Code.Equals(o__.Code))
                {
                    return false;
                }
            }
            if(!ShareVolume.Equals(o__.ShareVolume))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static bool operator==(PSIceSharePosition lhs__, PSIceSharePosition rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static bool operator!=(PSIceSharePosition lhs__, PSIceSharePosition rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshalling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public void write__(IceInternal.BasicStream os__)
        {
            os__.writeString(Index);
            os__.writeEnum((int)Market, 1);
            os__.writeString(StockAccount);
            os__.writeString(Code);
            os__.writeInt(ShareVolume);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public void read__(IceInternal.BasicStream is__)
        {
            Index = is__.readString();
            Market = (PortServerIce.PSIceMarket)is__.readEnum(1);
            StockAccount = is__.readString();
            Code = is__.readString();
            ShareVolume = is__.readInt();
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static void write__(IceInternal.BasicStream os__, PSIceSharePosition v__)
        {
            if(v__ == null)
            {
                nullMarshalValue__.write__(os__);
            }
            else
            {
                v__.write__(os__);
            }
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static PSIceSharePosition read__(IceInternal.BasicStream is__, PSIceSharePosition v__)
        {
            if(v__ == null)
            {
                v__ = new PSIceSharePosition();
            }
            v__.read__(is__);
            return v__;
        }
        
        private static readonly PSIceSharePosition nullMarshalValue__ = new PSIceSharePosition();

        #endregion
    }

    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
#if !SILVERLIGHT
    [_System.Serializable]
#endif
    public partial class PSIceVolumeSearch : _System.ICloneable
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public string Index;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public PortServerIce.PSIceMarket Market;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public string Code;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public PortServerIce.PSIceOrderType OrderType;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public PSIceVolumeSearch()
        {
            Index = "";
            Code = "";
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public PSIceVolumeSearch(string Index, PortServerIce.PSIceMarket Market, string Code, PortServerIce.PSIceOrderType OrderType)
        {
            this.Index = Index;
            this.Market = Market;
            this.Code = Code;
            this.OrderType = OrderType;
        }

        #endregion

        #region ICloneable members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public override int GetHashCode()
        {
            int h__ = 5381;
            IceInternal.HashUtil.hashAdd(ref h__, "::PortServerIce::PSIceVolumeSearch");
            IceInternal.HashUtil.hashAdd(ref h__, Index);
            IceInternal.HashUtil.hashAdd(ref h__, Market);
            IceInternal.HashUtil.hashAdd(ref h__, Code);
            IceInternal.HashUtil.hashAdd(ref h__, OrderType);
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public override bool Equals(object other__)
        {
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            if(other__ == null)
            {
                return false;
            }
            if(GetType() != other__.GetType())
            {
                return false;
            }
            PSIceVolumeSearch o__ = (PSIceVolumeSearch)other__;
            if(Index == null)
            {
                if(o__.Index != null)
                {
                    return false;
                }
            }
            else
            {
                if(!Index.Equals(o__.Index))
                {
                    return false;
                }
            }
            if(!Market.Equals(o__.Market))
            {
                return false;
            }
            if(Code == null)
            {
                if(o__.Code != null)
                {
                    return false;
                }
            }
            else
            {
                if(!Code.Equals(o__.Code))
                {
                    return false;
                }
            }
            if(!OrderType.Equals(o__.OrderType))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static bool operator==(PSIceVolumeSearch lhs__, PSIceVolumeSearch rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static bool operator!=(PSIceVolumeSearch lhs__, PSIceVolumeSearch rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshalling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public void write__(IceInternal.BasicStream os__)
        {
            os__.writeString(Index);
            os__.writeEnum((int)Market, 1);
            os__.writeString(Code);
            os__.writeEnum((int)OrderType, 10);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public void read__(IceInternal.BasicStream is__)
        {
            Index = is__.readString();
            Market = (PortServerIce.PSIceMarket)is__.readEnum(1);
            Code = is__.readString();
            OrderType = (PortServerIce.PSIceOrderType)is__.readEnum(10);
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static void write__(IceInternal.BasicStream os__, PSIceVolumeSearch v__)
        {
            if(v__ == null)
            {
                nullMarshalValue__.write__(os__);
            }
            else
            {
                v__.write__(os__);
            }
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static PSIceVolumeSearch read__(IceInternal.BasicStream is__, PSIceVolumeSearch v__)
        {
            if(v__ == null)
            {
                v__ = new PSIceVolumeSearch();
            }
            v__.read__(is__);
            return v__;
        }
        
        private static readonly PSIceVolumeSearch nullMarshalValue__ = new PSIceVolumeSearch();

        #endregion
    }

    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
#if !SILVERLIGHT
    [_System.Serializable]
#endif
    public partial class PSIceAssureInfo : _System.ICloneable
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public string Index;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public PortServerIce.PSIceMarket Market;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public string Code;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public double AssureRatio;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public double FloatRatio;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public double Price;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public PSIceAssureInfo()
        {
            Index = "";
            Code = "";
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public PSIceAssureInfo(string Index, PortServerIce.PSIceMarket Market, string Code, double AssureRatio, double FloatRatio, double Price)
        {
            this.Index = Index;
            this.Market = Market;
            this.Code = Code;
            this.AssureRatio = AssureRatio;
            this.FloatRatio = FloatRatio;
            this.Price = Price;
        }

        #endregion

        #region ICloneable members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public override int GetHashCode()
        {
            int h__ = 5381;
            IceInternal.HashUtil.hashAdd(ref h__, "::PortServerIce::PSIceAssureInfo");
            IceInternal.HashUtil.hashAdd(ref h__, Index);
            IceInternal.HashUtil.hashAdd(ref h__, Market);
            IceInternal.HashUtil.hashAdd(ref h__, Code);
            IceInternal.HashUtil.hashAdd(ref h__, AssureRatio);
            IceInternal.HashUtil.hashAdd(ref h__, FloatRatio);
            IceInternal.HashUtil.hashAdd(ref h__, Price);
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public override bool Equals(object other__)
        {
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            if(other__ == null)
            {
                return false;
            }
            if(GetType() != other__.GetType())
            {
                return false;
            }
            PSIceAssureInfo o__ = (PSIceAssureInfo)other__;
            if(Index == null)
            {
                if(o__.Index != null)
                {
                    return false;
                }
            }
            else
            {
                if(!Index.Equals(o__.Index))
                {
                    return false;
                }
            }
            if(!Market.Equals(o__.Market))
            {
                return false;
            }
            if(Code == null)
            {
                if(o__.Code != null)
                {
                    return false;
                }
            }
            else
            {
                if(!Code.Equals(o__.Code))
                {
                    return false;
                }
            }
            if(!AssureRatio.Equals(o__.AssureRatio))
            {
                return false;
            }
            if(!FloatRatio.Equals(o__.FloatRatio))
            {
                return false;
            }
            if(!Price.Equals(o__.Price))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static bool operator==(PSIceAssureInfo lhs__, PSIceAssureInfo rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static bool operator!=(PSIceAssureInfo lhs__, PSIceAssureInfo rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshalling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public void write__(IceInternal.BasicStream os__)
        {
            os__.writeString(Index);
            os__.writeEnum((int)Market, 1);
            os__.writeString(Code);
            os__.writeDouble(AssureRatio);
            os__.writeDouble(FloatRatio);
            os__.writeDouble(Price);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public void read__(IceInternal.BasicStream is__)
        {
            Index = is__.readString();
            Market = (PortServerIce.PSIceMarket)is__.readEnum(1);
            Code = is__.readString();
            AssureRatio = is__.readDouble();
            FloatRatio = is__.readDouble();
            Price = is__.readDouble();
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static void write__(IceInternal.BasicStream os__, PSIceAssureInfo v__)
        {
            if(v__ == null)
            {
                nullMarshalValue__.write__(os__);
            }
            else
            {
                v__.write__(os__);
            }
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static PSIceAssureInfo read__(IceInternal.BasicStream is__, PSIceAssureInfo v__)
        {
            if(v__ == null)
            {
                v__ = new PSIceAssureInfo();
            }
            v__.read__(is__);
            return v__;
        }
        
        private static readonly PSIceAssureInfo nullMarshalValue__ = new PSIceAssureInfo();

        #endregion
    }

    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
#if !SILVERLIGHT
    [_System.Serializable]
#endif
    public partial class PSIceObjectInfo : _System.ICloneable
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public string Index;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public PortServerIce.PSIceMarket Market;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public string Code;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public double CashRatio;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public double CashFloatRatio;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public double ShareRatio;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public double ShareFloatRatio;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public double Price;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public PSIceObjectInfo()
        {
            Index = "";
            Code = "";
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public PSIceObjectInfo(string Index, PortServerIce.PSIceMarket Market, string Code, double CashRatio, double CashFloatRatio, double ShareRatio, double ShareFloatRatio, double Price)
        {
            this.Index = Index;
            this.Market = Market;
            this.Code = Code;
            this.CashRatio = CashRatio;
            this.CashFloatRatio = CashFloatRatio;
            this.ShareRatio = ShareRatio;
            this.ShareFloatRatio = ShareFloatRatio;
            this.Price = Price;
        }

        #endregion

        #region ICloneable members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public override int GetHashCode()
        {
            int h__ = 5381;
            IceInternal.HashUtil.hashAdd(ref h__, "::PortServerIce::PSIceObjectInfo");
            IceInternal.HashUtil.hashAdd(ref h__, Index);
            IceInternal.HashUtil.hashAdd(ref h__, Market);
            IceInternal.HashUtil.hashAdd(ref h__, Code);
            IceInternal.HashUtil.hashAdd(ref h__, CashRatio);
            IceInternal.HashUtil.hashAdd(ref h__, CashFloatRatio);
            IceInternal.HashUtil.hashAdd(ref h__, ShareRatio);
            IceInternal.HashUtil.hashAdd(ref h__, ShareFloatRatio);
            IceInternal.HashUtil.hashAdd(ref h__, Price);
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public override bool Equals(object other__)
        {
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            if(other__ == null)
            {
                return false;
            }
            if(GetType() != other__.GetType())
            {
                return false;
            }
            PSIceObjectInfo o__ = (PSIceObjectInfo)other__;
            if(Index == null)
            {
                if(o__.Index != null)
                {
                    return false;
                }
            }
            else
            {
                if(!Index.Equals(o__.Index))
                {
                    return false;
                }
            }
            if(!Market.Equals(o__.Market))
            {
                return false;
            }
            if(Code == null)
            {
                if(o__.Code != null)
                {
                    return false;
                }
            }
            else
            {
                if(!Code.Equals(o__.Code))
                {
                    return false;
                }
            }
            if(!CashRatio.Equals(o__.CashRatio))
            {
                return false;
            }
            if(!CashFloatRatio.Equals(o__.CashFloatRatio))
            {
                return false;
            }
            if(!ShareRatio.Equals(o__.ShareRatio))
            {
                return false;
            }
            if(!ShareFloatRatio.Equals(o__.ShareFloatRatio))
            {
                return false;
            }
            if(!Price.Equals(o__.Price))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static bool operator==(PSIceObjectInfo lhs__, PSIceObjectInfo rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static bool operator!=(PSIceObjectInfo lhs__, PSIceObjectInfo rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshalling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public void write__(IceInternal.BasicStream os__)
        {
            os__.writeString(Index);
            os__.writeEnum((int)Market, 1);
            os__.writeString(Code);
            os__.writeDouble(CashRatio);
            os__.writeDouble(CashFloatRatio);
            os__.writeDouble(ShareRatio);
            os__.writeDouble(ShareFloatRatio);
            os__.writeDouble(Price);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public void read__(IceInternal.BasicStream is__)
        {
            Index = is__.readString();
            Market = (PortServerIce.PSIceMarket)is__.readEnum(1);
            Code = is__.readString();
            CashRatio = is__.readDouble();
            CashFloatRatio = is__.readDouble();
            ShareRatio = is__.readDouble();
            ShareFloatRatio = is__.readDouble();
            Price = is__.readDouble();
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static void write__(IceInternal.BasicStream os__, PSIceObjectInfo v__)
        {
            if(v__ == null)
            {
                nullMarshalValue__.write__(os__);
            }
            else
            {
                v__.write__(os__);
            }
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static PSIceObjectInfo read__(IceInternal.BasicStream is__, PSIceObjectInfo v__)
        {
            if(v__ == null)
            {
                v__ = new PSIceObjectInfo();
            }
            v__.read__(is__);
            return v__;
        }
        
        private static readonly PSIceObjectInfo nullMarshalValue__ = new PSIceObjectInfo();

        #endregion
    }

    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
#if !SILVERLIGHT
    [_System.Serializable]
#endif
    public partial class PSIceOrderSearch : _System.ICloneable
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public string Index;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public string OrderNo;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public string Code;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public int Type;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public PSIceOrderSearch()
        {
            Index = "";
            OrderNo = "";
            Code = "";
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public PSIceOrderSearch(string Index, string OrderNo, string Code, int Type)
        {
            this.Index = Index;
            this.OrderNo = OrderNo;
            this.Code = Code;
            this.Type = Type;
        }

        #endregion

        #region ICloneable members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public override int GetHashCode()
        {
            int h__ = 5381;
            IceInternal.HashUtil.hashAdd(ref h__, "::PortServerIce::PSIceOrderSearch");
            IceInternal.HashUtil.hashAdd(ref h__, Index);
            IceInternal.HashUtil.hashAdd(ref h__, OrderNo);
            IceInternal.HashUtil.hashAdd(ref h__, Code);
            IceInternal.HashUtil.hashAdd(ref h__, Type);
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public override bool Equals(object other__)
        {
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            if(other__ == null)
            {
                return false;
            }
            if(GetType() != other__.GetType())
            {
                return false;
            }
            PSIceOrderSearch o__ = (PSIceOrderSearch)other__;
            if(Index == null)
            {
                if(o__.Index != null)
                {
                    return false;
                }
            }
            else
            {
                if(!Index.Equals(o__.Index))
                {
                    return false;
                }
            }
            if(OrderNo == null)
            {
                if(o__.OrderNo != null)
                {
                    return false;
                }
            }
            else
            {
                if(!OrderNo.Equals(o__.OrderNo))
                {
                    return false;
                }
            }
            if(Code == null)
            {
                if(o__.Code != null)
                {
                    return false;
                }
            }
            else
            {
                if(!Code.Equals(o__.Code))
                {
                    return false;
                }
            }
            if(!Type.Equals(o__.Type))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static bool operator==(PSIceOrderSearch lhs__, PSIceOrderSearch rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static bool operator!=(PSIceOrderSearch lhs__, PSIceOrderSearch rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshalling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public void write__(IceInternal.BasicStream os__)
        {
            os__.writeString(Index);
            os__.writeString(OrderNo);
            os__.writeString(Code);
            os__.writeInt(Type);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public void read__(IceInternal.BasicStream is__)
        {
            Index = is__.readString();
            OrderNo = is__.readString();
            Code = is__.readString();
            Type = is__.readInt();
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static void write__(IceInternal.BasicStream os__, PSIceOrderSearch v__)
        {
            if(v__ == null)
            {
                nullMarshalValue__.write__(os__);
            }
            else
            {
                v__.write__(os__);
            }
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static PSIceOrderSearch read__(IceInternal.BasicStream is__, PSIceOrderSearch v__)
        {
            if(v__ == null)
            {
                v__ = new PSIceOrderSearch();
            }
            v__.read__(is__);
            return v__;
        }
        
        private static readonly PSIceOrderSearch nullMarshalValue__ = new PSIceOrderSearch();

        #endregion
    }

    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
#if !SILVERLIGHT
    [_System.Serializable]
#endif
    public partial class PSIceOrderStatus : _System.ICloneable
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public string Index;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public string OrderNo;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public PortServerIce.PSIceMarket Market;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public string StockAccount;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public PortServerIce.PSIceOrderType OrderType;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public int Side;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public string Code;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public long OrderPrice;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public int OrderVolume;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public int OrderTime;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public long FilledPrice;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public int FilledVolume;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public long FilledAmount;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public int FilledCount;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public bool IsCancel;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public int CancelVolume;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public PortServerIce.PSIceOrderState OrderState;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public string Message;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public PSIceOrderStatus()
        {
            Index = "";
            OrderNo = "";
            StockAccount = "";
            Code = "";
            Message = "";
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public PSIceOrderStatus(string Index, string OrderNo, PortServerIce.PSIceMarket Market, string StockAccount, PortServerIce.PSIceOrderType OrderType, int Side, string Code, long OrderPrice, int OrderVolume, int OrderTime, long FilledPrice, int FilledVolume, long FilledAmount, int FilledCount, bool IsCancel, int CancelVolume, PortServerIce.PSIceOrderState OrderState, string Message)
        {
            this.Index = Index;
            this.OrderNo = OrderNo;
            this.Market = Market;
            this.StockAccount = StockAccount;
            this.OrderType = OrderType;
            this.Side = Side;
            this.Code = Code;
            this.OrderPrice = OrderPrice;
            this.OrderVolume = OrderVolume;
            this.OrderTime = OrderTime;
            this.FilledPrice = FilledPrice;
            this.FilledVolume = FilledVolume;
            this.FilledAmount = FilledAmount;
            this.FilledCount = FilledCount;
            this.IsCancel = IsCancel;
            this.CancelVolume = CancelVolume;
            this.OrderState = OrderState;
            this.Message = Message;
        }

        #endregion

        #region ICloneable members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public override int GetHashCode()
        {
            int h__ = 5381;
            IceInternal.HashUtil.hashAdd(ref h__, "::PortServerIce::PSIceOrderStatus");
            IceInternal.HashUtil.hashAdd(ref h__, Index);
            IceInternal.HashUtil.hashAdd(ref h__, OrderNo);
            IceInternal.HashUtil.hashAdd(ref h__, Market);
            IceInternal.HashUtil.hashAdd(ref h__, StockAccount);
            IceInternal.HashUtil.hashAdd(ref h__, OrderType);
            IceInternal.HashUtil.hashAdd(ref h__, Side);
            IceInternal.HashUtil.hashAdd(ref h__, Code);
            IceInternal.HashUtil.hashAdd(ref h__, OrderPrice);
            IceInternal.HashUtil.hashAdd(ref h__, OrderVolume);
            IceInternal.HashUtil.hashAdd(ref h__, OrderTime);
            IceInternal.HashUtil.hashAdd(ref h__, FilledPrice);
            IceInternal.HashUtil.hashAdd(ref h__, FilledVolume);
            IceInternal.HashUtil.hashAdd(ref h__, FilledAmount);
            IceInternal.HashUtil.hashAdd(ref h__, FilledCount);
            IceInternal.HashUtil.hashAdd(ref h__, IsCancel);
            IceInternal.HashUtil.hashAdd(ref h__, CancelVolume);
            IceInternal.HashUtil.hashAdd(ref h__, OrderState);
            IceInternal.HashUtil.hashAdd(ref h__, Message);
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public override bool Equals(object other__)
        {
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            if(other__ == null)
            {
                return false;
            }
            if(GetType() != other__.GetType())
            {
                return false;
            }
            PSIceOrderStatus o__ = (PSIceOrderStatus)other__;
            if(Index == null)
            {
                if(o__.Index != null)
                {
                    return false;
                }
            }
            else
            {
                if(!Index.Equals(o__.Index))
                {
                    return false;
                }
            }
            if(OrderNo == null)
            {
                if(o__.OrderNo != null)
                {
                    return false;
                }
            }
            else
            {
                if(!OrderNo.Equals(o__.OrderNo))
                {
                    return false;
                }
            }
            if(!Market.Equals(o__.Market))
            {
                return false;
            }
            if(StockAccount == null)
            {
                if(o__.StockAccount != null)
                {
                    return false;
                }
            }
            else
            {
                if(!StockAccount.Equals(o__.StockAccount))
                {
                    return false;
                }
            }
            if(!OrderType.Equals(o__.OrderType))
            {
                return false;
            }
            if(!Side.Equals(o__.Side))
            {
                return false;
            }
            if(Code == null)
            {
                if(o__.Code != null)
                {
                    return false;
                }
            }
            else
            {
                if(!Code.Equals(o__.Code))
                {
                    return false;
                }
            }
            if(!OrderPrice.Equals(o__.OrderPrice))
            {
                return false;
            }
            if(!OrderVolume.Equals(o__.OrderVolume))
            {
                return false;
            }
            if(!OrderTime.Equals(o__.OrderTime))
            {
                return false;
            }
            if(!FilledPrice.Equals(o__.FilledPrice))
            {
                return false;
            }
            if(!FilledVolume.Equals(o__.FilledVolume))
            {
                return false;
            }
            if(!FilledAmount.Equals(o__.FilledAmount))
            {
                return false;
            }
            if(!FilledCount.Equals(o__.FilledCount))
            {
                return false;
            }
            if(!IsCancel.Equals(o__.IsCancel))
            {
                return false;
            }
            if(!CancelVolume.Equals(o__.CancelVolume))
            {
                return false;
            }
            if(!OrderState.Equals(o__.OrderState))
            {
                return false;
            }
            if(Message == null)
            {
                if(o__.Message != null)
                {
                    return false;
                }
            }
            else
            {
                if(!Message.Equals(o__.Message))
                {
                    return false;
                }
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static bool operator==(PSIceOrderStatus lhs__, PSIceOrderStatus rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static bool operator!=(PSIceOrderStatus lhs__, PSIceOrderStatus rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshalling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public void write__(IceInternal.BasicStream os__)
        {
            os__.writeString(Index);
            os__.writeString(OrderNo);
            os__.writeEnum((int)Market, 1);
            os__.writeString(StockAccount);
            os__.writeEnum((int)OrderType, 10);
            os__.writeInt(Side);
            os__.writeString(Code);
            os__.writeLong(OrderPrice);
            os__.writeInt(OrderVolume);
            os__.writeInt(OrderTime);
            os__.writeLong(FilledPrice);
            os__.writeInt(FilledVolume);
            os__.writeLong(FilledAmount);
            os__.writeInt(FilledCount);
            os__.writeBool(IsCancel);
            os__.writeInt(CancelVolume);
            os__.writeEnum((int)OrderState, 11);
            os__.writeString(Message);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public void read__(IceInternal.BasicStream is__)
        {
            Index = is__.readString();
            OrderNo = is__.readString();
            Market = (PortServerIce.PSIceMarket)is__.readEnum(1);
            StockAccount = is__.readString();
            OrderType = (PortServerIce.PSIceOrderType)is__.readEnum(10);
            Side = is__.readInt();
            Code = is__.readString();
            OrderPrice = is__.readLong();
            OrderVolume = is__.readInt();
            OrderTime = is__.readInt();
            FilledPrice = is__.readLong();
            FilledVolume = is__.readInt();
            FilledAmount = is__.readLong();
            FilledCount = is__.readInt();
            IsCancel = is__.readBool();
            CancelVolume = is__.readInt();
            OrderState = (PortServerIce.PSIceOrderState)is__.readEnum(11);
            Message = is__.readString();
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static void write__(IceInternal.BasicStream os__, PSIceOrderStatus v__)
        {
            if(v__ == null)
            {
                nullMarshalValue__.write__(os__);
            }
            else
            {
                v__.write__(os__);
            }
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static PSIceOrderStatus read__(IceInternal.BasicStream is__, PSIceOrderStatus v__)
        {
            if(v__ == null)
            {
                v__ = new PSIceOrderStatus();
            }
            v__.read__(is__);
            return v__;
        }
        
        private static readonly PSIceOrderStatus nullMarshalValue__ = new PSIceOrderStatus();

        #endregion
    }

    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
#if !SILVERLIGHT
    [_System.Serializable]
#endif
    public partial class PSIceTransStatus : _System.ICloneable
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public string Index;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public string OrderNo;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public string TransNo;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public PortServerIce.PSIceMarket Market;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public string StockAccount;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public PortServerIce.PSIceOrderType OrderType;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public int Side;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public string Code;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public long FilledPrice;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public int FilledVolume;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public long FilledAmount;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public int FilledTime;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public bool IsCancel;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public int CancelVolume;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public PSIceTransStatus()
        {
            Index = "";
            OrderNo = "";
            TransNo = "";
            StockAccount = "";
            Code = "";
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public PSIceTransStatus(string Index, string OrderNo, string TransNo, PortServerIce.PSIceMarket Market, string StockAccount, PortServerIce.PSIceOrderType OrderType, int Side, string Code, long FilledPrice, int FilledVolume, long FilledAmount, int FilledTime, bool IsCancel, int CancelVolume)
        {
            this.Index = Index;
            this.OrderNo = OrderNo;
            this.TransNo = TransNo;
            this.Market = Market;
            this.StockAccount = StockAccount;
            this.OrderType = OrderType;
            this.Side = Side;
            this.Code = Code;
            this.FilledPrice = FilledPrice;
            this.FilledVolume = FilledVolume;
            this.FilledAmount = FilledAmount;
            this.FilledTime = FilledTime;
            this.IsCancel = IsCancel;
            this.CancelVolume = CancelVolume;
        }

        #endregion

        #region ICloneable members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public override int GetHashCode()
        {
            int h__ = 5381;
            IceInternal.HashUtil.hashAdd(ref h__, "::PortServerIce::PSIceTransStatus");
            IceInternal.HashUtil.hashAdd(ref h__, Index);
            IceInternal.HashUtil.hashAdd(ref h__, OrderNo);
            IceInternal.HashUtil.hashAdd(ref h__, TransNo);
            IceInternal.HashUtil.hashAdd(ref h__, Market);
            IceInternal.HashUtil.hashAdd(ref h__, StockAccount);
            IceInternal.HashUtil.hashAdd(ref h__, OrderType);
            IceInternal.HashUtil.hashAdd(ref h__, Side);
            IceInternal.HashUtil.hashAdd(ref h__, Code);
            IceInternal.HashUtil.hashAdd(ref h__, FilledPrice);
            IceInternal.HashUtil.hashAdd(ref h__, FilledVolume);
            IceInternal.HashUtil.hashAdd(ref h__, FilledAmount);
            IceInternal.HashUtil.hashAdd(ref h__, FilledTime);
            IceInternal.HashUtil.hashAdd(ref h__, IsCancel);
            IceInternal.HashUtil.hashAdd(ref h__, CancelVolume);
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public override bool Equals(object other__)
        {
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            if(other__ == null)
            {
                return false;
            }
            if(GetType() != other__.GetType())
            {
                return false;
            }
            PSIceTransStatus o__ = (PSIceTransStatus)other__;
            if(Index == null)
            {
                if(o__.Index != null)
                {
                    return false;
                }
            }
            else
            {
                if(!Index.Equals(o__.Index))
                {
                    return false;
                }
            }
            if(OrderNo == null)
            {
                if(o__.OrderNo != null)
                {
                    return false;
                }
            }
            else
            {
                if(!OrderNo.Equals(o__.OrderNo))
                {
                    return false;
                }
            }
            if(TransNo == null)
            {
                if(o__.TransNo != null)
                {
                    return false;
                }
            }
            else
            {
                if(!TransNo.Equals(o__.TransNo))
                {
                    return false;
                }
            }
            if(!Market.Equals(o__.Market))
            {
                return false;
            }
            if(StockAccount == null)
            {
                if(o__.StockAccount != null)
                {
                    return false;
                }
            }
            else
            {
                if(!StockAccount.Equals(o__.StockAccount))
                {
                    return false;
                }
            }
            if(!OrderType.Equals(o__.OrderType))
            {
                return false;
            }
            if(!Side.Equals(o__.Side))
            {
                return false;
            }
            if(Code == null)
            {
                if(o__.Code != null)
                {
                    return false;
                }
            }
            else
            {
                if(!Code.Equals(o__.Code))
                {
                    return false;
                }
            }
            if(!FilledPrice.Equals(o__.FilledPrice))
            {
                return false;
            }
            if(!FilledVolume.Equals(o__.FilledVolume))
            {
                return false;
            }
            if(!FilledAmount.Equals(o__.FilledAmount))
            {
                return false;
            }
            if(!FilledTime.Equals(o__.FilledTime))
            {
                return false;
            }
            if(!IsCancel.Equals(o__.IsCancel))
            {
                return false;
            }
            if(!CancelVolume.Equals(o__.CancelVolume))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static bool operator==(PSIceTransStatus lhs__, PSIceTransStatus rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static bool operator!=(PSIceTransStatus lhs__, PSIceTransStatus rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshalling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public void write__(IceInternal.BasicStream os__)
        {
            os__.writeString(Index);
            os__.writeString(OrderNo);
            os__.writeString(TransNo);
            os__.writeEnum((int)Market, 1);
            os__.writeString(StockAccount);
            os__.writeEnum((int)OrderType, 10);
            os__.writeInt(Side);
            os__.writeString(Code);
            os__.writeLong(FilledPrice);
            os__.writeInt(FilledVolume);
            os__.writeLong(FilledAmount);
            os__.writeInt(FilledTime);
            os__.writeBool(IsCancel);
            os__.writeInt(CancelVolume);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public void read__(IceInternal.BasicStream is__)
        {
            Index = is__.readString();
            OrderNo = is__.readString();
            TransNo = is__.readString();
            Market = (PortServerIce.PSIceMarket)is__.readEnum(1);
            StockAccount = is__.readString();
            OrderType = (PortServerIce.PSIceOrderType)is__.readEnum(10);
            Side = is__.readInt();
            Code = is__.readString();
            FilledPrice = is__.readLong();
            FilledVolume = is__.readInt();
            FilledAmount = is__.readLong();
            FilledTime = is__.readInt();
            IsCancel = is__.readBool();
            CancelVolume = is__.readInt();
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static void write__(IceInternal.BasicStream os__, PSIceTransStatus v__)
        {
            if(v__ == null)
            {
                nullMarshalValue__.write__(os__);
            }
            else
            {
                v__.write__(os__);
            }
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static PSIceTransStatus read__(IceInternal.BasicStream is__, PSIceTransStatus v__)
        {
            if(v__ == null)
            {
                v__ = new PSIceTransStatus();
            }
            v__.read__(is__);
            return v__;
        }
        
        private static readonly PSIceTransStatus nullMarshalValue__ = new PSIceTransStatus();

        #endregion
    }

    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
#if !SILVERLIGHT
    [_System.Serializable]
#endif
    public partial class PSIceOrderContractSearch : _System.ICloneable
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public string Index;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public int ContractType;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public int ContractState;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public string Code;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public int StartDate;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public int EndDate;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public PSIceOrderContractSearch()
        {
            Index = "";
            Code = "";
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public PSIceOrderContractSearch(string Index, int ContractType, int ContractState, string Code, int StartDate, int EndDate)
        {
            this.Index = Index;
            this.ContractType = ContractType;
            this.ContractState = ContractState;
            this.Code = Code;
            this.StartDate = StartDate;
            this.EndDate = EndDate;
        }

        #endregion

        #region ICloneable members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public override int GetHashCode()
        {
            int h__ = 5381;
            IceInternal.HashUtil.hashAdd(ref h__, "::PortServerIce::PSIceOrderContractSearch");
            IceInternal.HashUtil.hashAdd(ref h__, Index);
            IceInternal.HashUtil.hashAdd(ref h__, ContractType);
            IceInternal.HashUtil.hashAdd(ref h__, ContractState);
            IceInternal.HashUtil.hashAdd(ref h__, Code);
            IceInternal.HashUtil.hashAdd(ref h__, StartDate);
            IceInternal.HashUtil.hashAdd(ref h__, EndDate);
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public override bool Equals(object other__)
        {
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            if(other__ == null)
            {
                return false;
            }
            if(GetType() != other__.GetType())
            {
                return false;
            }
            PSIceOrderContractSearch o__ = (PSIceOrderContractSearch)other__;
            if(Index == null)
            {
                if(o__.Index != null)
                {
                    return false;
                }
            }
            else
            {
                if(!Index.Equals(o__.Index))
                {
                    return false;
                }
            }
            if(!ContractType.Equals(o__.ContractType))
            {
                return false;
            }
            if(!ContractState.Equals(o__.ContractState))
            {
                return false;
            }
            if(Code == null)
            {
                if(o__.Code != null)
                {
                    return false;
                }
            }
            else
            {
                if(!Code.Equals(o__.Code))
                {
                    return false;
                }
            }
            if(!StartDate.Equals(o__.StartDate))
            {
                return false;
            }
            if(!EndDate.Equals(o__.EndDate))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static bool operator==(PSIceOrderContractSearch lhs__, PSIceOrderContractSearch rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static bool operator!=(PSIceOrderContractSearch lhs__, PSIceOrderContractSearch rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshalling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public void write__(IceInternal.BasicStream os__)
        {
            os__.writeString(Index);
            os__.writeInt(ContractType);
            os__.writeInt(ContractState);
            os__.writeString(Code);
            os__.writeInt(StartDate);
            os__.writeInt(EndDate);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public void read__(IceInternal.BasicStream is__)
        {
            Index = is__.readString();
            ContractType = is__.readInt();
            ContractState = is__.readInt();
            Code = is__.readString();
            StartDate = is__.readInt();
            EndDate = is__.readInt();
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static void write__(IceInternal.BasicStream os__, PSIceOrderContractSearch v__)
        {
            if(v__ == null)
            {
                nullMarshalValue__.write__(os__);
            }
            else
            {
                v__.write__(os__);
            }
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static PSIceOrderContractSearch read__(IceInternal.BasicStream is__, PSIceOrderContractSearch v__)
        {
            if(v__ == null)
            {
                v__ = new PSIceOrderContractSearch();
            }
            v__.read__(is__);
            return v__;
        }
        
        private static readonly PSIceOrderContractSearch nullMarshalValue__ = new PSIceOrderContractSearch();

        #endregion
    }

    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
#if !SILVERLIGHT
    [_System.Serializable]
#endif
    public partial class PSIceOrderContract : _System.ICloneable
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public string Index;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public string OrderNo;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public string ContractNo;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public int ContractType;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public string Code;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public int ShareVolume;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public int DebtVolume;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public int RefundVolume;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public long RefundFund;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public long DebtAmount;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public long RefundAmount;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public int OpenDate;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public PSIceOrderContract()
        {
            Index = "";
            OrderNo = "";
            ContractNo = "";
            Code = "";
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public PSIceOrderContract(string Index, string OrderNo, string ContractNo, int ContractType, string Code, int ShareVolume, int DebtVolume, int RefundVolume, long RefundFund, long DebtAmount, long RefundAmount, int OpenDate)
        {
            this.Index = Index;
            this.OrderNo = OrderNo;
            this.ContractNo = ContractNo;
            this.ContractType = ContractType;
            this.Code = Code;
            this.ShareVolume = ShareVolume;
            this.DebtVolume = DebtVolume;
            this.RefundVolume = RefundVolume;
            this.RefundFund = RefundFund;
            this.DebtAmount = DebtAmount;
            this.RefundAmount = RefundAmount;
            this.OpenDate = OpenDate;
        }

        #endregion

        #region ICloneable members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public override int GetHashCode()
        {
            int h__ = 5381;
            IceInternal.HashUtil.hashAdd(ref h__, "::PortServerIce::PSIceOrderContract");
            IceInternal.HashUtil.hashAdd(ref h__, Index);
            IceInternal.HashUtil.hashAdd(ref h__, OrderNo);
            IceInternal.HashUtil.hashAdd(ref h__, ContractNo);
            IceInternal.HashUtil.hashAdd(ref h__, ContractType);
            IceInternal.HashUtil.hashAdd(ref h__, Code);
            IceInternal.HashUtil.hashAdd(ref h__, ShareVolume);
            IceInternal.HashUtil.hashAdd(ref h__, DebtVolume);
            IceInternal.HashUtil.hashAdd(ref h__, RefundVolume);
            IceInternal.HashUtil.hashAdd(ref h__, RefundFund);
            IceInternal.HashUtil.hashAdd(ref h__, DebtAmount);
            IceInternal.HashUtil.hashAdd(ref h__, RefundAmount);
            IceInternal.HashUtil.hashAdd(ref h__, OpenDate);
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public override bool Equals(object other__)
        {
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            if(other__ == null)
            {
                return false;
            }
            if(GetType() != other__.GetType())
            {
                return false;
            }
            PSIceOrderContract o__ = (PSIceOrderContract)other__;
            if(Index == null)
            {
                if(o__.Index != null)
                {
                    return false;
                }
            }
            else
            {
                if(!Index.Equals(o__.Index))
                {
                    return false;
                }
            }
            if(OrderNo == null)
            {
                if(o__.OrderNo != null)
                {
                    return false;
                }
            }
            else
            {
                if(!OrderNo.Equals(o__.OrderNo))
                {
                    return false;
                }
            }
            if(ContractNo == null)
            {
                if(o__.ContractNo != null)
                {
                    return false;
                }
            }
            else
            {
                if(!ContractNo.Equals(o__.ContractNo))
                {
                    return false;
                }
            }
            if(!ContractType.Equals(o__.ContractType))
            {
                return false;
            }
            if(Code == null)
            {
                if(o__.Code != null)
                {
                    return false;
                }
            }
            else
            {
                if(!Code.Equals(o__.Code))
                {
                    return false;
                }
            }
            if(!ShareVolume.Equals(o__.ShareVolume))
            {
                return false;
            }
            if(!DebtVolume.Equals(o__.DebtVolume))
            {
                return false;
            }
            if(!RefundVolume.Equals(o__.RefundVolume))
            {
                return false;
            }
            if(!RefundFund.Equals(o__.RefundFund))
            {
                return false;
            }
            if(!DebtAmount.Equals(o__.DebtAmount))
            {
                return false;
            }
            if(!RefundAmount.Equals(o__.RefundAmount))
            {
                return false;
            }
            if(!OpenDate.Equals(o__.OpenDate))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static bool operator==(PSIceOrderContract lhs__, PSIceOrderContract rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static bool operator!=(PSIceOrderContract lhs__, PSIceOrderContract rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshalling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public void write__(IceInternal.BasicStream os__)
        {
            os__.writeString(Index);
            os__.writeString(OrderNo);
            os__.writeString(ContractNo);
            os__.writeInt(ContractType);
            os__.writeString(Code);
            os__.writeInt(ShareVolume);
            os__.writeInt(DebtVolume);
            os__.writeInt(RefundVolume);
            os__.writeLong(RefundFund);
            os__.writeLong(DebtAmount);
            os__.writeLong(RefundAmount);
            os__.writeInt(OpenDate);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public void read__(IceInternal.BasicStream is__)
        {
            Index = is__.readString();
            OrderNo = is__.readString();
            ContractNo = is__.readString();
            ContractType = is__.readInt();
            Code = is__.readString();
            ShareVolume = is__.readInt();
            DebtVolume = is__.readInt();
            RefundVolume = is__.readInt();
            RefundFund = is__.readLong();
            DebtAmount = is__.readLong();
            RefundAmount = is__.readLong();
            OpenDate = is__.readInt();
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static void write__(IceInternal.BasicStream os__, PSIceOrderContract v__)
        {
            if(v__ == null)
            {
                nullMarshalValue__.write__(os__);
            }
            else
            {
                v__.write__(os__);
            }
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static PSIceOrderContract read__(IceInternal.BasicStream is__, PSIceOrderContract v__)
        {
            if(v__ == null)
            {
                v__ = new PSIceOrderContract();
            }
            v__.read__(is__);
            return v__;
        }
        
        private static readonly PSIceOrderContract nullMarshalValue__ = new PSIceOrderContract();

        #endregion
    }

    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
#if !SILVERLIGHT
    [_System.Serializable]
#endif
    public partial class PSIceOrderDetail : _System.ICloneable
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public string Index;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public string OrderNo;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public int OrderDate;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public int OrderTime;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public int ReportTime;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public PortServerIce.PSIceMarket Market;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public string StockAccount;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public PortServerIce.PSIceOrderType OrderType;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public int Side;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public string Code;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public long OrderPrice;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public int OrderVolume;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public long FilledPrice;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public int FilledVolume;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public long FilledAmount;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public int FilledTime;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public bool IsCancel;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public int CancelVolume;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public PortServerIce.PSIceOrderState OrderState;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public PSIceOrderDetail()
        {
            Index = "";
            OrderNo = "";
            StockAccount = "";
            Code = "";
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public PSIceOrderDetail(string Index, string OrderNo, int OrderDate, int OrderTime, int ReportTime, PortServerIce.PSIceMarket Market, string StockAccount, PortServerIce.PSIceOrderType OrderType, int Side, string Code, long OrderPrice, int OrderVolume, long FilledPrice, int FilledVolume, long FilledAmount, int FilledTime, bool IsCancel, int CancelVolume, PortServerIce.PSIceOrderState OrderState)
        {
            this.Index = Index;
            this.OrderNo = OrderNo;
            this.OrderDate = OrderDate;
            this.OrderTime = OrderTime;
            this.ReportTime = ReportTime;
            this.Market = Market;
            this.StockAccount = StockAccount;
            this.OrderType = OrderType;
            this.Side = Side;
            this.Code = Code;
            this.OrderPrice = OrderPrice;
            this.OrderVolume = OrderVolume;
            this.FilledPrice = FilledPrice;
            this.FilledVolume = FilledVolume;
            this.FilledAmount = FilledAmount;
            this.FilledTime = FilledTime;
            this.IsCancel = IsCancel;
            this.CancelVolume = CancelVolume;
            this.OrderState = OrderState;
        }

        #endregion

        #region ICloneable members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public override int GetHashCode()
        {
            int h__ = 5381;
            IceInternal.HashUtil.hashAdd(ref h__, "::PortServerIce::PSIceOrderDetail");
            IceInternal.HashUtil.hashAdd(ref h__, Index);
            IceInternal.HashUtil.hashAdd(ref h__, OrderNo);
            IceInternal.HashUtil.hashAdd(ref h__, OrderDate);
            IceInternal.HashUtil.hashAdd(ref h__, OrderTime);
            IceInternal.HashUtil.hashAdd(ref h__, ReportTime);
            IceInternal.HashUtil.hashAdd(ref h__, Market);
            IceInternal.HashUtil.hashAdd(ref h__, StockAccount);
            IceInternal.HashUtil.hashAdd(ref h__, OrderType);
            IceInternal.HashUtil.hashAdd(ref h__, Side);
            IceInternal.HashUtil.hashAdd(ref h__, Code);
            IceInternal.HashUtil.hashAdd(ref h__, OrderPrice);
            IceInternal.HashUtil.hashAdd(ref h__, OrderVolume);
            IceInternal.HashUtil.hashAdd(ref h__, FilledPrice);
            IceInternal.HashUtil.hashAdd(ref h__, FilledVolume);
            IceInternal.HashUtil.hashAdd(ref h__, FilledAmount);
            IceInternal.HashUtil.hashAdd(ref h__, FilledTime);
            IceInternal.HashUtil.hashAdd(ref h__, IsCancel);
            IceInternal.HashUtil.hashAdd(ref h__, CancelVolume);
            IceInternal.HashUtil.hashAdd(ref h__, OrderState);
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public override bool Equals(object other__)
        {
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            if(other__ == null)
            {
                return false;
            }
            if(GetType() != other__.GetType())
            {
                return false;
            }
            PSIceOrderDetail o__ = (PSIceOrderDetail)other__;
            if(Index == null)
            {
                if(o__.Index != null)
                {
                    return false;
                }
            }
            else
            {
                if(!Index.Equals(o__.Index))
                {
                    return false;
                }
            }
            if(OrderNo == null)
            {
                if(o__.OrderNo != null)
                {
                    return false;
                }
            }
            else
            {
                if(!OrderNo.Equals(o__.OrderNo))
                {
                    return false;
                }
            }
            if(!OrderDate.Equals(o__.OrderDate))
            {
                return false;
            }
            if(!OrderTime.Equals(o__.OrderTime))
            {
                return false;
            }
            if(!ReportTime.Equals(o__.ReportTime))
            {
                return false;
            }
            if(!Market.Equals(o__.Market))
            {
                return false;
            }
            if(StockAccount == null)
            {
                if(o__.StockAccount != null)
                {
                    return false;
                }
            }
            else
            {
                if(!StockAccount.Equals(o__.StockAccount))
                {
                    return false;
                }
            }
            if(!OrderType.Equals(o__.OrderType))
            {
                return false;
            }
            if(!Side.Equals(o__.Side))
            {
                return false;
            }
            if(Code == null)
            {
                if(o__.Code != null)
                {
                    return false;
                }
            }
            else
            {
                if(!Code.Equals(o__.Code))
                {
                    return false;
                }
            }
            if(!OrderPrice.Equals(o__.OrderPrice))
            {
                return false;
            }
            if(!OrderVolume.Equals(o__.OrderVolume))
            {
                return false;
            }
            if(!FilledPrice.Equals(o__.FilledPrice))
            {
                return false;
            }
            if(!FilledVolume.Equals(o__.FilledVolume))
            {
                return false;
            }
            if(!FilledAmount.Equals(o__.FilledAmount))
            {
                return false;
            }
            if(!FilledTime.Equals(o__.FilledTime))
            {
                return false;
            }
            if(!IsCancel.Equals(o__.IsCancel))
            {
                return false;
            }
            if(!CancelVolume.Equals(o__.CancelVolume))
            {
                return false;
            }
            if(!OrderState.Equals(o__.OrderState))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static bool operator==(PSIceOrderDetail lhs__, PSIceOrderDetail rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static bool operator!=(PSIceOrderDetail lhs__, PSIceOrderDetail rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshalling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public void write__(IceInternal.BasicStream os__)
        {
            os__.writeString(Index);
            os__.writeString(OrderNo);
            os__.writeInt(OrderDate);
            os__.writeInt(OrderTime);
            os__.writeInt(ReportTime);
            os__.writeEnum((int)Market, 1);
            os__.writeString(StockAccount);
            os__.writeEnum((int)OrderType, 10);
            os__.writeInt(Side);
            os__.writeString(Code);
            os__.writeLong(OrderPrice);
            os__.writeInt(OrderVolume);
            os__.writeLong(FilledPrice);
            os__.writeInt(FilledVolume);
            os__.writeLong(FilledAmount);
            os__.writeInt(FilledTime);
            os__.writeBool(IsCancel);
            os__.writeInt(CancelVolume);
            os__.writeEnum((int)OrderState, 11);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public void read__(IceInternal.BasicStream is__)
        {
            Index = is__.readString();
            OrderNo = is__.readString();
            OrderDate = is__.readInt();
            OrderTime = is__.readInt();
            ReportTime = is__.readInt();
            Market = (PortServerIce.PSIceMarket)is__.readEnum(1);
            StockAccount = is__.readString();
            OrderType = (PortServerIce.PSIceOrderType)is__.readEnum(10);
            Side = is__.readInt();
            Code = is__.readString();
            OrderPrice = is__.readLong();
            OrderVolume = is__.readInt();
            FilledPrice = is__.readLong();
            FilledVolume = is__.readInt();
            FilledAmount = is__.readLong();
            FilledTime = is__.readInt();
            IsCancel = is__.readBool();
            CancelVolume = is__.readInt();
            OrderState = (PortServerIce.PSIceOrderState)is__.readEnum(11);
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static void write__(IceInternal.BasicStream os__, PSIceOrderDetail v__)
        {
            if(v__ == null)
            {
                nullMarshalValue__.write__(os__);
            }
            else
            {
                v__.write__(os__);
            }
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static PSIceOrderDetail read__(IceInternal.BasicStream is__, PSIceOrderDetail v__)
        {
            if(v__ == null)
            {
                v__ = new PSIceOrderDetail();
            }
            v__.read__(is__);
            return v__;
        }
        
        private static readonly PSIceOrderDetail nullMarshalValue__ = new PSIceOrderDetail();

        #endregion
    }

    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
#if !SILVERLIGHT
    [_System.Serializable]
#endif
    public partial class PSIceTransDetail : _System.ICloneable
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public string Index;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public string OrderNo;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public string TransNo;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public PortServerIce.PSIceMarket Market;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public string StockAccount;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public PortServerIce.PSIceOrderType OrderType;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public int Side;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public string Code;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public long FilledPrice;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public int FilledVolume;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public long FilledAmount;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public bool IsCancel;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public int CancelVolume;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public int FilledDate;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public int FilledTime;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public PSIceTransDetail()
        {
            Index = "";
            OrderNo = "";
            TransNo = "";
            StockAccount = "";
            Code = "";
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public PSIceTransDetail(string Index, string OrderNo, string TransNo, PortServerIce.PSIceMarket Market, string StockAccount, PortServerIce.PSIceOrderType OrderType, int Side, string Code, long FilledPrice, int FilledVolume, long FilledAmount, bool IsCancel, int CancelVolume, int FilledDate, int FilledTime)
        {
            this.Index = Index;
            this.OrderNo = OrderNo;
            this.TransNo = TransNo;
            this.Market = Market;
            this.StockAccount = StockAccount;
            this.OrderType = OrderType;
            this.Side = Side;
            this.Code = Code;
            this.FilledPrice = FilledPrice;
            this.FilledVolume = FilledVolume;
            this.FilledAmount = FilledAmount;
            this.IsCancel = IsCancel;
            this.CancelVolume = CancelVolume;
            this.FilledDate = FilledDate;
            this.FilledTime = FilledTime;
        }

        #endregion

        #region ICloneable members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public override int GetHashCode()
        {
            int h__ = 5381;
            IceInternal.HashUtil.hashAdd(ref h__, "::PortServerIce::PSIceTransDetail");
            IceInternal.HashUtil.hashAdd(ref h__, Index);
            IceInternal.HashUtil.hashAdd(ref h__, OrderNo);
            IceInternal.HashUtil.hashAdd(ref h__, TransNo);
            IceInternal.HashUtil.hashAdd(ref h__, Market);
            IceInternal.HashUtil.hashAdd(ref h__, StockAccount);
            IceInternal.HashUtil.hashAdd(ref h__, OrderType);
            IceInternal.HashUtil.hashAdd(ref h__, Side);
            IceInternal.HashUtil.hashAdd(ref h__, Code);
            IceInternal.HashUtil.hashAdd(ref h__, FilledPrice);
            IceInternal.HashUtil.hashAdd(ref h__, FilledVolume);
            IceInternal.HashUtil.hashAdd(ref h__, FilledAmount);
            IceInternal.HashUtil.hashAdd(ref h__, IsCancel);
            IceInternal.HashUtil.hashAdd(ref h__, CancelVolume);
            IceInternal.HashUtil.hashAdd(ref h__, FilledDate);
            IceInternal.HashUtil.hashAdd(ref h__, FilledTime);
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public override bool Equals(object other__)
        {
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            if(other__ == null)
            {
                return false;
            }
            if(GetType() != other__.GetType())
            {
                return false;
            }
            PSIceTransDetail o__ = (PSIceTransDetail)other__;
            if(Index == null)
            {
                if(o__.Index != null)
                {
                    return false;
                }
            }
            else
            {
                if(!Index.Equals(o__.Index))
                {
                    return false;
                }
            }
            if(OrderNo == null)
            {
                if(o__.OrderNo != null)
                {
                    return false;
                }
            }
            else
            {
                if(!OrderNo.Equals(o__.OrderNo))
                {
                    return false;
                }
            }
            if(TransNo == null)
            {
                if(o__.TransNo != null)
                {
                    return false;
                }
            }
            else
            {
                if(!TransNo.Equals(o__.TransNo))
                {
                    return false;
                }
            }
            if(!Market.Equals(o__.Market))
            {
                return false;
            }
            if(StockAccount == null)
            {
                if(o__.StockAccount != null)
                {
                    return false;
                }
            }
            else
            {
                if(!StockAccount.Equals(o__.StockAccount))
                {
                    return false;
                }
            }
            if(!OrderType.Equals(o__.OrderType))
            {
                return false;
            }
            if(!Side.Equals(o__.Side))
            {
                return false;
            }
            if(Code == null)
            {
                if(o__.Code != null)
                {
                    return false;
                }
            }
            else
            {
                if(!Code.Equals(o__.Code))
                {
                    return false;
                }
            }
            if(!FilledPrice.Equals(o__.FilledPrice))
            {
                return false;
            }
            if(!FilledVolume.Equals(o__.FilledVolume))
            {
                return false;
            }
            if(!FilledAmount.Equals(o__.FilledAmount))
            {
                return false;
            }
            if(!IsCancel.Equals(o__.IsCancel))
            {
                return false;
            }
            if(!CancelVolume.Equals(o__.CancelVolume))
            {
                return false;
            }
            if(!FilledDate.Equals(o__.FilledDate))
            {
                return false;
            }
            if(!FilledTime.Equals(o__.FilledTime))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static bool operator==(PSIceTransDetail lhs__, PSIceTransDetail rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static bool operator!=(PSIceTransDetail lhs__, PSIceTransDetail rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshalling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public void write__(IceInternal.BasicStream os__)
        {
            os__.writeString(Index);
            os__.writeString(OrderNo);
            os__.writeString(TransNo);
            os__.writeEnum((int)Market, 1);
            os__.writeString(StockAccount);
            os__.writeEnum((int)OrderType, 10);
            os__.writeInt(Side);
            os__.writeString(Code);
            os__.writeLong(FilledPrice);
            os__.writeInt(FilledVolume);
            os__.writeLong(FilledAmount);
            os__.writeBool(IsCancel);
            os__.writeInt(CancelVolume);
            os__.writeInt(FilledDate);
            os__.writeInt(FilledTime);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public void read__(IceInternal.BasicStream is__)
        {
            Index = is__.readString();
            OrderNo = is__.readString();
            TransNo = is__.readString();
            Market = (PortServerIce.PSIceMarket)is__.readEnum(1);
            StockAccount = is__.readString();
            OrderType = (PortServerIce.PSIceOrderType)is__.readEnum(10);
            Side = is__.readInt();
            Code = is__.readString();
            FilledPrice = is__.readLong();
            FilledVolume = is__.readInt();
            FilledAmount = is__.readLong();
            IsCancel = is__.readBool();
            CancelVolume = is__.readInt();
            FilledDate = is__.readInt();
            FilledTime = is__.readInt();
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static void write__(IceInternal.BasicStream os__, PSIceTransDetail v__)
        {
            if(v__ == null)
            {
                nullMarshalValue__.write__(os__);
            }
            else
            {
                v__.write__(os__);
            }
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static PSIceTransDetail read__(IceInternal.BasicStream is__, PSIceTransDetail v__)
        {
            if(v__ == null)
            {
                v__ = new PSIceTransDetail();
            }
            v__.read__(is__);
            return v__;
        }
        
        private static readonly PSIceTransDetail nullMarshalValue__ = new PSIceTransDetail();

        #endregion
    }

    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
#if !SILVERLIGHT
    [_System.Serializable]
#endif
    public partial class PSIceTradeDetail : _System.ICloneable
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public string Index;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public int TradeDate;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public string OrderNo;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public PortServerIce.PSIceMarket Market;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public string StockAccount;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public PortServerIce.PSIceOrderType OrderType;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public string Code;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public int MatchTimes;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public int MatchVolume;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public long MatchPrice;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public long MatchAmount;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public long FundEffect;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public long FeeYHS;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public long FeeSXF;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public long FeeGHF;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public long FeeYJ;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public long FeeOther;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public PSIceTradeDetail()
        {
            Index = "";
            OrderNo = "";
            StockAccount = "";
            Code = "";
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public PSIceTradeDetail(string Index, int TradeDate, string OrderNo, PortServerIce.PSIceMarket Market, string StockAccount, PortServerIce.PSIceOrderType OrderType, string Code, int MatchTimes, int MatchVolume, long MatchPrice, long MatchAmount, long FundEffect, long FeeYHS, long FeeSXF, long FeeGHF, long FeeYJ, long FeeOther)
        {
            this.Index = Index;
            this.TradeDate = TradeDate;
            this.OrderNo = OrderNo;
            this.Market = Market;
            this.StockAccount = StockAccount;
            this.OrderType = OrderType;
            this.Code = Code;
            this.MatchTimes = MatchTimes;
            this.MatchVolume = MatchVolume;
            this.MatchPrice = MatchPrice;
            this.MatchAmount = MatchAmount;
            this.FundEffect = FundEffect;
            this.FeeYHS = FeeYHS;
            this.FeeSXF = FeeSXF;
            this.FeeGHF = FeeGHF;
            this.FeeYJ = FeeYJ;
            this.FeeOther = FeeOther;
        }

        #endregion

        #region ICloneable members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public override int GetHashCode()
        {
            int h__ = 5381;
            IceInternal.HashUtil.hashAdd(ref h__, "::PortServerIce::PSIceTradeDetail");
            IceInternal.HashUtil.hashAdd(ref h__, Index);
            IceInternal.HashUtil.hashAdd(ref h__, TradeDate);
            IceInternal.HashUtil.hashAdd(ref h__, OrderNo);
            IceInternal.HashUtil.hashAdd(ref h__, Market);
            IceInternal.HashUtil.hashAdd(ref h__, StockAccount);
            IceInternal.HashUtil.hashAdd(ref h__, OrderType);
            IceInternal.HashUtil.hashAdd(ref h__, Code);
            IceInternal.HashUtil.hashAdd(ref h__, MatchTimes);
            IceInternal.HashUtil.hashAdd(ref h__, MatchVolume);
            IceInternal.HashUtil.hashAdd(ref h__, MatchPrice);
            IceInternal.HashUtil.hashAdd(ref h__, MatchAmount);
            IceInternal.HashUtil.hashAdd(ref h__, FundEffect);
            IceInternal.HashUtil.hashAdd(ref h__, FeeYHS);
            IceInternal.HashUtil.hashAdd(ref h__, FeeSXF);
            IceInternal.HashUtil.hashAdd(ref h__, FeeGHF);
            IceInternal.HashUtil.hashAdd(ref h__, FeeYJ);
            IceInternal.HashUtil.hashAdd(ref h__, FeeOther);
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public override bool Equals(object other__)
        {
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            if(other__ == null)
            {
                return false;
            }
            if(GetType() != other__.GetType())
            {
                return false;
            }
            PSIceTradeDetail o__ = (PSIceTradeDetail)other__;
            if(Index == null)
            {
                if(o__.Index != null)
                {
                    return false;
                }
            }
            else
            {
                if(!Index.Equals(o__.Index))
                {
                    return false;
                }
            }
            if(!TradeDate.Equals(o__.TradeDate))
            {
                return false;
            }
            if(OrderNo == null)
            {
                if(o__.OrderNo != null)
                {
                    return false;
                }
            }
            else
            {
                if(!OrderNo.Equals(o__.OrderNo))
                {
                    return false;
                }
            }
            if(!Market.Equals(o__.Market))
            {
                return false;
            }
            if(StockAccount == null)
            {
                if(o__.StockAccount != null)
                {
                    return false;
                }
            }
            else
            {
                if(!StockAccount.Equals(o__.StockAccount))
                {
                    return false;
                }
            }
            if(!OrderType.Equals(o__.OrderType))
            {
                return false;
            }
            if(Code == null)
            {
                if(o__.Code != null)
                {
                    return false;
                }
            }
            else
            {
                if(!Code.Equals(o__.Code))
                {
                    return false;
                }
            }
            if(!MatchTimes.Equals(o__.MatchTimes))
            {
                return false;
            }
            if(!MatchVolume.Equals(o__.MatchVolume))
            {
                return false;
            }
            if(!MatchPrice.Equals(o__.MatchPrice))
            {
                return false;
            }
            if(!MatchAmount.Equals(o__.MatchAmount))
            {
                return false;
            }
            if(!FundEffect.Equals(o__.FundEffect))
            {
                return false;
            }
            if(!FeeYHS.Equals(o__.FeeYHS))
            {
                return false;
            }
            if(!FeeSXF.Equals(o__.FeeSXF))
            {
                return false;
            }
            if(!FeeGHF.Equals(o__.FeeGHF))
            {
                return false;
            }
            if(!FeeYJ.Equals(o__.FeeYJ))
            {
                return false;
            }
            if(!FeeOther.Equals(o__.FeeOther))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static bool operator==(PSIceTradeDetail lhs__, PSIceTradeDetail rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static bool operator!=(PSIceTradeDetail lhs__, PSIceTradeDetail rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshalling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public void write__(IceInternal.BasicStream os__)
        {
            os__.writeString(Index);
            os__.writeInt(TradeDate);
            os__.writeString(OrderNo);
            os__.writeEnum((int)Market, 1);
            os__.writeString(StockAccount);
            os__.writeEnum((int)OrderType, 10);
            os__.writeString(Code);
            os__.writeInt(MatchTimes);
            os__.writeInt(MatchVolume);
            os__.writeLong(MatchPrice);
            os__.writeLong(MatchAmount);
            os__.writeLong(FundEffect);
            os__.writeLong(FeeYHS);
            os__.writeLong(FeeSXF);
            os__.writeLong(FeeGHF);
            os__.writeLong(FeeYJ);
            os__.writeLong(FeeOther);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public void read__(IceInternal.BasicStream is__)
        {
            Index = is__.readString();
            TradeDate = is__.readInt();
            OrderNo = is__.readString();
            Market = (PortServerIce.PSIceMarket)is__.readEnum(1);
            StockAccount = is__.readString();
            OrderType = (PortServerIce.PSIceOrderType)is__.readEnum(10);
            Code = is__.readString();
            MatchTimes = is__.readInt();
            MatchVolume = is__.readInt();
            MatchPrice = is__.readLong();
            MatchAmount = is__.readLong();
            FundEffect = is__.readLong();
            FeeYHS = is__.readLong();
            FeeSXF = is__.readLong();
            FeeGHF = is__.readLong();
            FeeYJ = is__.readLong();
            FeeOther = is__.readLong();
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static void write__(IceInternal.BasicStream os__, PSIceTradeDetail v__)
        {
            if(v__ == null)
            {
                nullMarshalValue__.write__(os__);
            }
            else
            {
                v__.write__(os__);
            }
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static PSIceTradeDetail read__(IceInternal.BasicStream is__, PSIceTradeDetail v__)
        {
            if(v__ == null)
            {
                v__ = new PSIceTradeDetail();
            }
            v__.read__(is__);
            return v__;
        }
        
        private static readonly PSIceTradeDetail nullMarshalValue__ = new PSIceTradeDetail();

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface QueryServant : Ice.Object, QueryServantOperations_, QueryServantOperationsNC_
    {
    }
}

namespace PortServerIce
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
    public delegate void Callback_QueryServant_Connect(bool ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
    public delegate void Callback_QueryServant_Disconnect(bool ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
    public delegate void Callback_QueryServant_Login(int ret__, PortServerIce.PSIceErrorCode error);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
    public delegate void Callback_QueryServant_Logout(int ret__, PortServerIce.PSIceErrorCode error);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
    public delegate void Callback_QueryServant_SubscribAll(bool ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
    public delegate void Callback_QueryServant_UnsubscribAll(bool ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
    public delegate void Callback_QueryServant_GetFundAccountList(int ret__, PortServerIce.PSIceFundAccount[] fundAccounts, PortServerIce.PSIceErrorCode error);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
    public delegate void Callback_QueryServant_GetStockAccountList(int ret__, PortServerIce.PSIceStockAccount[] stockAccounts, PortServerIce.PSIceErrorCode error);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
    public delegate void Callback_QueryServant_GetPositionList(int ret__, PortServerIce.PSIcePosition[] positions, PortServerIce.PSIceErrorCode error);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
    public delegate void Callback_QueryServant_GetFundSummary(int ret__, PortServerIce.PSIceFundSummary fund, PortServerIce.PSIceErrorCode error);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
    public delegate void Callback_QueryServant_GetSharePositionList(int ret__, PortServerIce.PSIceSharePosition[] positions, PortServerIce.PSIceErrorCode error);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
    public delegate void Callback_QueryServant_GetBrokerPositionList(int ret__, PortServerIce.PSIceSharePosition[] positions, PortServerIce.PSIceErrorCode error);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
    public delegate void Callback_QueryServant_GetEnableVolume(int ret__, int volume, PortServerIce.PSIceErrorCode error);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
    public delegate void Callback_QueryServant_GetAssureInfoList(int ret__, PortServerIce.PSIceAssureInfo[] infolist, PortServerIce.PSIceErrorCode error);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
    public delegate void Callback_QueryServant_GetObjectInfoList(int ret__, PortServerIce.PSIceObjectInfo[] infolist, PortServerIce.PSIceErrorCode error);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
    public delegate void Callback_QueryServant_GetOrderContractList(int ret__, PortServerIce.PSIceOrderContract[] contracts, PortServerIce.PSIceErrorCode error);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
    public delegate void Callback_QueryServant_GetTodayOrderStatusList(int ret__, PortServerIce.PSIceOrderStatus[] statuslist, PortServerIce.PSIceErrorCode error);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
    public delegate void Callback_QueryServant_GetTodayTransStatusList(int ret__, PortServerIce.PSIceTransStatus[] statuslist, PortServerIce.PSIceErrorCode error);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
    public delegate void Callback_QueryServant_GetOrderDetailList(int ret__, PortServerIce.PSIceOrderDetail[] orderlist, PortServerIce.PSIceErrorCode error);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
    public delegate void Callback_QueryServant_GetTransDetailList(int ret__, PortServerIce.PSIceTransDetail[] Translist, PortServerIce.PSIceErrorCode error);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
    public delegate void Callback_QueryServant_GetTradeDetailList(int ret__, PortServerIce.PSIceTradeDetail[] tradelist, PortServerIce.PSIceErrorCode error);
}

namespace PortServerIce
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
    public interface QueryServantPrx : Ice.ObjectPrx
    {
        bool Connect(PortServerIce.PSIceAccount account);

        bool Connect(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult<PortServerIce.Callback_QueryServant_Connect> begin_Connect(PortServerIce.PSIceAccount account);

        Ice.AsyncResult<PortServerIce.Callback_QueryServant_Connect> begin_Connect(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_Connect(PortServerIce.PSIceAccount account, Ice.AsyncCallback cb__, object cookie__);

        Ice.AsyncResult begin_Connect(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        bool end_Connect(Ice.AsyncResult r__);

        bool Disconnect(PortServerIce.PSIceAccount account);

        bool Disconnect(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult<PortServerIce.Callback_QueryServant_Disconnect> begin_Disconnect(PortServerIce.PSIceAccount account);

        Ice.AsyncResult<PortServerIce.Callback_QueryServant_Disconnect> begin_Disconnect(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_Disconnect(PortServerIce.PSIceAccount account, Ice.AsyncCallback cb__, object cookie__);

        Ice.AsyncResult begin_Disconnect(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        bool end_Disconnect(Ice.AsyncResult r__);

        int Login(PortServerIce.PSIceAccount account, out PortServerIce.PSIceErrorCode error);

        int Login(PortServerIce.PSIceAccount account, out PortServerIce.PSIceErrorCode error, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult<PortServerIce.Callback_QueryServant_Login> begin_Login(PortServerIce.PSIceAccount account);

        Ice.AsyncResult<PortServerIce.Callback_QueryServant_Login> begin_Login(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_Login(PortServerIce.PSIceAccount account, Ice.AsyncCallback cb__, object cookie__);

        Ice.AsyncResult begin_Login(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_Login(out PortServerIce.PSIceErrorCode error, Ice.AsyncResult r__);

        int Logout(PortServerIce.PSIceAccount account, out PortServerIce.PSIceErrorCode error);

        int Logout(PortServerIce.PSIceAccount account, out PortServerIce.PSIceErrorCode error, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult<PortServerIce.Callback_QueryServant_Logout> begin_Logout(PortServerIce.PSIceAccount account);

        Ice.AsyncResult<PortServerIce.Callback_QueryServant_Logout> begin_Logout(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_Logout(PortServerIce.PSIceAccount account, Ice.AsyncCallback cb__, object cookie__);

        Ice.AsyncResult begin_Logout(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_Logout(out PortServerIce.PSIceErrorCode error, Ice.AsyncResult r__);

        bool SubscribAll(PortServerIce.PSIceAccount account);

        bool SubscribAll(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult<PortServerIce.Callback_QueryServant_SubscribAll> begin_SubscribAll(PortServerIce.PSIceAccount account);

        Ice.AsyncResult<PortServerIce.Callback_QueryServant_SubscribAll> begin_SubscribAll(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_SubscribAll(PortServerIce.PSIceAccount account, Ice.AsyncCallback cb__, object cookie__);

        Ice.AsyncResult begin_SubscribAll(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        bool end_SubscribAll(Ice.AsyncResult r__);

        bool UnsubscribAll(PortServerIce.PSIceAccount account);

        bool UnsubscribAll(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult<PortServerIce.Callback_QueryServant_UnsubscribAll> begin_UnsubscribAll(PortServerIce.PSIceAccount account);

        Ice.AsyncResult<PortServerIce.Callback_QueryServant_UnsubscribAll> begin_UnsubscribAll(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_UnsubscribAll(PortServerIce.PSIceAccount account, Ice.AsyncCallback cb__, object cookie__);

        Ice.AsyncResult begin_UnsubscribAll(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        bool end_UnsubscribAll(Ice.AsyncResult r__);

        int GetFundAccountList(PortServerIce.PSIceAccount account, out PortServerIce.PSIceFundAccount[] fundAccounts, out PortServerIce.PSIceErrorCode error);

        int GetFundAccountList(PortServerIce.PSIceAccount account, out PortServerIce.PSIceFundAccount[] fundAccounts, out PortServerIce.PSIceErrorCode error, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetFundAccountList> begin_GetFundAccountList(PortServerIce.PSIceAccount account);

        Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetFundAccountList> begin_GetFundAccountList(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_GetFundAccountList(PortServerIce.PSIceAccount account, Ice.AsyncCallback cb__, object cookie__);

        Ice.AsyncResult begin_GetFundAccountList(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_GetFundAccountList(out PortServerIce.PSIceFundAccount[] fundAccounts, out PortServerIce.PSIceErrorCode error, Ice.AsyncResult r__);

        int GetStockAccountList(PortServerIce.PSIceAccount account, out PortServerIce.PSIceStockAccount[] stockAccounts, out PortServerIce.PSIceErrorCode error);

        int GetStockAccountList(PortServerIce.PSIceAccount account, out PortServerIce.PSIceStockAccount[] stockAccounts, out PortServerIce.PSIceErrorCode error, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetStockAccountList> begin_GetStockAccountList(PortServerIce.PSIceAccount account);

        Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetStockAccountList> begin_GetStockAccountList(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_GetStockAccountList(PortServerIce.PSIceAccount account, Ice.AsyncCallback cb__, object cookie__);

        Ice.AsyncResult begin_GetStockAccountList(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_GetStockAccountList(out PortServerIce.PSIceStockAccount[] stockAccounts, out PortServerIce.PSIceErrorCode error, Ice.AsyncResult r__);

        int GetPositionList(PortServerIce.PSIceAccount account, out PortServerIce.PSIcePosition[] positions, out PortServerIce.PSIceErrorCode error);

        int GetPositionList(PortServerIce.PSIceAccount account, out PortServerIce.PSIcePosition[] positions, out PortServerIce.PSIceErrorCode error, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetPositionList> begin_GetPositionList(PortServerIce.PSIceAccount account);

        Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetPositionList> begin_GetPositionList(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_GetPositionList(PortServerIce.PSIceAccount account, Ice.AsyncCallback cb__, object cookie__);

        Ice.AsyncResult begin_GetPositionList(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_GetPositionList(out PortServerIce.PSIcePosition[] positions, out PortServerIce.PSIceErrorCode error, Ice.AsyncResult r__);

        int GetFundSummary(PortServerIce.PSIceAccount account, out PortServerIce.PSIceFundSummary fund, out PortServerIce.PSIceErrorCode error);

        int GetFundSummary(PortServerIce.PSIceAccount account, out PortServerIce.PSIceFundSummary fund, out PortServerIce.PSIceErrorCode error, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetFundSummary> begin_GetFundSummary(PortServerIce.PSIceAccount account);

        Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetFundSummary> begin_GetFundSummary(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_GetFundSummary(PortServerIce.PSIceAccount account, Ice.AsyncCallback cb__, object cookie__);

        Ice.AsyncResult begin_GetFundSummary(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_GetFundSummary(out PortServerIce.PSIceFundSummary fund, out PortServerIce.PSIceErrorCode error, Ice.AsyncResult r__);

        int GetSharePositionList(PortServerIce.PSIceAccount account, out PortServerIce.PSIceSharePosition[] positions, out PortServerIce.PSIceErrorCode error);

        int GetSharePositionList(PortServerIce.PSIceAccount account, out PortServerIce.PSIceSharePosition[] positions, out PortServerIce.PSIceErrorCode error, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetSharePositionList> begin_GetSharePositionList(PortServerIce.PSIceAccount account);

        Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetSharePositionList> begin_GetSharePositionList(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_GetSharePositionList(PortServerIce.PSIceAccount account, Ice.AsyncCallback cb__, object cookie__);

        Ice.AsyncResult begin_GetSharePositionList(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_GetSharePositionList(out PortServerIce.PSIceSharePosition[] positions, out PortServerIce.PSIceErrorCode error, Ice.AsyncResult r__);

        int GetBrokerPositionList(PortServerIce.PSIceAccount account, string index, out PortServerIce.PSIceSharePosition[] positions, out PortServerIce.PSIceErrorCode error);

        int GetBrokerPositionList(PortServerIce.PSIceAccount account, string index, out PortServerIce.PSIceSharePosition[] positions, out PortServerIce.PSIceErrorCode error, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetBrokerPositionList> begin_GetBrokerPositionList(PortServerIce.PSIceAccount account, string index);

        Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetBrokerPositionList> begin_GetBrokerPositionList(PortServerIce.PSIceAccount account, string index, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_GetBrokerPositionList(PortServerIce.PSIceAccount account, string index, Ice.AsyncCallback cb__, object cookie__);

        Ice.AsyncResult begin_GetBrokerPositionList(PortServerIce.PSIceAccount account, string index, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_GetBrokerPositionList(out PortServerIce.PSIceSharePosition[] positions, out PortServerIce.PSIceErrorCode error, Ice.AsyncResult r__);

        int GetEnableVolume(PortServerIce.PSIceAccount account, PortServerIce.PSIceVolumeSearch search, out int volume, out PortServerIce.PSIceErrorCode error);

        int GetEnableVolume(PortServerIce.PSIceAccount account, PortServerIce.PSIceVolumeSearch search, out int volume, out PortServerIce.PSIceErrorCode error, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetEnableVolume> begin_GetEnableVolume(PortServerIce.PSIceAccount account, PortServerIce.PSIceVolumeSearch search);

        Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetEnableVolume> begin_GetEnableVolume(PortServerIce.PSIceAccount account, PortServerIce.PSIceVolumeSearch search, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_GetEnableVolume(PortServerIce.PSIceAccount account, PortServerIce.PSIceVolumeSearch search, Ice.AsyncCallback cb__, object cookie__);

        Ice.AsyncResult begin_GetEnableVolume(PortServerIce.PSIceAccount account, PortServerIce.PSIceVolumeSearch search, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_GetEnableVolume(out int volume, out PortServerIce.PSIceErrorCode error, Ice.AsyncResult r__);

        int GetAssureInfoList(PortServerIce.PSIceAccount account, string index, out PortServerIce.PSIceAssureInfo[] infolist, out PortServerIce.PSIceErrorCode error);

        int GetAssureInfoList(PortServerIce.PSIceAccount account, string index, out PortServerIce.PSIceAssureInfo[] infolist, out PortServerIce.PSIceErrorCode error, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetAssureInfoList> begin_GetAssureInfoList(PortServerIce.PSIceAccount account, string index);

        Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetAssureInfoList> begin_GetAssureInfoList(PortServerIce.PSIceAccount account, string index, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_GetAssureInfoList(PortServerIce.PSIceAccount account, string index, Ice.AsyncCallback cb__, object cookie__);

        Ice.AsyncResult begin_GetAssureInfoList(PortServerIce.PSIceAccount account, string index, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_GetAssureInfoList(out PortServerIce.PSIceAssureInfo[] infolist, out PortServerIce.PSIceErrorCode error, Ice.AsyncResult r__);

        int GetObjectInfoList(PortServerIce.PSIceAccount account, string index, out PortServerIce.PSIceObjectInfo[] infolist, out PortServerIce.PSIceErrorCode error);

        int GetObjectInfoList(PortServerIce.PSIceAccount account, string index, out PortServerIce.PSIceObjectInfo[] infolist, out PortServerIce.PSIceErrorCode error, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetObjectInfoList> begin_GetObjectInfoList(PortServerIce.PSIceAccount account, string index);

        Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetObjectInfoList> begin_GetObjectInfoList(PortServerIce.PSIceAccount account, string index, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_GetObjectInfoList(PortServerIce.PSIceAccount account, string index, Ice.AsyncCallback cb__, object cookie__);

        Ice.AsyncResult begin_GetObjectInfoList(PortServerIce.PSIceAccount account, string index, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_GetObjectInfoList(out PortServerIce.PSIceObjectInfo[] infolist, out PortServerIce.PSIceErrorCode error, Ice.AsyncResult r__);

        int GetOrderContractList(PortServerIce.PSIceAccount account, PortServerIce.PSIceOrderContractSearch search, out PortServerIce.PSIceOrderContract[] contracts, out PortServerIce.PSIceErrorCode error);

        int GetOrderContractList(PortServerIce.PSIceAccount account, PortServerIce.PSIceOrderContractSearch search, out PortServerIce.PSIceOrderContract[] contracts, out PortServerIce.PSIceErrorCode error, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetOrderContractList> begin_GetOrderContractList(PortServerIce.PSIceAccount account, PortServerIce.PSIceOrderContractSearch search);

        Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetOrderContractList> begin_GetOrderContractList(PortServerIce.PSIceAccount account, PortServerIce.PSIceOrderContractSearch search, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_GetOrderContractList(PortServerIce.PSIceAccount account, PortServerIce.PSIceOrderContractSearch search, Ice.AsyncCallback cb__, object cookie__);

        Ice.AsyncResult begin_GetOrderContractList(PortServerIce.PSIceAccount account, PortServerIce.PSIceOrderContractSearch search, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_GetOrderContractList(out PortServerIce.PSIceOrderContract[] contracts, out PortServerIce.PSIceErrorCode error, Ice.AsyncResult r__);

        int GetTodayOrderStatusList(PortServerIce.PSIceAccount account, PortServerIce.PSIceOrderSearch search, out PortServerIce.PSIceOrderStatus[] statuslist, out PortServerIce.PSIceErrorCode error);

        int GetTodayOrderStatusList(PortServerIce.PSIceAccount account, PortServerIce.PSIceOrderSearch search, out PortServerIce.PSIceOrderStatus[] statuslist, out PortServerIce.PSIceErrorCode error, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetTodayOrderStatusList> begin_GetTodayOrderStatusList(PortServerIce.PSIceAccount account, PortServerIce.PSIceOrderSearch search);

        Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetTodayOrderStatusList> begin_GetTodayOrderStatusList(PortServerIce.PSIceAccount account, PortServerIce.PSIceOrderSearch search, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_GetTodayOrderStatusList(PortServerIce.PSIceAccount account, PortServerIce.PSIceOrderSearch search, Ice.AsyncCallback cb__, object cookie__);

        Ice.AsyncResult begin_GetTodayOrderStatusList(PortServerIce.PSIceAccount account, PortServerIce.PSIceOrderSearch search, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_GetTodayOrderStatusList(out PortServerIce.PSIceOrderStatus[] statuslist, out PortServerIce.PSIceErrorCode error, Ice.AsyncResult r__);

        int GetTodayTransStatusList(PortServerIce.PSIceAccount account, PortServerIce.PSIceOrderSearch search, out PortServerIce.PSIceTransStatus[] statuslist, out PortServerIce.PSIceErrorCode error);

        int GetTodayTransStatusList(PortServerIce.PSIceAccount account, PortServerIce.PSIceOrderSearch search, out PortServerIce.PSIceTransStatus[] statuslist, out PortServerIce.PSIceErrorCode error, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetTodayTransStatusList> begin_GetTodayTransStatusList(PortServerIce.PSIceAccount account, PortServerIce.PSIceOrderSearch search);

        Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetTodayTransStatusList> begin_GetTodayTransStatusList(PortServerIce.PSIceAccount account, PortServerIce.PSIceOrderSearch search, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_GetTodayTransStatusList(PortServerIce.PSIceAccount account, PortServerIce.PSIceOrderSearch search, Ice.AsyncCallback cb__, object cookie__);

        Ice.AsyncResult begin_GetTodayTransStatusList(PortServerIce.PSIceAccount account, PortServerIce.PSIceOrderSearch search, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_GetTodayTransStatusList(out PortServerIce.PSIceTransStatus[] statuslist, out PortServerIce.PSIceErrorCode error, Ice.AsyncResult r__);

        int GetOrderDetailList(int date, PortServerIce.PSIceAccount account, string index, out PortServerIce.PSIceOrderDetail[] orderlist, out PortServerIce.PSIceErrorCode error);

        int GetOrderDetailList(int date, PortServerIce.PSIceAccount account, string index, out PortServerIce.PSIceOrderDetail[] orderlist, out PortServerIce.PSIceErrorCode error, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetOrderDetailList> begin_GetOrderDetailList(int date, PortServerIce.PSIceAccount account, string index);

        Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetOrderDetailList> begin_GetOrderDetailList(int date, PortServerIce.PSIceAccount account, string index, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_GetOrderDetailList(int date, PortServerIce.PSIceAccount account, string index, Ice.AsyncCallback cb__, object cookie__);

        Ice.AsyncResult begin_GetOrderDetailList(int date, PortServerIce.PSIceAccount account, string index, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_GetOrderDetailList(out PortServerIce.PSIceOrderDetail[] orderlist, out PortServerIce.PSIceErrorCode error, Ice.AsyncResult r__);

        int GetTransDetailList(int date, PortServerIce.PSIceAccount account, string index, out PortServerIce.PSIceTransDetail[] Translist, out PortServerIce.PSIceErrorCode error);

        int GetTransDetailList(int date, PortServerIce.PSIceAccount account, string index, out PortServerIce.PSIceTransDetail[] Translist, out PortServerIce.PSIceErrorCode error, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetTransDetailList> begin_GetTransDetailList(int date, PortServerIce.PSIceAccount account, string index);

        Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetTransDetailList> begin_GetTransDetailList(int date, PortServerIce.PSIceAccount account, string index, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_GetTransDetailList(int date, PortServerIce.PSIceAccount account, string index, Ice.AsyncCallback cb__, object cookie__);

        Ice.AsyncResult begin_GetTransDetailList(int date, PortServerIce.PSIceAccount account, string index, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_GetTransDetailList(out PortServerIce.PSIceTransDetail[] Translist, out PortServerIce.PSIceErrorCode error, Ice.AsyncResult r__);

        int GetTradeDetailList(int date, PortServerIce.PSIceAccount account, string index, out PortServerIce.PSIceTradeDetail[] tradelist, out PortServerIce.PSIceErrorCode error);

        int GetTradeDetailList(int date, PortServerIce.PSIceAccount account, string index, out PortServerIce.PSIceTradeDetail[] tradelist, out PortServerIce.PSIceErrorCode error, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetTradeDetailList> begin_GetTradeDetailList(int date, PortServerIce.PSIceAccount account, string index);

        Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetTradeDetailList> begin_GetTradeDetailList(int date, PortServerIce.PSIceAccount account, string index, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_GetTradeDetailList(int date, PortServerIce.PSIceAccount account, string index, Ice.AsyncCallback cb__, object cookie__);

        Ice.AsyncResult begin_GetTradeDetailList(int date, PortServerIce.PSIceAccount account, string index, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_GetTradeDetailList(out PortServerIce.PSIceTradeDetail[] tradelist, out PortServerIce.PSIceErrorCode error, Ice.AsyncResult r__);
    }
}

namespace PortServerIce
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
    public interface QueryServantOperations_
    {
        bool Connect(PortServerIce.PSIceAccount account, Ice.Current current__);

        bool Disconnect(PortServerIce.PSIceAccount account, Ice.Current current__);

        int Login(PortServerIce.PSIceAccount account, out PortServerIce.PSIceErrorCode error, Ice.Current current__);

        int Logout(PortServerIce.PSIceAccount account, out PortServerIce.PSIceErrorCode error, Ice.Current current__);

        bool SubscribAll(PortServerIce.PSIceAccount account, Ice.Current current__);

        bool UnsubscribAll(PortServerIce.PSIceAccount account, Ice.Current current__);

        int GetFundAccountList(PortServerIce.PSIceAccount account, out PortServerIce.PSIceFundAccount[] fundAccounts, out PortServerIce.PSIceErrorCode error, Ice.Current current__);

        int GetStockAccountList(PortServerIce.PSIceAccount account, out PortServerIce.PSIceStockAccount[] stockAccounts, out PortServerIce.PSIceErrorCode error, Ice.Current current__);

        int GetPositionList(PortServerIce.PSIceAccount account, out PortServerIce.PSIcePosition[] positions, out PortServerIce.PSIceErrorCode error, Ice.Current current__);

        int GetFundSummary(PortServerIce.PSIceAccount account, out PortServerIce.PSIceFundSummary fund, out PortServerIce.PSIceErrorCode error, Ice.Current current__);

        int GetSharePositionList(PortServerIce.PSIceAccount account, out PortServerIce.PSIceSharePosition[] positions, out PortServerIce.PSIceErrorCode error, Ice.Current current__);

        int GetBrokerPositionList(PortServerIce.PSIceAccount account, string index, out PortServerIce.PSIceSharePosition[] positions, out PortServerIce.PSIceErrorCode error, Ice.Current current__);

        int GetEnableVolume(PortServerIce.PSIceAccount account, PortServerIce.PSIceVolumeSearch search, out int volume, out PortServerIce.PSIceErrorCode error, Ice.Current current__);

        int GetAssureInfoList(PortServerIce.PSIceAccount account, string index, out PortServerIce.PSIceAssureInfo[] infolist, out PortServerIce.PSIceErrorCode error, Ice.Current current__);

        int GetObjectInfoList(PortServerIce.PSIceAccount account, string index, out PortServerIce.PSIceObjectInfo[] infolist, out PortServerIce.PSIceErrorCode error, Ice.Current current__);

        int GetOrderContractList(PortServerIce.PSIceAccount account, PortServerIce.PSIceOrderContractSearch search, out PortServerIce.PSIceOrderContract[] contracts, out PortServerIce.PSIceErrorCode error, Ice.Current current__);

        int GetTodayOrderStatusList(PortServerIce.PSIceAccount account, PortServerIce.PSIceOrderSearch search, out PortServerIce.PSIceOrderStatus[] statuslist, out PortServerIce.PSIceErrorCode error, Ice.Current current__);

        int GetTodayTransStatusList(PortServerIce.PSIceAccount account, PortServerIce.PSIceOrderSearch search, out PortServerIce.PSIceTransStatus[] statuslist, out PortServerIce.PSIceErrorCode error, Ice.Current current__);

        int GetOrderDetailList(int date, PortServerIce.PSIceAccount account, string index, out PortServerIce.PSIceOrderDetail[] orderlist, out PortServerIce.PSIceErrorCode error, Ice.Current current__);

        int GetTransDetailList(int date, PortServerIce.PSIceAccount account, string index, out PortServerIce.PSIceTransDetail[] Translist, out PortServerIce.PSIceErrorCode error, Ice.Current current__);

        int GetTradeDetailList(int date, PortServerIce.PSIceAccount account, string index, out PortServerIce.PSIceTradeDetail[] tradelist, out PortServerIce.PSIceErrorCode error, Ice.Current current__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
    public interface QueryServantOperationsNC_
    {
        bool Connect(PortServerIce.PSIceAccount account);

        bool Disconnect(PortServerIce.PSIceAccount account);

        int Login(PortServerIce.PSIceAccount account, out PortServerIce.PSIceErrorCode error);

        int Logout(PortServerIce.PSIceAccount account, out PortServerIce.PSIceErrorCode error);

        bool SubscribAll(PortServerIce.PSIceAccount account);

        bool UnsubscribAll(PortServerIce.PSIceAccount account);

        int GetFundAccountList(PortServerIce.PSIceAccount account, out PortServerIce.PSIceFundAccount[] fundAccounts, out PortServerIce.PSIceErrorCode error);

        int GetStockAccountList(PortServerIce.PSIceAccount account, out PortServerIce.PSIceStockAccount[] stockAccounts, out PortServerIce.PSIceErrorCode error);

        int GetPositionList(PortServerIce.PSIceAccount account, out PortServerIce.PSIcePosition[] positions, out PortServerIce.PSIceErrorCode error);

        int GetFundSummary(PortServerIce.PSIceAccount account, out PortServerIce.PSIceFundSummary fund, out PortServerIce.PSIceErrorCode error);

        int GetSharePositionList(PortServerIce.PSIceAccount account, out PortServerIce.PSIceSharePosition[] positions, out PortServerIce.PSIceErrorCode error);

        int GetBrokerPositionList(PortServerIce.PSIceAccount account, string index, out PortServerIce.PSIceSharePosition[] positions, out PortServerIce.PSIceErrorCode error);

        int GetEnableVolume(PortServerIce.PSIceAccount account, PortServerIce.PSIceVolumeSearch search, out int volume, out PortServerIce.PSIceErrorCode error);

        int GetAssureInfoList(PortServerIce.PSIceAccount account, string index, out PortServerIce.PSIceAssureInfo[] infolist, out PortServerIce.PSIceErrorCode error);

        int GetObjectInfoList(PortServerIce.PSIceAccount account, string index, out PortServerIce.PSIceObjectInfo[] infolist, out PortServerIce.PSIceErrorCode error);

        int GetOrderContractList(PortServerIce.PSIceAccount account, PortServerIce.PSIceOrderContractSearch search, out PortServerIce.PSIceOrderContract[] contracts, out PortServerIce.PSIceErrorCode error);

        int GetTodayOrderStatusList(PortServerIce.PSIceAccount account, PortServerIce.PSIceOrderSearch search, out PortServerIce.PSIceOrderStatus[] statuslist, out PortServerIce.PSIceErrorCode error);

        int GetTodayTransStatusList(PortServerIce.PSIceAccount account, PortServerIce.PSIceOrderSearch search, out PortServerIce.PSIceTransStatus[] statuslist, out PortServerIce.PSIceErrorCode error);

        int GetOrderDetailList(int date, PortServerIce.PSIceAccount account, string index, out PortServerIce.PSIceOrderDetail[] orderlist, out PortServerIce.PSIceErrorCode error);

        int GetTransDetailList(int date, PortServerIce.PSIceAccount account, string index, out PortServerIce.PSIceTransDetail[] Translist, out PortServerIce.PSIceErrorCode error);

        int GetTradeDetailList(int date, PortServerIce.PSIceAccount account, string index, out PortServerIce.PSIceTradeDetail[] tradelist, out PortServerIce.PSIceErrorCode error);
    }
}

namespace PortServerIce
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
    public sealed class PSIceFundAccountsHelper
    {
        public static void write(IceInternal.BasicStream os__, PortServerIce.PSIceFundAccount[] v__)
        {
            if(v__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(v__.Length);
                for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                {
                    (v__[ix__] == null ? new PortServerIce.PSIceFundAccount() : v__[ix__]).write__(os__);
                }
            }
        }

        public static PortServerIce.PSIceFundAccount[] read(IceInternal.BasicStream is__)
        {
            PortServerIce.PSIceFundAccount[] v__;
            {
                int szx__ = is__.readAndCheckSeqSize(11);
                v__ = new PortServerIce.PSIceFundAccount[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    v__[ix__] = new PortServerIce.PSIceFundAccount();
                    v__[ix__].read__(is__);
                }
            }
            return v__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
    public sealed class PSIceStockAccountsHelper
    {
        public static void write(IceInternal.BasicStream os__, PortServerIce.PSIceStockAccount[] v__)
        {
            if(v__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(v__.Length);
                for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                {
                    (v__[ix__] == null ? new PortServerIce.PSIceStockAccount() : v__[ix__]).write__(os__);
                }
            }
        }

        public static PortServerIce.PSIceStockAccount[] read(IceInternal.BasicStream is__)
        {
            PortServerIce.PSIceStockAccount[] v__;
            {
                int szx__ = is__.readAndCheckSeqSize(7);
                v__ = new PortServerIce.PSIceStockAccount[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    v__[ix__] = new PortServerIce.PSIceStockAccount();
                    v__[ix__].read__(is__);
                }
            }
            return v__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
    public sealed class PSIcePositionListHelper
    {
        public static void write(IceInternal.BasicStream os__, PortServerIce.PSIcePosition[] v__)
        {
            if(v__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(v__.Length);
                for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                {
                    (v__[ix__] == null ? new PortServerIce.PSIcePosition() : v__[ix__]).write__(os__);
                }
            }
        }

        public static PortServerIce.PSIcePosition[] read(IceInternal.BasicStream is__)
        {
            PortServerIce.PSIcePosition[] v__;
            {
                int szx__ = is__.readAndCheckSeqSize(20);
                v__ = new PortServerIce.PSIcePosition[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    v__[ix__] = new PortServerIce.PSIcePosition();
                    v__[ix__].read__(is__);
                }
            }
            return v__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
    public sealed class PSIceSharePositionListHelper
    {
        public static void write(IceInternal.BasicStream os__, PortServerIce.PSIceSharePosition[] v__)
        {
            if(v__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(v__.Length);
                for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                {
                    (v__[ix__] == null ? new PortServerIce.PSIceSharePosition() : v__[ix__]).write__(os__);
                }
            }
        }

        public static PortServerIce.PSIceSharePosition[] read(IceInternal.BasicStream is__)
        {
            PortServerIce.PSIceSharePosition[] v__;
            {
                int szx__ = is__.readAndCheckSeqSize(8);
                v__ = new PortServerIce.PSIceSharePosition[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    v__[ix__] = new PortServerIce.PSIceSharePosition();
                    v__[ix__].read__(is__);
                }
            }
            return v__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
    public sealed class PSIceAssureInfoListHelper
    {
        public static void write(IceInternal.BasicStream os__, PortServerIce.PSIceAssureInfo[] v__)
        {
            if(v__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(v__.Length);
                for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                {
                    (v__[ix__] == null ? new PortServerIce.PSIceAssureInfo() : v__[ix__]).write__(os__);
                }
            }
        }

        public static PortServerIce.PSIceAssureInfo[] read(IceInternal.BasicStream is__)
        {
            PortServerIce.PSIceAssureInfo[] v__;
            {
                int szx__ = is__.readAndCheckSeqSize(27);
                v__ = new PortServerIce.PSIceAssureInfo[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    v__[ix__] = new PortServerIce.PSIceAssureInfo();
                    v__[ix__].read__(is__);
                }
            }
            return v__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
    public sealed class PSIceObjectInfoListHelper
    {
        public static void write(IceInternal.BasicStream os__, PortServerIce.PSIceObjectInfo[] v__)
        {
            if(v__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(v__.Length);
                for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                {
                    (v__[ix__] == null ? new PortServerIce.PSIceObjectInfo() : v__[ix__]).write__(os__);
                }
            }
        }

        public static PortServerIce.PSIceObjectInfo[] read(IceInternal.BasicStream is__)
        {
            PortServerIce.PSIceObjectInfo[] v__;
            {
                int szx__ = is__.readAndCheckSeqSize(43);
                v__ = new PortServerIce.PSIceObjectInfo[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    v__[ix__] = new PortServerIce.PSIceObjectInfo();
                    v__[ix__].read__(is__);
                }
            }
            return v__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
    public sealed class PSIceOrderStatusListHelper
    {
        public static void write(IceInternal.BasicStream os__, PortServerIce.PSIceOrderStatus[] v__)
        {
            if(v__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(v__.Length);
                for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                {
                    (v__[ix__] == null ? new PortServerIce.PSIceOrderStatus() : v__[ix__]).write__(os__);
                }
            }
        }

        public static PortServerIce.PSIceOrderStatus[] read(IceInternal.BasicStream is__)
        {
            PortServerIce.PSIceOrderStatus[] v__;
            {
                int szx__ = is__.readAndCheckSeqSize(57);
                v__ = new PortServerIce.PSIceOrderStatus[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    v__[ix__] = new PortServerIce.PSIceOrderStatus();
                    v__[ix__].read__(is__);
                }
            }
            return v__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
    public sealed class PSIceTransStatusListHelper
    {
        public static void write(IceInternal.BasicStream os__, PortServerIce.PSIceTransStatus[] v__)
        {
            if(v__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(v__.Length);
                for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                {
                    (v__[ix__] == null ? new PortServerIce.PSIceTransStatus() : v__[ix__]).write__(os__);
                }
            }
        }

        public static PortServerIce.PSIceTransStatus[] read(IceInternal.BasicStream is__)
        {
            PortServerIce.PSIceTransStatus[] v__;
            {
                int szx__ = is__.readAndCheckSeqSize(40);
                v__ = new PortServerIce.PSIceTransStatus[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    v__[ix__] = new PortServerIce.PSIceTransStatus();
                    v__[ix__].read__(is__);
                }
            }
            return v__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
    public sealed class PSIceOrderContractListHelper
    {
        public static void write(IceInternal.BasicStream os__, PortServerIce.PSIceOrderContract[] v__)
        {
            if(v__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(v__.Length);
                for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                {
                    (v__[ix__] == null ? new PortServerIce.PSIceOrderContract() : v__[ix__]).write__(os__);
                }
            }
        }

        public static PortServerIce.PSIceOrderContract[] read(IceInternal.BasicStream is__)
        {
            PortServerIce.PSIceOrderContract[] v__;
            {
                int szx__ = is__.readAndCheckSeqSize(48);
                v__ = new PortServerIce.PSIceOrderContract[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    v__[ix__] = new PortServerIce.PSIceOrderContract();
                    v__[ix__].read__(is__);
                }
            }
            return v__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
    public sealed class PSIceOrderDetailListHelper
    {
        public static void write(IceInternal.BasicStream os__, PortServerIce.PSIceOrderDetail[] v__)
        {
            if(v__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(v__.Length);
                for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                {
                    (v__[ix__] == null ? new PortServerIce.PSIceOrderDetail() : v__[ix__]).write__(os__);
                }
            }
        }

        public static PortServerIce.PSIceOrderDetail[] read(IceInternal.BasicStream is__)
        {
            PortServerIce.PSIceOrderDetail[] v__;
            {
                int szx__ = is__.readAndCheckSeqSize(64);
                v__ = new PortServerIce.PSIceOrderDetail[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    v__[ix__] = new PortServerIce.PSIceOrderDetail();
                    v__[ix__].read__(is__);
                }
            }
            return v__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
    public sealed class PSIceTransDetailListHelper
    {
        public static void write(IceInternal.BasicStream os__, PortServerIce.PSIceTransDetail[] v__)
        {
            if(v__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(v__.Length);
                for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                {
                    (v__[ix__] == null ? new PortServerIce.PSIceTransDetail() : v__[ix__]).write__(os__);
                }
            }
        }

        public static PortServerIce.PSIceTransDetail[] read(IceInternal.BasicStream is__)
        {
            PortServerIce.PSIceTransDetail[] v__;
            {
                int szx__ = is__.readAndCheckSeqSize(44);
                v__ = new PortServerIce.PSIceTransDetail[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    v__[ix__] = new PortServerIce.PSIceTransDetail();
                    v__[ix__].read__(is__);
                }
            }
            return v__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
    public sealed class PSIceTradeDetailListHelper
    {
        public static void write(IceInternal.BasicStream os__, PortServerIce.PSIceTradeDetail[] v__)
        {
            if(v__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(v__.Length);
                for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                {
                    (v__[ix__] == null ? new PortServerIce.PSIceTradeDetail() : v__[ix__]).write__(os__);
                }
            }
        }

        public static PortServerIce.PSIceTradeDetail[] read(IceInternal.BasicStream is__)
        {
            PortServerIce.PSIceTradeDetail[] v__;
            {
                int szx__ = is__.readAndCheckSeqSize(82);
                v__ = new PortServerIce.PSIceTradeDetail[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    v__[ix__] = new PortServerIce.PSIceTradeDetail();
                    v__[ix__].read__(is__);
                }
            }
            return v__;
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
    public sealed class QueryServantPrxHelper : Ice.ObjectPrxHelperBase, QueryServantPrx
    {
        #region Synchronous operations

        public bool Connect(PortServerIce.PSIceAccount account)
        {
            return this.Connect(account, null, false);
        }

        public bool Connect(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return this.Connect(account, ctx__, true);
        }

        private bool Connect(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitCtx__)
        {
            checkTwowayOnly__(__Connect_name);
            return end_Connect(begin_Connect(account, context__, explicitCtx__, true, null, null));
        }

        public bool Disconnect(PortServerIce.PSIceAccount account)
        {
            return this.Disconnect(account, null, false);
        }

        public bool Disconnect(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return this.Disconnect(account, ctx__, true);
        }

        private bool Disconnect(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitCtx__)
        {
            checkTwowayOnly__(__Disconnect_name);
            return end_Disconnect(begin_Disconnect(account, context__, explicitCtx__, true, null, null));
        }

        public int GetAssureInfoList(PortServerIce.PSIceAccount account, string index, out PortServerIce.PSIceAssureInfo[] infolist, out PortServerIce.PSIceErrorCode error)
        {
            return this.GetAssureInfoList(account, index, out infolist, out error, null, false);
        }

        public int GetAssureInfoList(PortServerIce.PSIceAccount account, string index, out PortServerIce.PSIceAssureInfo[] infolist, out PortServerIce.PSIceErrorCode error, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return this.GetAssureInfoList(account, index, out infolist, out error, ctx__, true);
        }

        private int GetAssureInfoList(PortServerIce.PSIceAccount account, string index, out PortServerIce.PSIceAssureInfo[] infolist, out PortServerIce.PSIceErrorCode error, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitCtx__)
        {
            checkTwowayOnly__(__GetAssureInfoList_name);
            return end_GetAssureInfoList(out infolist, out error, begin_GetAssureInfoList(account, index, context__, explicitCtx__, true, null, null));
        }

        public int GetBrokerPositionList(PortServerIce.PSIceAccount account, string index, out PortServerIce.PSIceSharePosition[] positions, out PortServerIce.PSIceErrorCode error)
        {
            return this.GetBrokerPositionList(account, index, out positions, out error, null, false);
        }

        public int GetBrokerPositionList(PortServerIce.PSIceAccount account, string index, out PortServerIce.PSIceSharePosition[] positions, out PortServerIce.PSIceErrorCode error, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return this.GetBrokerPositionList(account, index, out positions, out error, ctx__, true);
        }

        private int GetBrokerPositionList(PortServerIce.PSIceAccount account, string index, out PortServerIce.PSIceSharePosition[] positions, out PortServerIce.PSIceErrorCode error, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitCtx__)
        {
            checkTwowayOnly__(__GetBrokerPositionList_name);
            return end_GetBrokerPositionList(out positions, out error, begin_GetBrokerPositionList(account, index, context__, explicitCtx__, true, null, null));
        }

        public int GetEnableVolume(PortServerIce.PSIceAccount account, PortServerIce.PSIceVolumeSearch search, out int volume, out PortServerIce.PSIceErrorCode error)
        {
            return this.GetEnableVolume(account, search, out volume, out error, null, false);
        }

        public int GetEnableVolume(PortServerIce.PSIceAccount account, PortServerIce.PSIceVolumeSearch search, out int volume, out PortServerIce.PSIceErrorCode error, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return this.GetEnableVolume(account, search, out volume, out error, ctx__, true);
        }

        private int GetEnableVolume(PortServerIce.PSIceAccount account, PortServerIce.PSIceVolumeSearch search, out int volume, out PortServerIce.PSIceErrorCode error, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitCtx__)
        {
            checkTwowayOnly__(__GetEnableVolume_name);
            return end_GetEnableVolume(out volume, out error, begin_GetEnableVolume(account, search, context__, explicitCtx__, true, null, null));
        }

        public int GetFundAccountList(PortServerIce.PSIceAccount account, out PortServerIce.PSIceFundAccount[] fundAccounts, out PortServerIce.PSIceErrorCode error)
        {
            return this.GetFundAccountList(account, out fundAccounts, out error, null, false);
        }

        public int GetFundAccountList(PortServerIce.PSIceAccount account, out PortServerIce.PSIceFundAccount[] fundAccounts, out PortServerIce.PSIceErrorCode error, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return this.GetFundAccountList(account, out fundAccounts, out error, ctx__, true);
        }

        private int GetFundAccountList(PortServerIce.PSIceAccount account, out PortServerIce.PSIceFundAccount[] fundAccounts, out PortServerIce.PSIceErrorCode error, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitCtx__)
        {
            checkTwowayOnly__(__GetFundAccountList_name);
            return end_GetFundAccountList(out fundAccounts, out error, begin_GetFundAccountList(account, context__, explicitCtx__, true, null, null));
        }

        public int GetFundSummary(PortServerIce.PSIceAccount account, out PortServerIce.PSIceFundSummary fund, out PortServerIce.PSIceErrorCode error)
        {
            return this.GetFundSummary(account, out fund, out error, null, false);
        }

        public int GetFundSummary(PortServerIce.PSIceAccount account, out PortServerIce.PSIceFundSummary fund, out PortServerIce.PSIceErrorCode error, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return this.GetFundSummary(account, out fund, out error, ctx__, true);
        }

        private int GetFundSummary(PortServerIce.PSIceAccount account, out PortServerIce.PSIceFundSummary fund, out PortServerIce.PSIceErrorCode error, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitCtx__)
        {
            checkTwowayOnly__(__GetFundSummary_name);
            return end_GetFundSummary(out fund, out error, begin_GetFundSummary(account, context__, explicitCtx__, true, null, null));
        }

        public int GetObjectInfoList(PortServerIce.PSIceAccount account, string index, out PortServerIce.PSIceObjectInfo[] infolist, out PortServerIce.PSIceErrorCode error)
        {
            return this.GetObjectInfoList(account, index, out infolist, out error, null, false);
        }

        public int GetObjectInfoList(PortServerIce.PSIceAccount account, string index, out PortServerIce.PSIceObjectInfo[] infolist, out PortServerIce.PSIceErrorCode error, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return this.GetObjectInfoList(account, index, out infolist, out error, ctx__, true);
        }

        private int GetObjectInfoList(PortServerIce.PSIceAccount account, string index, out PortServerIce.PSIceObjectInfo[] infolist, out PortServerIce.PSIceErrorCode error, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitCtx__)
        {
            checkTwowayOnly__(__GetObjectInfoList_name);
            return end_GetObjectInfoList(out infolist, out error, begin_GetObjectInfoList(account, index, context__, explicitCtx__, true, null, null));
        }

        public int GetOrderContractList(PortServerIce.PSIceAccount account, PortServerIce.PSIceOrderContractSearch search, out PortServerIce.PSIceOrderContract[] contracts, out PortServerIce.PSIceErrorCode error)
        {
            return this.GetOrderContractList(account, search, out contracts, out error, null, false);
        }

        public int GetOrderContractList(PortServerIce.PSIceAccount account, PortServerIce.PSIceOrderContractSearch search, out PortServerIce.PSIceOrderContract[] contracts, out PortServerIce.PSIceErrorCode error, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return this.GetOrderContractList(account, search, out contracts, out error, ctx__, true);
        }

        private int GetOrderContractList(PortServerIce.PSIceAccount account, PortServerIce.PSIceOrderContractSearch search, out PortServerIce.PSIceOrderContract[] contracts, out PortServerIce.PSIceErrorCode error, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitCtx__)
        {
            checkTwowayOnly__(__GetOrderContractList_name);
            return end_GetOrderContractList(out contracts, out error, begin_GetOrderContractList(account, search, context__, explicitCtx__, true, null, null));
        }

        public int GetOrderDetailList(int date, PortServerIce.PSIceAccount account, string index, out PortServerIce.PSIceOrderDetail[] orderlist, out PortServerIce.PSIceErrorCode error)
        {
            return this.GetOrderDetailList(date, account, index, out orderlist, out error, null, false);
        }

        public int GetOrderDetailList(int date, PortServerIce.PSIceAccount account, string index, out PortServerIce.PSIceOrderDetail[] orderlist, out PortServerIce.PSIceErrorCode error, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return this.GetOrderDetailList(date, account, index, out orderlist, out error, ctx__, true);
        }

        private int GetOrderDetailList(int date, PortServerIce.PSIceAccount account, string index, out PortServerIce.PSIceOrderDetail[] orderlist, out PortServerIce.PSIceErrorCode error, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitCtx__)
        {
            checkTwowayOnly__(__GetOrderDetailList_name);
            return end_GetOrderDetailList(out orderlist, out error, begin_GetOrderDetailList(date, account, index, context__, explicitCtx__, true, null, null));
        }

        public int GetPositionList(PortServerIce.PSIceAccount account, out PortServerIce.PSIcePosition[] positions, out PortServerIce.PSIceErrorCode error)
        {
            return this.GetPositionList(account, out positions, out error, null, false);
        }

        public int GetPositionList(PortServerIce.PSIceAccount account, out PortServerIce.PSIcePosition[] positions, out PortServerIce.PSIceErrorCode error, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return this.GetPositionList(account, out positions, out error, ctx__, true);
        }

        private int GetPositionList(PortServerIce.PSIceAccount account, out PortServerIce.PSIcePosition[] positions, out PortServerIce.PSIceErrorCode error, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitCtx__)
        {
            checkTwowayOnly__(__GetPositionList_name);
            return end_GetPositionList(out positions, out error, begin_GetPositionList(account, context__, explicitCtx__, true, null, null));
        }

        public int GetSharePositionList(PortServerIce.PSIceAccount account, out PortServerIce.PSIceSharePosition[] positions, out PortServerIce.PSIceErrorCode error)
        {
            return this.GetSharePositionList(account, out positions, out error, null, false);
        }

        public int GetSharePositionList(PortServerIce.PSIceAccount account, out PortServerIce.PSIceSharePosition[] positions, out PortServerIce.PSIceErrorCode error, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return this.GetSharePositionList(account, out positions, out error, ctx__, true);
        }

        private int GetSharePositionList(PortServerIce.PSIceAccount account, out PortServerIce.PSIceSharePosition[] positions, out PortServerIce.PSIceErrorCode error, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitCtx__)
        {
            checkTwowayOnly__(__GetSharePositionList_name);
            return end_GetSharePositionList(out positions, out error, begin_GetSharePositionList(account, context__, explicitCtx__, true, null, null));
        }

        public int GetStockAccountList(PortServerIce.PSIceAccount account, out PortServerIce.PSIceStockAccount[] stockAccounts, out PortServerIce.PSIceErrorCode error)
        {
            return this.GetStockAccountList(account, out stockAccounts, out error, null, false);
        }

        public int GetStockAccountList(PortServerIce.PSIceAccount account, out PortServerIce.PSIceStockAccount[] stockAccounts, out PortServerIce.PSIceErrorCode error, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return this.GetStockAccountList(account, out stockAccounts, out error, ctx__, true);
        }

        private int GetStockAccountList(PortServerIce.PSIceAccount account, out PortServerIce.PSIceStockAccount[] stockAccounts, out PortServerIce.PSIceErrorCode error, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitCtx__)
        {
            checkTwowayOnly__(__GetStockAccountList_name);
            return end_GetStockAccountList(out stockAccounts, out error, begin_GetStockAccountList(account, context__, explicitCtx__, true, null, null));
        }

        public int GetTodayOrderStatusList(PortServerIce.PSIceAccount account, PortServerIce.PSIceOrderSearch search, out PortServerIce.PSIceOrderStatus[] statuslist, out PortServerIce.PSIceErrorCode error)
        {
            return this.GetTodayOrderStatusList(account, search, out statuslist, out error, null, false);
        }

        public int GetTodayOrderStatusList(PortServerIce.PSIceAccount account, PortServerIce.PSIceOrderSearch search, out PortServerIce.PSIceOrderStatus[] statuslist, out PortServerIce.PSIceErrorCode error, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return this.GetTodayOrderStatusList(account, search, out statuslist, out error, ctx__, true);
        }

        private int GetTodayOrderStatusList(PortServerIce.PSIceAccount account, PortServerIce.PSIceOrderSearch search, out PortServerIce.PSIceOrderStatus[] statuslist, out PortServerIce.PSIceErrorCode error, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitCtx__)
        {
            checkTwowayOnly__(__GetTodayOrderStatusList_name);
            return end_GetTodayOrderStatusList(out statuslist, out error, begin_GetTodayOrderStatusList(account, search, context__, explicitCtx__, true, null, null));
        }

        public int GetTodayTransStatusList(PortServerIce.PSIceAccount account, PortServerIce.PSIceOrderSearch search, out PortServerIce.PSIceTransStatus[] statuslist, out PortServerIce.PSIceErrorCode error)
        {
            return this.GetTodayTransStatusList(account, search, out statuslist, out error, null, false);
        }

        public int GetTodayTransStatusList(PortServerIce.PSIceAccount account, PortServerIce.PSIceOrderSearch search, out PortServerIce.PSIceTransStatus[] statuslist, out PortServerIce.PSIceErrorCode error, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return this.GetTodayTransStatusList(account, search, out statuslist, out error, ctx__, true);
        }

        private int GetTodayTransStatusList(PortServerIce.PSIceAccount account, PortServerIce.PSIceOrderSearch search, out PortServerIce.PSIceTransStatus[] statuslist, out PortServerIce.PSIceErrorCode error, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitCtx__)
        {
            checkTwowayOnly__(__GetTodayTransStatusList_name);
            return end_GetTodayTransStatusList(out statuslist, out error, begin_GetTodayTransStatusList(account, search, context__, explicitCtx__, true, null, null));
        }

        public int GetTradeDetailList(int date, PortServerIce.PSIceAccount account, string index, out PortServerIce.PSIceTradeDetail[] tradelist, out PortServerIce.PSIceErrorCode error)
        {
            return this.GetTradeDetailList(date, account, index, out tradelist, out error, null, false);
        }

        public int GetTradeDetailList(int date, PortServerIce.PSIceAccount account, string index, out PortServerIce.PSIceTradeDetail[] tradelist, out PortServerIce.PSIceErrorCode error, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return this.GetTradeDetailList(date, account, index, out tradelist, out error, ctx__, true);
        }

        private int GetTradeDetailList(int date, PortServerIce.PSIceAccount account, string index, out PortServerIce.PSIceTradeDetail[] tradelist, out PortServerIce.PSIceErrorCode error, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitCtx__)
        {
            checkTwowayOnly__(__GetTradeDetailList_name);
            return end_GetTradeDetailList(out tradelist, out error, begin_GetTradeDetailList(date, account, index, context__, explicitCtx__, true, null, null));
        }

        public int GetTransDetailList(int date, PortServerIce.PSIceAccount account, string index, out PortServerIce.PSIceTransDetail[] Translist, out PortServerIce.PSIceErrorCode error)
        {
            return this.GetTransDetailList(date, account, index, out Translist, out error, null, false);
        }

        public int GetTransDetailList(int date, PortServerIce.PSIceAccount account, string index, out PortServerIce.PSIceTransDetail[] Translist, out PortServerIce.PSIceErrorCode error, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return this.GetTransDetailList(date, account, index, out Translist, out error, ctx__, true);
        }

        private int GetTransDetailList(int date, PortServerIce.PSIceAccount account, string index, out PortServerIce.PSIceTransDetail[] Translist, out PortServerIce.PSIceErrorCode error, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitCtx__)
        {
            checkTwowayOnly__(__GetTransDetailList_name);
            return end_GetTransDetailList(out Translist, out error, begin_GetTransDetailList(date, account, index, context__, explicitCtx__, true, null, null));
        }

        public int Login(PortServerIce.PSIceAccount account, out PortServerIce.PSIceErrorCode error)
        {
            return this.Login(account, out error, null, false);
        }

        public int Login(PortServerIce.PSIceAccount account, out PortServerIce.PSIceErrorCode error, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return this.Login(account, out error, ctx__, true);
        }

        private int Login(PortServerIce.PSIceAccount account, out PortServerIce.PSIceErrorCode error, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitCtx__)
        {
            checkTwowayOnly__(__Login_name);
            return end_Login(out error, begin_Login(account, context__, explicitCtx__, true, null, null));
        }

        public int Logout(PortServerIce.PSIceAccount account, out PortServerIce.PSIceErrorCode error)
        {
            return this.Logout(account, out error, null, false);
        }

        public int Logout(PortServerIce.PSIceAccount account, out PortServerIce.PSIceErrorCode error, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return this.Logout(account, out error, ctx__, true);
        }

        private int Logout(PortServerIce.PSIceAccount account, out PortServerIce.PSIceErrorCode error, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitCtx__)
        {
            checkTwowayOnly__(__Logout_name);
            return end_Logout(out error, begin_Logout(account, context__, explicitCtx__, true, null, null));
        }

        public bool SubscribAll(PortServerIce.PSIceAccount account)
        {
            return this.SubscribAll(account, null, false);
        }

        public bool SubscribAll(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return this.SubscribAll(account, ctx__, true);
        }

        private bool SubscribAll(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitCtx__)
        {
            checkTwowayOnly__(__SubscribAll_name);
            return end_SubscribAll(begin_SubscribAll(account, context__, explicitCtx__, true, null, null));
        }

        public bool UnsubscribAll(PortServerIce.PSIceAccount account)
        {
            return this.UnsubscribAll(account, null, false);
        }

        public bool UnsubscribAll(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return this.UnsubscribAll(account, ctx__, true);
        }

        private bool UnsubscribAll(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitCtx__)
        {
            checkTwowayOnly__(__UnsubscribAll_name);
            return end_UnsubscribAll(begin_UnsubscribAll(account, context__, explicitCtx__, true, null, null));
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<PortServerIce.Callback_QueryServant_Connect> begin_Connect(PortServerIce.PSIceAccount account)
        {
            return begin_Connect(account, null, false, false, null, null);
        }

        public Ice.AsyncResult<PortServerIce.Callback_QueryServant_Connect> begin_Connect(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_Connect(account, ctx__, true, false, null, null);
        }

        public Ice.AsyncResult begin_Connect(PortServerIce.PSIceAccount account, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_Connect(account, null, false, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_Connect(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_Connect(account, ctx__, true, false, cb__, cookie__);
        }

        private const string __Connect_name = "Connect";

        public bool end_Connect(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = IceInternal.OutgoingAsync.check(r__, this, __Connect_name);
            try
            {
                if(!outAsync__.wait())
                {
                    try
                    {
                        outAsync__.throwUserException();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                bool ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams();
                ret__ = is__.readBool();
                outAsync__.endReadParams();
                return ret__;
            }
            finally
            {
                outAsync__.cacheMessageBuffers();
            }
        }

        private Ice.AsyncResult<PortServerIce.Callback_QueryServant_Connect> begin_Connect(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, bool synchronous__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__Connect_name);
            IceInternal.TwowayOutgoingAsync<PortServerIce.Callback_QueryServant_Connect> result__ =  getTwowayOutgoingAsync<PortServerIce.Callback_QueryServant_Connect>(__Connect_name, Connect_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare(__Connect_name, Ice.OperationMode.Normal, ctx__, explicitContext__, synchronous__);
                IceInternal.BasicStream os__ = result__.startWriteParams(Ice.FormatType.DefaultFormat);
                PortServerIce.PSIceAccount.write__(os__, account);
                result__.endWriteParams();
                result__.invoke();
            }
            catch(Ice.Exception ex__)
            {
                result__.abort(ex__);
            }
            return result__;
        }

        private void Connect_completed__(Ice.AsyncResult r__, PortServerIce.Callback_QueryServant_Connect cb__, Ice.ExceptionCallback excb__)
        {
            bool ret__;
            try
            {
                ret__ = end_Connect(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<PortServerIce.Callback_QueryServant_Disconnect> begin_Disconnect(PortServerIce.PSIceAccount account)
        {
            return begin_Disconnect(account, null, false, false, null, null);
        }

        public Ice.AsyncResult<PortServerIce.Callback_QueryServant_Disconnect> begin_Disconnect(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_Disconnect(account, ctx__, true, false, null, null);
        }

        public Ice.AsyncResult begin_Disconnect(PortServerIce.PSIceAccount account, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_Disconnect(account, null, false, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_Disconnect(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_Disconnect(account, ctx__, true, false, cb__, cookie__);
        }

        private const string __Disconnect_name = "Disconnect";

        public bool end_Disconnect(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = IceInternal.OutgoingAsync.check(r__, this, __Disconnect_name);
            try
            {
                if(!outAsync__.wait())
                {
                    try
                    {
                        outAsync__.throwUserException();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                bool ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams();
                ret__ = is__.readBool();
                outAsync__.endReadParams();
                return ret__;
            }
            finally
            {
                outAsync__.cacheMessageBuffers();
            }
        }

        private Ice.AsyncResult<PortServerIce.Callback_QueryServant_Disconnect> begin_Disconnect(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, bool synchronous__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__Disconnect_name);
            IceInternal.TwowayOutgoingAsync<PortServerIce.Callback_QueryServant_Disconnect> result__ =  getTwowayOutgoingAsync<PortServerIce.Callback_QueryServant_Disconnect>(__Disconnect_name, Disconnect_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare(__Disconnect_name, Ice.OperationMode.Normal, ctx__, explicitContext__, synchronous__);
                IceInternal.BasicStream os__ = result__.startWriteParams(Ice.FormatType.DefaultFormat);
                PortServerIce.PSIceAccount.write__(os__, account);
                result__.endWriteParams();
                result__.invoke();
            }
            catch(Ice.Exception ex__)
            {
                result__.abort(ex__);
            }
            return result__;
        }

        private void Disconnect_completed__(Ice.AsyncResult r__, PortServerIce.Callback_QueryServant_Disconnect cb__, Ice.ExceptionCallback excb__)
        {
            bool ret__;
            try
            {
                ret__ = end_Disconnect(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetAssureInfoList> begin_GetAssureInfoList(PortServerIce.PSIceAccount account, string index)
        {
            return begin_GetAssureInfoList(account, index, null, false, false, null, null);
        }

        public Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetAssureInfoList> begin_GetAssureInfoList(PortServerIce.PSIceAccount account, string index, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_GetAssureInfoList(account, index, ctx__, true, false, null, null);
        }

        public Ice.AsyncResult begin_GetAssureInfoList(PortServerIce.PSIceAccount account, string index, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetAssureInfoList(account, index, null, false, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_GetAssureInfoList(PortServerIce.PSIceAccount account, string index, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetAssureInfoList(account, index, ctx__, true, false, cb__, cookie__);
        }

        private const string __GetAssureInfoList_name = "GetAssureInfoList";

        public int end_GetAssureInfoList(out PortServerIce.PSIceAssureInfo[] infolist, out PortServerIce.PSIceErrorCode error, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = IceInternal.OutgoingAsync.check(r__, this, __GetAssureInfoList_name);
            try
            {
                if(!outAsync__.wait())
                {
                    try
                    {
                        outAsync__.throwUserException();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                int ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams();
                error = null;
                infolist = PortServerIce.PSIceAssureInfoListHelper.read(is__);
                error = PortServerIce.PSIceErrorCode.read__(is__, error);
                ret__ = is__.readInt();
                outAsync__.endReadParams();
                return ret__;
            }
            finally
            {
                outAsync__.cacheMessageBuffers();
            }
        }

        private Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetAssureInfoList> begin_GetAssureInfoList(PortServerIce.PSIceAccount account, string index, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, bool synchronous__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__GetAssureInfoList_name);
            IceInternal.TwowayOutgoingAsync<PortServerIce.Callback_QueryServant_GetAssureInfoList> result__ =  getTwowayOutgoingAsync<PortServerIce.Callback_QueryServant_GetAssureInfoList>(__GetAssureInfoList_name, GetAssureInfoList_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare(__GetAssureInfoList_name, Ice.OperationMode.Normal, ctx__, explicitContext__, synchronous__);
                IceInternal.BasicStream os__ = result__.startWriteParams(Ice.FormatType.DefaultFormat);
                PortServerIce.PSIceAccount.write__(os__, account);
                os__.writeString(index);
                result__.endWriteParams();
                result__.invoke();
            }
            catch(Ice.Exception ex__)
            {
                result__.abort(ex__);
            }
            return result__;
        }

        private void GetAssureInfoList_completed__(Ice.AsyncResult r__, PortServerIce.Callback_QueryServant_GetAssureInfoList cb__, Ice.ExceptionCallback excb__)
        {
            PortServerIce.PSIceAssureInfo[] infolist;
            PortServerIce.PSIceErrorCode error;
            int ret__;
            try
            {
                ret__ = end_GetAssureInfoList(out infolist, out error, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, infolist, error);
            }
        }

        public Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetBrokerPositionList> begin_GetBrokerPositionList(PortServerIce.PSIceAccount account, string index)
        {
            return begin_GetBrokerPositionList(account, index, null, false, false, null, null);
        }

        public Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetBrokerPositionList> begin_GetBrokerPositionList(PortServerIce.PSIceAccount account, string index, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_GetBrokerPositionList(account, index, ctx__, true, false, null, null);
        }

        public Ice.AsyncResult begin_GetBrokerPositionList(PortServerIce.PSIceAccount account, string index, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetBrokerPositionList(account, index, null, false, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_GetBrokerPositionList(PortServerIce.PSIceAccount account, string index, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetBrokerPositionList(account, index, ctx__, true, false, cb__, cookie__);
        }

        private const string __GetBrokerPositionList_name = "GetBrokerPositionList";

        public int end_GetBrokerPositionList(out PortServerIce.PSIceSharePosition[] positions, out PortServerIce.PSIceErrorCode error, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = IceInternal.OutgoingAsync.check(r__, this, __GetBrokerPositionList_name);
            try
            {
                if(!outAsync__.wait())
                {
                    try
                    {
                        outAsync__.throwUserException();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                int ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams();
                error = null;
                positions = PortServerIce.PSIceSharePositionListHelper.read(is__);
                error = PortServerIce.PSIceErrorCode.read__(is__, error);
                ret__ = is__.readInt();
                outAsync__.endReadParams();
                return ret__;
            }
            finally
            {
                outAsync__.cacheMessageBuffers();
            }
        }

        private Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetBrokerPositionList> begin_GetBrokerPositionList(PortServerIce.PSIceAccount account, string index, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, bool synchronous__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__GetBrokerPositionList_name);
            IceInternal.TwowayOutgoingAsync<PortServerIce.Callback_QueryServant_GetBrokerPositionList> result__ =  getTwowayOutgoingAsync<PortServerIce.Callback_QueryServant_GetBrokerPositionList>(__GetBrokerPositionList_name, GetBrokerPositionList_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare(__GetBrokerPositionList_name, Ice.OperationMode.Normal, ctx__, explicitContext__, synchronous__);
                IceInternal.BasicStream os__ = result__.startWriteParams(Ice.FormatType.DefaultFormat);
                PortServerIce.PSIceAccount.write__(os__, account);
                os__.writeString(index);
                result__.endWriteParams();
                result__.invoke();
            }
            catch(Ice.Exception ex__)
            {
                result__.abort(ex__);
            }
            return result__;
        }

        private void GetBrokerPositionList_completed__(Ice.AsyncResult r__, PortServerIce.Callback_QueryServant_GetBrokerPositionList cb__, Ice.ExceptionCallback excb__)
        {
            PortServerIce.PSIceSharePosition[] positions;
            PortServerIce.PSIceErrorCode error;
            int ret__;
            try
            {
                ret__ = end_GetBrokerPositionList(out positions, out error, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, positions, error);
            }
        }

        public Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetEnableVolume> begin_GetEnableVolume(PortServerIce.PSIceAccount account, PortServerIce.PSIceVolumeSearch search)
        {
            return begin_GetEnableVolume(account, search, null, false, false, null, null);
        }

        public Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetEnableVolume> begin_GetEnableVolume(PortServerIce.PSIceAccount account, PortServerIce.PSIceVolumeSearch search, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_GetEnableVolume(account, search, ctx__, true, false, null, null);
        }

        public Ice.AsyncResult begin_GetEnableVolume(PortServerIce.PSIceAccount account, PortServerIce.PSIceVolumeSearch search, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetEnableVolume(account, search, null, false, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_GetEnableVolume(PortServerIce.PSIceAccount account, PortServerIce.PSIceVolumeSearch search, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetEnableVolume(account, search, ctx__, true, false, cb__, cookie__);
        }

        private const string __GetEnableVolume_name = "GetEnableVolume";

        public int end_GetEnableVolume(out int volume, out PortServerIce.PSIceErrorCode error, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = IceInternal.OutgoingAsync.check(r__, this, __GetEnableVolume_name);
            try
            {
                if(!outAsync__.wait())
                {
                    try
                    {
                        outAsync__.throwUserException();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                int ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams();
                error = null;
                volume = is__.readInt();
                error = PortServerIce.PSIceErrorCode.read__(is__, error);
                ret__ = is__.readInt();
                outAsync__.endReadParams();
                return ret__;
            }
            finally
            {
                outAsync__.cacheMessageBuffers();
            }
        }

        private Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetEnableVolume> begin_GetEnableVolume(PortServerIce.PSIceAccount account, PortServerIce.PSIceVolumeSearch search, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, bool synchronous__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__GetEnableVolume_name);
            IceInternal.TwowayOutgoingAsync<PortServerIce.Callback_QueryServant_GetEnableVolume> result__ =  getTwowayOutgoingAsync<PortServerIce.Callback_QueryServant_GetEnableVolume>(__GetEnableVolume_name, GetEnableVolume_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare(__GetEnableVolume_name, Ice.OperationMode.Normal, ctx__, explicitContext__, synchronous__);
                IceInternal.BasicStream os__ = result__.startWriteParams(Ice.FormatType.DefaultFormat);
                PortServerIce.PSIceAccount.write__(os__, account);
                PortServerIce.PSIceVolumeSearch.write__(os__, search);
                result__.endWriteParams();
                result__.invoke();
            }
            catch(Ice.Exception ex__)
            {
                result__.abort(ex__);
            }
            return result__;
        }

        private void GetEnableVolume_completed__(Ice.AsyncResult r__, PortServerIce.Callback_QueryServant_GetEnableVolume cb__, Ice.ExceptionCallback excb__)
        {
            int volume;
            PortServerIce.PSIceErrorCode error;
            int ret__;
            try
            {
                ret__ = end_GetEnableVolume(out volume, out error, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, volume, error);
            }
        }

        public Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetFundAccountList> begin_GetFundAccountList(PortServerIce.PSIceAccount account)
        {
            return begin_GetFundAccountList(account, null, false, false, null, null);
        }

        public Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetFundAccountList> begin_GetFundAccountList(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_GetFundAccountList(account, ctx__, true, false, null, null);
        }

        public Ice.AsyncResult begin_GetFundAccountList(PortServerIce.PSIceAccount account, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetFundAccountList(account, null, false, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_GetFundAccountList(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetFundAccountList(account, ctx__, true, false, cb__, cookie__);
        }

        private const string __GetFundAccountList_name = "GetFundAccountList";

        public int end_GetFundAccountList(out PortServerIce.PSIceFundAccount[] fundAccounts, out PortServerIce.PSIceErrorCode error, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = IceInternal.OutgoingAsync.check(r__, this, __GetFundAccountList_name);
            try
            {
                if(!outAsync__.wait())
                {
                    try
                    {
                        outAsync__.throwUserException();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                int ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams();
                error = null;
                fundAccounts = PortServerIce.PSIceFundAccountsHelper.read(is__);
                error = PortServerIce.PSIceErrorCode.read__(is__, error);
                ret__ = is__.readInt();
                outAsync__.endReadParams();
                return ret__;
            }
            finally
            {
                outAsync__.cacheMessageBuffers();
            }
        }

        private Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetFundAccountList> begin_GetFundAccountList(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, bool synchronous__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__GetFundAccountList_name);
            IceInternal.TwowayOutgoingAsync<PortServerIce.Callback_QueryServant_GetFundAccountList> result__ =  getTwowayOutgoingAsync<PortServerIce.Callback_QueryServant_GetFundAccountList>(__GetFundAccountList_name, GetFundAccountList_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare(__GetFundAccountList_name, Ice.OperationMode.Normal, ctx__, explicitContext__, synchronous__);
                IceInternal.BasicStream os__ = result__.startWriteParams(Ice.FormatType.DefaultFormat);
                PortServerIce.PSIceAccount.write__(os__, account);
                result__.endWriteParams();
                result__.invoke();
            }
            catch(Ice.Exception ex__)
            {
                result__.abort(ex__);
            }
            return result__;
        }

        private void GetFundAccountList_completed__(Ice.AsyncResult r__, PortServerIce.Callback_QueryServant_GetFundAccountList cb__, Ice.ExceptionCallback excb__)
        {
            PortServerIce.PSIceFundAccount[] fundAccounts;
            PortServerIce.PSIceErrorCode error;
            int ret__;
            try
            {
                ret__ = end_GetFundAccountList(out fundAccounts, out error, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, fundAccounts, error);
            }
        }

        public Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetFundSummary> begin_GetFundSummary(PortServerIce.PSIceAccount account)
        {
            return begin_GetFundSummary(account, null, false, false, null, null);
        }

        public Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetFundSummary> begin_GetFundSummary(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_GetFundSummary(account, ctx__, true, false, null, null);
        }

        public Ice.AsyncResult begin_GetFundSummary(PortServerIce.PSIceAccount account, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetFundSummary(account, null, false, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_GetFundSummary(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetFundSummary(account, ctx__, true, false, cb__, cookie__);
        }

        private const string __GetFundSummary_name = "GetFundSummary";

        public int end_GetFundSummary(out PortServerIce.PSIceFundSummary fund, out PortServerIce.PSIceErrorCode error, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = IceInternal.OutgoingAsync.check(r__, this, __GetFundSummary_name);
            try
            {
                if(!outAsync__.wait())
                {
                    try
                    {
                        outAsync__.throwUserException();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                int ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams();
                fund = null;
                error = null;
                fund = PortServerIce.PSIceFundSummary.read__(is__, fund);
                error = PortServerIce.PSIceErrorCode.read__(is__, error);
                ret__ = is__.readInt();
                outAsync__.endReadParams();
                return ret__;
            }
            finally
            {
                outAsync__.cacheMessageBuffers();
            }
        }

        private Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetFundSummary> begin_GetFundSummary(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, bool synchronous__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__GetFundSummary_name);
            IceInternal.TwowayOutgoingAsync<PortServerIce.Callback_QueryServant_GetFundSummary> result__ =  getTwowayOutgoingAsync<PortServerIce.Callback_QueryServant_GetFundSummary>(__GetFundSummary_name, GetFundSummary_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare(__GetFundSummary_name, Ice.OperationMode.Normal, ctx__, explicitContext__, synchronous__);
                IceInternal.BasicStream os__ = result__.startWriteParams(Ice.FormatType.DefaultFormat);
                PortServerIce.PSIceAccount.write__(os__, account);
                result__.endWriteParams();
                result__.invoke();
            }
            catch(Ice.Exception ex__)
            {
                result__.abort(ex__);
            }
            return result__;
        }

        private void GetFundSummary_completed__(Ice.AsyncResult r__, PortServerIce.Callback_QueryServant_GetFundSummary cb__, Ice.ExceptionCallback excb__)
        {
            PortServerIce.PSIceFundSummary fund;
            PortServerIce.PSIceErrorCode error;
            int ret__;
            try
            {
                ret__ = end_GetFundSummary(out fund, out error, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, fund, error);
            }
        }

        public Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetObjectInfoList> begin_GetObjectInfoList(PortServerIce.PSIceAccount account, string index)
        {
            return begin_GetObjectInfoList(account, index, null, false, false, null, null);
        }

        public Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetObjectInfoList> begin_GetObjectInfoList(PortServerIce.PSIceAccount account, string index, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_GetObjectInfoList(account, index, ctx__, true, false, null, null);
        }

        public Ice.AsyncResult begin_GetObjectInfoList(PortServerIce.PSIceAccount account, string index, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetObjectInfoList(account, index, null, false, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_GetObjectInfoList(PortServerIce.PSIceAccount account, string index, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetObjectInfoList(account, index, ctx__, true, false, cb__, cookie__);
        }

        private const string __GetObjectInfoList_name = "GetObjectInfoList";

        public int end_GetObjectInfoList(out PortServerIce.PSIceObjectInfo[] infolist, out PortServerIce.PSIceErrorCode error, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = IceInternal.OutgoingAsync.check(r__, this, __GetObjectInfoList_name);
            try
            {
                if(!outAsync__.wait())
                {
                    try
                    {
                        outAsync__.throwUserException();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                int ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams();
                error = null;
                infolist = PortServerIce.PSIceObjectInfoListHelper.read(is__);
                error = PortServerIce.PSIceErrorCode.read__(is__, error);
                ret__ = is__.readInt();
                outAsync__.endReadParams();
                return ret__;
            }
            finally
            {
                outAsync__.cacheMessageBuffers();
            }
        }

        private Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetObjectInfoList> begin_GetObjectInfoList(PortServerIce.PSIceAccount account, string index, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, bool synchronous__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__GetObjectInfoList_name);
            IceInternal.TwowayOutgoingAsync<PortServerIce.Callback_QueryServant_GetObjectInfoList> result__ =  getTwowayOutgoingAsync<PortServerIce.Callback_QueryServant_GetObjectInfoList>(__GetObjectInfoList_name, GetObjectInfoList_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare(__GetObjectInfoList_name, Ice.OperationMode.Normal, ctx__, explicitContext__, synchronous__);
                IceInternal.BasicStream os__ = result__.startWriteParams(Ice.FormatType.DefaultFormat);
                PortServerIce.PSIceAccount.write__(os__, account);
                os__.writeString(index);
                result__.endWriteParams();
                result__.invoke();
            }
            catch(Ice.Exception ex__)
            {
                result__.abort(ex__);
            }
            return result__;
        }

        private void GetObjectInfoList_completed__(Ice.AsyncResult r__, PortServerIce.Callback_QueryServant_GetObjectInfoList cb__, Ice.ExceptionCallback excb__)
        {
            PortServerIce.PSIceObjectInfo[] infolist;
            PortServerIce.PSIceErrorCode error;
            int ret__;
            try
            {
                ret__ = end_GetObjectInfoList(out infolist, out error, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, infolist, error);
            }
        }

        public Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetOrderContractList> begin_GetOrderContractList(PortServerIce.PSIceAccount account, PortServerIce.PSIceOrderContractSearch search)
        {
            return begin_GetOrderContractList(account, search, null, false, false, null, null);
        }

        public Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetOrderContractList> begin_GetOrderContractList(PortServerIce.PSIceAccount account, PortServerIce.PSIceOrderContractSearch search, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_GetOrderContractList(account, search, ctx__, true, false, null, null);
        }

        public Ice.AsyncResult begin_GetOrderContractList(PortServerIce.PSIceAccount account, PortServerIce.PSIceOrderContractSearch search, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetOrderContractList(account, search, null, false, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_GetOrderContractList(PortServerIce.PSIceAccount account, PortServerIce.PSIceOrderContractSearch search, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetOrderContractList(account, search, ctx__, true, false, cb__, cookie__);
        }

        private const string __GetOrderContractList_name = "GetOrderContractList";

        public int end_GetOrderContractList(out PortServerIce.PSIceOrderContract[] contracts, out PortServerIce.PSIceErrorCode error, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = IceInternal.OutgoingAsync.check(r__, this, __GetOrderContractList_name);
            try
            {
                if(!outAsync__.wait())
                {
                    try
                    {
                        outAsync__.throwUserException();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                int ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams();
                error = null;
                contracts = PortServerIce.PSIceOrderContractListHelper.read(is__);
                error = PortServerIce.PSIceErrorCode.read__(is__, error);
                ret__ = is__.readInt();
                outAsync__.endReadParams();
                return ret__;
            }
            finally
            {
                outAsync__.cacheMessageBuffers();
            }
        }

        private Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetOrderContractList> begin_GetOrderContractList(PortServerIce.PSIceAccount account, PortServerIce.PSIceOrderContractSearch search, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, bool synchronous__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__GetOrderContractList_name);
            IceInternal.TwowayOutgoingAsync<PortServerIce.Callback_QueryServant_GetOrderContractList> result__ =  getTwowayOutgoingAsync<PortServerIce.Callback_QueryServant_GetOrderContractList>(__GetOrderContractList_name, GetOrderContractList_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare(__GetOrderContractList_name, Ice.OperationMode.Normal, ctx__, explicitContext__, synchronous__);
                IceInternal.BasicStream os__ = result__.startWriteParams(Ice.FormatType.DefaultFormat);
                PortServerIce.PSIceAccount.write__(os__, account);
                PortServerIce.PSIceOrderContractSearch.write__(os__, search);
                result__.endWriteParams();
                result__.invoke();
            }
            catch(Ice.Exception ex__)
            {
                result__.abort(ex__);
            }
            return result__;
        }

        private void GetOrderContractList_completed__(Ice.AsyncResult r__, PortServerIce.Callback_QueryServant_GetOrderContractList cb__, Ice.ExceptionCallback excb__)
        {
            PortServerIce.PSIceOrderContract[] contracts;
            PortServerIce.PSIceErrorCode error;
            int ret__;
            try
            {
                ret__ = end_GetOrderContractList(out contracts, out error, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, contracts, error);
            }
        }

        public Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetOrderDetailList> begin_GetOrderDetailList(int date, PortServerIce.PSIceAccount account, string index)
        {
            return begin_GetOrderDetailList(date, account, index, null, false, false, null, null);
        }

        public Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetOrderDetailList> begin_GetOrderDetailList(int date, PortServerIce.PSIceAccount account, string index, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_GetOrderDetailList(date, account, index, ctx__, true, false, null, null);
        }

        public Ice.AsyncResult begin_GetOrderDetailList(int date, PortServerIce.PSIceAccount account, string index, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetOrderDetailList(date, account, index, null, false, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_GetOrderDetailList(int date, PortServerIce.PSIceAccount account, string index, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetOrderDetailList(date, account, index, ctx__, true, false, cb__, cookie__);
        }

        private const string __GetOrderDetailList_name = "GetOrderDetailList";

        public int end_GetOrderDetailList(out PortServerIce.PSIceOrderDetail[] orderlist, out PortServerIce.PSIceErrorCode error, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = IceInternal.OutgoingAsync.check(r__, this, __GetOrderDetailList_name);
            try
            {
                if(!outAsync__.wait())
                {
                    try
                    {
                        outAsync__.throwUserException();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                int ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams();
                error = null;
                orderlist = PortServerIce.PSIceOrderDetailListHelper.read(is__);
                error = PortServerIce.PSIceErrorCode.read__(is__, error);
                ret__ = is__.readInt();
                outAsync__.endReadParams();
                return ret__;
            }
            finally
            {
                outAsync__.cacheMessageBuffers();
            }
        }

        private Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetOrderDetailList> begin_GetOrderDetailList(int date, PortServerIce.PSIceAccount account, string index, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, bool synchronous__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__GetOrderDetailList_name);
            IceInternal.TwowayOutgoingAsync<PortServerIce.Callback_QueryServant_GetOrderDetailList> result__ =  getTwowayOutgoingAsync<PortServerIce.Callback_QueryServant_GetOrderDetailList>(__GetOrderDetailList_name, GetOrderDetailList_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare(__GetOrderDetailList_name, Ice.OperationMode.Normal, ctx__, explicitContext__, synchronous__);
                IceInternal.BasicStream os__ = result__.startWriteParams(Ice.FormatType.DefaultFormat);
                os__.writeInt(date);
                PortServerIce.PSIceAccount.write__(os__, account);
                os__.writeString(index);
                result__.endWriteParams();
                result__.invoke();
            }
            catch(Ice.Exception ex__)
            {
                result__.abort(ex__);
            }
            return result__;
        }

        private void GetOrderDetailList_completed__(Ice.AsyncResult r__, PortServerIce.Callback_QueryServant_GetOrderDetailList cb__, Ice.ExceptionCallback excb__)
        {
            PortServerIce.PSIceOrderDetail[] orderlist;
            PortServerIce.PSIceErrorCode error;
            int ret__;
            try
            {
                ret__ = end_GetOrderDetailList(out orderlist, out error, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, orderlist, error);
            }
        }

        public Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetPositionList> begin_GetPositionList(PortServerIce.PSIceAccount account)
        {
            return begin_GetPositionList(account, null, false, false, null, null);
        }

        public Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetPositionList> begin_GetPositionList(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_GetPositionList(account, ctx__, true, false, null, null);
        }

        public Ice.AsyncResult begin_GetPositionList(PortServerIce.PSIceAccount account, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetPositionList(account, null, false, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_GetPositionList(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetPositionList(account, ctx__, true, false, cb__, cookie__);
        }

        private const string __GetPositionList_name = "GetPositionList";

        public int end_GetPositionList(out PortServerIce.PSIcePosition[] positions, out PortServerIce.PSIceErrorCode error, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = IceInternal.OutgoingAsync.check(r__, this, __GetPositionList_name);
            try
            {
                if(!outAsync__.wait())
                {
                    try
                    {
                        outAsync__.throwUserException();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                int ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams();
                error = null;
                positions = PortServerIce.PSIcePositionListHelper.read(is__);
                error = PortServerIce.PSIceErrorCode.read__(is__, error);
                ret__ = is__.readInt();
                outAsync__.endReadParams();
                return ret__;
            }
            finally
            {
                outAsync__.cacheMessageBuffers();
            }
        }

        private Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetPositionList> begin_GetPositionList(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, bool synchronous__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__GetPositionList_name);
            IceInternal.TwowayOutgoingAsync<PortServerIce.Callback_QueryServant_GetPositionList> result__ =  getTwowayOutgoingAsync<PortServerIce.Callback_QueryServant_GetPositionList>(__GetPositionList_name, GetPositionList_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare(__GetPositionList_name, Ice.OperationMode.Normal, ctx__, explicitContext__, synchronous__);
                IceInternal.BasicStream os__ = result__.startWriteParams(Ice.FormatType.DefaultFormat);
                PortServerIce.PSIceAccount.write__(os__, account);
                result__.endWriteParams();
                result__.invoke();
            }
            catch(Ice.Exception ex__)
            {
                result__.abort(ex__);
            }
            return result__;
        }

        private void GetPositionList_completed__(Ice.AsyncResult r__, PortServerIce.Callback_QueryServant_GetPositionList cb__, Ice.ExceptionCallback excb__)
        {
            PortServerIce.PSIcePosition[] positions;
            PortServerIce.PSIceErrorCode error;
            int ret__;
            try
            {
                ret__ = end_GetPositionList(out positions, out error, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, positions, error);
            }
        }

        public Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetSharePositionList> begin_GetSharePositionList(PortServerIce.PSIceAccount account)
        {
            return begin_GetSharePositionList(account, null, false, false, null, null);
        }

        public Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetSharePositionList> begin_GetSharePositionList(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_GetSharePositionList(account, ctx__, true, false, null, null);
        }

        public Ice.AsyncResult begin_GetSharePositionList(PortServerIce.PSIceAccount account, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetSharePositionList(account, null, false, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_GetSharePositionList(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetSharePositionList(account, ctx__, true, false, cb__, cookie__);
        }

        private const string __GetSharePositionList_name = "GetSharePositionList";

        public int end_GetSharePositionList(out PortServerIce.PSIceSharePosition[] positions, out PortServerIce.PSIceErrorCode error, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = IceInternal.OutgoingAsync.check(r__, this, __GetSharePositionList_name);
            try
            {
                if(!outAsync__.wait())
                {
                    try
                    {
                        outAsync__.throwUserException();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                int ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams();
                error = null;
                positions = PortServerIce.PSIceSharePositionListHelper.read(is__);
                error = PortServerIce.PSIceErrorCode.read__(is__, error);
                ret__ = is__.readInt();
                outAsync__.endReadParams();
                return ret__;
            }
            finally
            {
                outAsync__.cacheMessageBuffers();
            }
        }

        private Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetSharePositionList> begin_GetSharePositionList(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, bool synchronous__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__GetSharePositionList_name);
            IceInternal.TwowayOutgoingAsync<PortServerIce.Callback_QueryServant_GetSharePositionList> result__ =  getTwowayOutgoingAsync<PortServerIce.Callback_QueryServant_GetSharePositionList>(__GetSharePositionList_name, GetSharePositionList_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare(__GetSharePositionList_name, Ice.OperationMode.Normal, ctx__, explicitContext__, synchronous__);
                IceInternal.BasicStream os__ = result__.startWriteParams(Ice.FormatType.DefaultFormat);
                PortServerIce.PSIceAccount.write__(os__, account);
                result__.endWriteParams();
                result__.invoke();
            }
            catch(Ice.Exception ex__)
            {
                result__.abort(ex__);
            }
            return result__;
        }

        private void GetSharePositionList_completed__(Ice.AsyncResult r__, PortServerIce.Callback_QueryServant_GetSharePositionList cb__, Ice.ExceptionCallback excb__)
        {
            PortServerIce.PSIceSharePosition[] positions;
            PortServerIce.PSIceErrorCode error;
            int ret__;
            try
            {
                ret__ = end_GetSharePositionList(out positions, out error, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, positions, error);
            }
        }

        public Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetStockAccountList> begin_GetStockAccountList(PortServerIce.PSIceAccount account)
        {
            return begin_GetStockAccountList(account, null, false, false, null, null);
        }

        public Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetStockAccountList> begin_GetStockAccountList(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_GetStockAccountList(account, ctx__, true, false, null, null);
        }

        public Ice.AsyncResult begin_GetStockAccountList(PortServerIce.PSIceAccount account, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetStockAccountList(account, null, false, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_GetStockAccountList(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetStockAccountList(account, ctx__, true, false, cb__, cookie__);
        }

        private const string __GetStockAccountList_name = "GetStockAccountList";

        public int end_GetStockAccountList(out PortServerIce.PSIceStockAccount[] stockAccounts, out PortServerIce.PSIceErrorCode error, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = IceInternal.OutgoingAsync.check(r__, this, __GetStockAccountList_name);
            try
            {
                if(!outAsync__.wait())
                {
                    try
                    {
                        outAsync__.throwUserException();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                int ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams();
                error = null;
                stockAccounts = PortServerIce.PSIceStockAccountsHelper.read(is__);
                error = PortServerIce.PSIceErrorCode.read__(is__, error);
                ret__ = is__.readInt();
                outAsync__.endReadParams();
                return ret__;
            }
            finally
            {
                outAsync__.cacheMessageBuffers();
            }
        }

        private Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetStockAccountList> begin_GetStockAccountList(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, bool synchronous__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__GetStockAccountList_name);
            IceInternal.TwowayOutgoingAsync<PortServerIce.Callback_QueryServant_GetStockAccountList> result__ =  getTwowayOutgoingAsync<PortServerIce.Callback_QueryServant_GetStockAccountList>(__GetStockAccountList_name, GetStockAccountList_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare(__GetStockAccountList_name, Ice.OperationMode.Normal, ctx__, explicitContext__, synchronous__);
                IceInternal.BasicStream os__ = result__.startWriteParams(Ice.FormatType.DefaultFormat);
                PortServerIce.PSIceAccount.write__(os__, account);
                result__.endWriteParams();
                result__.invoke();
            }
            catch(Ice.Exception ex__)
            {
                result__.abort(ex__);
            }
            return result__;
        }

        private void GetStockAccountList_completed__(Ice.AsyncResult r__, PortServerIce.Callback_QueryServant_GetStockAccountList cb__, Ice.ExceptionCallback excb__)
        {
            PortServerIce.PSIceStockAccount[] stockAccounts;
            PortServerIce.PSIceErrorCode error;
            int ret__;
            try
            {
                ret__ = end_GetStockAccountList(out stockAccounts, out error, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, stockAccounts, error);
            }
        }

        public Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetTodayOrderStatusList> begin_GetTodayOrderStatusList(PortServerIce.PSIceAccount account, PortServerIce.PSIceOrderSearch search)
        {
            return begin_GetTodayOrderStatusList(account, search, null, false, false, null, null);
        }

        public Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetTodayOrderStatusList> begin_GetTodayOrderStatusList(PortServerIce.PSIceAccount account, PortServerIce.PSIceOrderSearch search, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_GetTodayOrderStatusList(account, search, ctx__, true, false, null, null);
        }

        public Ice.AsyncResult begin_GetTodayOrderStatusList(PortServerIce.PSIceAccount account, PortServerIce.PSIceOrderSearch search, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetTodayOrderStatusList(account, search, null, false, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_GetTodayOrderStatusList(PortServerIce.PSIceAccount account, PortServerIce.PSIceOrderSearch search, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetTodayOrderStatusList(account, search, ctx__, true, false, cb__, cookie__);
        }

        private const string __GetTodayOrderStatusList_name = "GetTodayOrderStatusList";

        public int end_GetTodayOrderStatusList(out PortServerIce.PSIceOrderStatus[] statuslist, out PortServerIce.PSIceErrorCode error, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = IceInternal.OutgoingAsync.check(r__, this, __GetTodayOrderStatusList_name);
            try
            {
                if(!outAsync__.wait())
                {
                    try
                    {
                        outAsync__.throwUserException();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                int ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams();
                error = null;
                statuslist = PortServerIce.PSIceOrderStatusListHelper.read(is__);
                error = PortServerIce.PSIceErrorCode.read__(is__, error);
                ret__ = is__.readInt();
                outAsync__.endReadParams();
                return ret__;
            }
            finally
            {
                outAsync__.cacheMessageBuffers();
            }
        }

        private Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetTodayOrderStatusList> begin_GetTodayOrderStatusList(PortServerIce.PSIceAccount account, PortServerIce.PSIceOrderSearch search, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, bool synchronous__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__GetTodayOrderStatusList_name);
            IceInternal.TwowayOutgoingAsync<PortServerIce.Callback_QueryServant_GetTodayOrderStatusList> result__ =  getTwowayOutgoingAsync<PortServerIce.Callback_QueryServant_GetTodayOrderStatusList>(__GetTodayOrderStatusList_name, GetTodayOrderStatusList_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare(__GetTodayOrderStatusList_name, Ice.OperationMode.Normal, ctx__, explicitContext__, synchronous__);
                IceInternal.BasicStream os__ = result__.startWriteParams(Ice.FormatType.DefaultFormat);
                PortServerIce.PSIceAccount.write__(os__, account);
                PortServerIce.PSIceOrderSearch.write__(os__, search);
                result__.endWriteParams();
                result__.invoke();
            }
            catch(Ice.Exception ex__)
            {
                result__.abort(ex__);
            }
            return result__;
        }

        private void GetTodayOrderStatusList_completed__(Ice.AsyncResult r__, PortServerIce.Callback_QueryServant_GetTodayOrderStatusList cb__, Ice.ExceptionCallback excb__)
        {
            PortServerIce.PSIceOrderStatus[] statuslist;
            PortServerIce.PSIceErrorCode error;
            int ret__;
            try
            {
                ret__ = end_GetTodayOrderStatusList(out statuslist, out error, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, statuslist, error);
            }
        }

        public Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetTodayTransStatusList> begin_GetTodayTransStatusList(PortServerIce.PSIceAccount account, PortServerIce.PSIceOrderSearch search)
        {
            return begin_GetTodayTransStatusList(account, search, null, false, false, null, null);
        }

        public Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetTodayTransStatusList> begin_GetTodayTransStatusList(PortServerIce.PSIceAccount account, PortServerIce.PSIceOrderSearch search, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_GetTodayTransStatusList(account, search, ctx__, true, false, null, null);
        }

        public Ice.AsyncResult begin_GetTodayTransStatusList(PortServerIce.PSIceAccount account, PortServerIce.PSIceOrderSearch search, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetTodayTransStatusList(account, search, null, false, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_GetTodayTransStatusList(PortServerIce.PSIceAccount account, PortServerIce.PSIceOrderSearch search, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetTodayTransStatusList(account, search, ctx__, true, false, cb__, cookie__);
        }

        private const string __GetTodayTransStatusList_name = "GetTodayTransStatusList";

        public int end_GetTodayTransStatusList(out PortServerIce.PSIceTransStatus[] statuslist, out PortServerIce.PSIceErrorCode error, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = IceInternal.OutgoingAsync.check(r__, this, __GetTodayTransStatusList_name);
            try
            {
                if(!outAsync__.wait())
                {
                    try
                    {
                        outAsync__.throwUserException();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                int ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams();
                error = null;
                statuslist = PortServerIce.PSIceTransStatusListHelper.read(is__);
                error = PortServerIce.PSIceErrorCode.read__(is__, error);
                ret__ = is__.readInt();
                outAsync__.endReadParams();
                return ret__;
            }
            finally
            {
                outAsync__.cacheMessageBuffers();
            }
        }

        private Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetTodayTransStatusList> begin_GetTodayTransStatusList(PortServerIce.PSIceAccount account, PortServerIce.PSIceOrderSearch search, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, bool synchronous__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__GetTodayTransStatusList_name);
            IceInternal.TwowayOutgoingAsync<PortServerIce.Callback_QueryServant_GetTodayTransStatusList> result__ =  getTwowayOutgoingAsync<PortServerIce.Callback_QueryServant_GetTodayTransStatusList>(__GetTodayTransStatusList_name, GetTodayTransStatusList_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare(__GetTodayTransStatusList_name, Ice.OperationMode.Normal, ctx__, explicitContext__, synchronous__);
                IceInternal.BasicStream os__ = result__.startWriteParams(Ice.FormatType.DefaultFormat);
                PortServerIce.PSIceAccount.write__(os__, account);
                PortServerIce.PSIceOrderSearch.write__(os__, search);
                result__.endWriteParams();
                result__.invoke();
            }
            catch(Ice.Exception ex__)
            {
                result__.abort(ex__);
            }
            return result__;
        }

        private void GetTodayTransStatusList_completed__(Ice.AsyncResult r__, PortServerIce.Callback_QueryServant_GetTodayTransStatusList cb__, Ice.ExceptionCallback excb__)
        {
            PortServerIce.PSIceTransStatus[] statuslist;
            PortServerIce.PSIceErrorCode error;
            int ret__;
            try
            {
                ret__ = end_GetTodayTransStatusList(out statuslist, out error, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, statuslist, error);
            }
        }

        public Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetTradeDetailList> begin_GetTradeDetailList(int date, PortServerIce.PSIceAccount account, string index)
        {
            return begin_GetTradeDetailList(date, account, index, null, false, false, null, null);
        }

        public Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetTradeDetailList> begin_GetTradeDetailList(int date, PortServerIce.PSIceAccount account, string index, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_GetTradeDetailList(date, account, index, ctx__, true, false, null, null);
        }

        public Ice.AsyncResult begin_GetTradeDetailList(int date, PortServerIce.PSIceAccount account, string index, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetTradeDetailList(date, account, index, null, false, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_GetTradeDetailList(int date, PortServerIce.PSIceAccount account, string index, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetTradeDetailList(date, account, index, ctx__, true, false, cb__, cookie__);
        }

        private const string __GetTradeDetailList_name = "GetTradeDetailList";

        public int end_GetTradeDetailList(out PortServerIce.PSIceTradeDetail[] tradelist, out PortServerIce.PSIceErrorCode error, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = IceInternal.OutgoingAsync.check(r__, this, __GetTradeDetailList_name);
            try
            {
                if(!outAsync__.wait())
                {
                    try
                    {
                        outAsync__.throwUserException();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                int ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams();
                error = null;
                tradelist = PortServerIce.PSIceTradeDetailListHelper.read(is__);
                error = PortServerIce.PSIceErrorCode.read__(is__, error);
                ret__ = is__.readInt();
                outAsync__.endReadParams();
                return ret__;
            }
            finally
            {
                outAsync__.cacheMessageBuffers();
            }
        }

        private Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetTradeDetailList> begin_GetTradeDetailList(int date, PortServerIce.PSIceAccount account, string index, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, bool synchronous__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__GetTradeDetailList_name);
            IceInternal.TwowayOutgoingAsync<PortServerIce.Callback_QueryServant_GetTradeDetailList> result__ =  getTwowayOutgoingAsync<PortServerIce.Callback_QueryServant_GetTradeDetailList>(__GetTradeDetailList_name, GetTradeDetailList_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare(__GetTradeDetailList_name, Ice.OperationMode.Normal, ctx__, explicitContext__, synchronous__);
                IceInternal.BasicStream os__ = result__.startWriteParams(Ice.FormatType.DefaultFormat);
                os__.writeInt(date);
                PortServerIce.PSIceAccount.write__(os__, account);
                os__.writeString(index);
                result__.endWriteParams();
                result__.invoke();
            }
            catch(Ice.Exception ex__)
            {
                result__.abort(ex__);
            }
            return result__;
        }

        private void GetTradeDetailList_completed__(Ice.AsyncResult r__, PortServerIce.Callback_QueryServant_GetTradeDetailList cb__, Ice.ExceptionCallback excb__)
        {
            PortServerIce.PSIceTradeDetail[] tradelist;
            PortServerIce.PSIceErrorCode error;
            int ret__;
            try
            {
                ret__ = end_GetTradeDetailList(out tradelist, out error, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, tradelist, error);
            }
        }

        public Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetTransDetailList> begin_GetTransDetailList(int date, PortServerIce.PSIceAccount account, string index)
        {
            return begin_GetTransDetailList(date, account, index, null, false, false, null, null);
        }

        public Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetTransDetailList> begin_GetTransDetailList(int date, PortServerIce.PSIceAccount account, string index, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_GetTransDetailList(date, account, index, ctx__, true, false, null, null);
        }

        public Ice.AsyncResult begin_GetTransDetailList(int date, PortServerIce.PSIceAccount account, string index, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetTransDetailList(date, account, index, null, false, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_GetTransDetailList(int date, PortServerIce.PSIceAccount account, string index, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetTransDetailList(date, account, index, ctx__, true, false, cb__, cookie__);
        }

        private const string __GetTransDetailList_name = "GetTransDetailList";

        public int end_GetTransDetailList(out PortServerIce.PSIceTransDetail[] Translist, out PortServerIce.PSIceErrorCode error, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = IceInternal.OutgoingAsync.check(r__, this, __GetTransDetailList_name);
            try
            {
                if(!outAsync__.wait())
                {
                    try
                    {
                        outAsync__.throwUserException();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                int ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams();
                error = null;
                Translist = PortServerIce.PSIceTransDetailListHelper.read(is__);
                error = PortServerIce.PSIceErrorCode.read__(is__, error);
                ret__ = is__.readInt();
                outAsync__.endReadParams();
                return ret__;
            }
            finally
            {
                outAsync__.cacheMessageBuffers();
            }
        }

        private Ice.AsyncResult<PortServerIce.Callback_QueryServant_GetTransDetailList> begin_GetTransDetailList(int date, PortServerIce.PSIceAccount account, string index, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, bool synchronous__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__GetTransDetailList_name);
            IceInternal.TwowayOutgoingAsync<PortServerIce.Callback_QueryServant_GetTransDetailList> result__ =  getTwowayOutgoingAsync<PortServerIce.Callback_QueryServant_GetTransDetailList>(__GetTransDetailList_name, GetTransDetailList_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare(__GetTransDetailList_name, Ice.OperationMode.Normal, ctx__, explicitContext__, synchronous__);
                IceInternal.BasicStream os__ = result__.startWriteParams(Ice.FormatType.DefaultFormat);
                os__.writeInt(date);
                PortServerIce.PSIceAccount.write__(os__, account);
                os__.writeString(index);
                result__.endWriteParams();
                result__.invoke();
            }
            catch(Ice.Exception ex__)
            {
                result__.abort(ex__);
            }
            return result__;
        }

        private void GetTransDetailList_completed__(Ice.AsyncResult r__, PortServerIce.Callback_QueryServant_GetTransDetailList cb__, Ice.ExceptionCallback excb__)
        {
            PortServerIce.PSIceTransDetail[] Translist;
            PortServerIce.PSIceErrorCode error;
            int ret__;
            try
            {
                ret__ = end_GetTransDetailList(out Translist, out error, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, Translist, error);
            }
        }

        public Ice.AsyncResult<PortServerIce.Callback_QueryServant_Login> begin_Login(PortServerIce.PSIceAccount account)
        {
            return begin_Login(account, null, false, false, null, null);
        }

        public Ice.AsyncResult<PortServerIce.Callback_QueryServant_Login> begin_Login(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_Login(account, ctx__, true, false, null, null);
        }

        public Ice.AsyncResult begin_Login(PortServerIce.PSIceAccount account, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_Login(account, null, false, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_Login(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_Login(account, ctx__, true, false, cb__, cookie__);
        }

        private const string __Login_name = "Login";

        public int end_Login(out PortServerIce.PSIceErrorCode error, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = IceInternal.OutgoingAsync.check(r__, this, __Login_name);
            try
            {
                if(!outAsync__.wait())
                {
                    try
                    {
                        outAsync__.throwUserException();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                int ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams();
                error = null;
                error = PortServerIce.PSIceErrorCode.read__(is__, error);
                ret__ = is__.readInt();
                outAsync__.endReadParams();
                return ret__;
            }
            finally
            {
                outAsync__.cacheMessageBuffers();
            }
        }

        private Ice.AsyncResult<PortServerIce.Callback_QueryServant_Login> begin_Login(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, bool synchronous__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__Login_name);
            IceInternal.TwowayOutgoingAsync<PortServerIce.Callback_QueryServant_Login> result__ =  getTwowayOutgoingAsync<PortServerIce.Callback_QueryServant_Login>(__Login_name, Login_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare(__Login_name, Ice.OperationMode.Normal, ctx__, explicitContext__, synchronous__);
                IceInternal.BasicStream os__ = result__.startWriteParams(Ice.FormatType.DefaultFormat);
                PortServerIce.PSIceAccount.write__(os__, account);
                result__.endWriteParams();
                result__.invoke();
            }
            catch(Ice.Exception ex__)
            {
                result__.abort(ex__);
            }
            return result__;
        }

        private void Login_completed__(Ice.AsyncResult r__, PortServerIce.Callback_QueryServant_Login cb__, Ice.ExceptionCallback excb__)
        {
            PortServerIce.PSIceErrorCode error;
            int ret__;
            try
            {
                ret__ = end_Login(out error, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, error);
            }
        }

        public Ice.AsyncResult<PortServerIce.Callback_QueryServant_Logout> begin_Logout(PortServerIce.PSIceAccount account)
        {
            return begin_Logout(account, null, false, false, null, null);
        }

        public Ice.AsyncResult<PortServerIce.Callback_QueryServant_Logout> begin_Logout(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_Logout(account, ctx__, true, false, null, null);
        }

        public Ice.AsyncResult begin_Logout(PortServerIce.PSIceAccount account, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_Logout(account, null, false, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_Logout(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_Logout(account, ctx__, true, false, cb__, cookie__);
        }

        private const string __Logout_name = "Logout";

        public int end_Logout(out PortServerIce.PSIceErrorCode error, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = IceInternal.OutgoingAsync.check(r__, this, __Logout_name);
            try
            {
                if(!outAsync__.wait())
                {
                    try
                    {
                        outAsync__.throwUserException();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                int ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams();
                error = null;
                error = PortServerIce.PSIceErrorCode.read__(is__, error);
                ret__ = is__.readInt();
                outAsync__.endReadParams();
                return ret__;
            }
            finally
            {
                outAsync__.cacheMessageBuffers();
            }
        }

        private Ice.AsyncResult<PortServerIce.Callback_QueryServant_Logout> begin_Logout(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, bool synchronous__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__Logout_name);
            IceInternal.TwowayOutgoingAsync<PortServerIce.Callback_QueryServant_Logout> result__ =  getTwowayOutgoingAsync<PortServerIce.Callback_QueryServant_Logout>(__Logout_name, Logout_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare(__Logout_name, Ice.OperationMode.Normal, ctx__, explicitContext__, synchronous__);
                IceInternal.BasicStream os__ = result__.startWriteParams(Ice.FormatType.DefaultFormat);
                PortServerIce.PSIceAccount.write__(os__, account);
                result__.endWriteParams();
                result__.invoke();
            }
            catch(Ice.Exception ex__)
            {
                result__.abort(ex__);
            }
            return result__;
        }

        private void Logout_completed__(Ice.AsyncResult r__, PortServerIce.Callback_QueryServant_Logout cb__, Ice.ExceptionCallback excb__)
        {
            PortServerIce.PSIceErrorCode error;
            int ret__;
            try
            {
                ret__ = end_Logout(out error, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, error);
            }
        }

        public Ice.AsyncResult<PortServerIce.Callback_QueryServant_SubscribAll> begin_SubscribAll(PortServerIce.PSIceAccount account)
        {
            return begin_SubscribAll(account, null, false, false, null, null);
        }

        public Ice.AsyncResult<PortServerIce.Callback_QueryServant_SubscribAll> begin_SubscribAll(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_SubscribAll(account, ctx__, true, false, null, null);
        }

        public Ice.AsyncResult begin_SubscribAll(PortServerIce.PSIceAccount account, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_SubscribAll(account, null, false, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_SubscribAll(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_SubscribAll(account, ctx__, true, false, cb__, cookie__);
        }

        private const string __SubscribAll_name = "SubscribAll";

        public bool end_SubscribAll(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = IceInternal.OutgoingAsync.check(r__, this, __SubscribAll_name);
            try
            {
                if(!outAsync__.wait())
                {
                    try
                    {
                        outAsync__.throwUserException();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                bool ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams();
                ret__ = is__.readBool();
                outAsync__.endReadParams();
                return ret__;
            }
            finally
            {
                outAsync__.cacheMessageBuffers();
            }
        }

        private Ice.AsyncResult<PortServerIce.Callback_QueryServant_SubscribAll> begin_SubscribAll(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, bool synchronous__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__SubscribAll_name);
            IceInternal.TwowayOutgoingAsync<PortServerIce.Callback_QueryServant_SubscribAll> result__ =  getTwowayOutgoingAsync<PortServerIce.Callback_QueryServant_SubscribAll>(__SubscribAll_name, SubscribAll_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare(__SubscribAll_name, Ice.OperationMode.Normal, ctx__, explicitContext__, synchronous__);
                IceInternal.BasicStream os__ = result__.startWriteParams(Ice.FormatType.DefaultFormat);
                PortServerIce.PSIceAccount.write__(os__, account);
                result__.endWriteParams();
                result__.invoke();
            }
            catch(Ice.Exception ex__)
            {
                result__.abort(ex__);
            }
            return result__;
        }

        private void SubscribAll_completed__(Ice.AsyncResult r__, PortServerIce.Callback_QueryServant_SubscribAll cb__, Ice.ExceptionCallback excb__)
        {
            bool ret__;
            try
            {
                ret__ = end_SubscribAll(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<PortServerIce.Callback_QueryServant_UnsubscribAll> begin_UnsubscribAll(PortServerIce.PSIceAccount account)
        {
            return begin_UnsubscribAll(account, null, false, false, null, null);
        }

        public Ice.AsyncResult<PortServerIce.Callback_QueryServant_UnsubscribAll> begin_UnsubscribAll(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_UnsubscribAll(account, ctx__, true, false, null, null);
        }

        public Ice.AsyncResult begin_UnsubscribAll(PortServerIce.PSIceAccount account, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_UnsubscribAll(account, null, false, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_UnsubscribAll(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_UnsubscribAll(account, ctx__, true, false, cb__, cookie__);
        }

        private const string __UnsubscribAll_name = "UnsubscribAll";

        public bool end_UnsubscribAll(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = IceInternal.OutgoingAsync.check(r__, this, __UnsubscribAll_name);
            try
            {
                if(!outAsync__.wait())
                {
                    try
                    {
                        outAsync__.throwUserException();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                bool ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams();
                ret__ = is__.readBool();
                outAsync__.endReadParams();
                return ret__;
            }
            finally
            {
                outAsync__.cacheMessageBuffers();
            }
        }

        private Ice.AsyncResult<PortServerIce.Callback_QueryServant_UnsubscribAll> begin_UnsubscribAll(PortServerIce.PSIceAccount account, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, bool synchronous__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__UnsubscribAll_name);
            IceInternal.TwowayOutgoingAsync<PortServerIce.Callback_QueryServant_UnsubscribAll> result__ =  getTwowayOutgoingAsync<PortServerIce.Callback_QueryServant_UnsubscribAll>(__UnsubscribAll_name, UnsubscribAll_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare(__UnsubscribAll_name, Ice.OperationMode.Normal, ctx__, explicitContext__, synchronous__);
                IceInternal.BasicStream os__ = result__.startWriteParams(Ice.FormatType.DefaultFormat);
                PortServerIce.PSIceAccount.write__(os__, account);
                result__.endWriteParams();
                result__.invoke();
            }
            catch(Ice.Exception ex__)
            {
                result__.abort(ex__);
            }
            return result__;
        }

        private void UnsubscribAll_completed__(Ice.AsyncResult r__, PortServerIce.Callback_QueryServant_UnsubscribAll cb__, Ice.ExceptionCallback excb__)
        {
            bool ret__;
            try
            {
                ret__ = end_UnsubscribAll(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        #endregion

        #region Checked and unchecked cast operations

        public static QueryServantPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            QueryServantPrx r = b as QueryServantPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                QueryServantPrxHelper h = new QueryServantPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static QueryServantPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            QueryServantPrx r = b as QueryServantPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                QueryServantPrxHelper h = new QueryServantPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static QueryServantPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    QueryServantPrxHelper h = new QueryServantPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static QueryServantPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    QueryServantPrxHelper h = new QueryServantPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static QueryServantPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            QueryServantPrx r = b as QueryServantPrx;
            if(r == null)
            {
                QueryServantPrxHelper h = new QueryServantPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static QueryServantPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            QueryServantPrxHelper h = new QueryServantPrxHelper();
            h.copyFrom__(bb);
            return h;
        }

        public static readonly string[] ids__ =
        {
            "::Ice::Object",
            "::PortServerIce::QueryServant"
        };

        public static string ice_staticId()
        {
            return ids__[1];
        }

        #endregion

        #region Marshaling support

        public static void write__(IceInternal.BasicStream os__, QueryServantPrx v__)
        {
            os__.writeProxy(v__);
        }

        public static QueryServantPrx read__(IceInternal.BasicStream is__)
        {
            Ice.ObjectPrx proxy = is__.readProxy();
            if(proxy != null)
            {
                QueryServantPrxHelper result = new QueryServantPrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace PortServerIce
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
    public abstract class QueryServantDisp_ : Ice.ObjectImpl, QueryServant
    {
        #region Slice operations

        public bool Connect(PortServerIce.PSIceAccount account)
        {
            return Connect(account, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract bool Connect(PortServerIce.PSIceAccount account, Ice.Current current__);

        public bool Disconnect(PortServerIce.PSIceAccount account)
        {
            return Disconnect(account, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract bool Disconnect(PortServerIce.PSIceAccount account, Ice.Current current__);

        public int Login(PortServerIce.PSIceAccount account, out PortServerIce.PSIceErrorCode error)
        {
            return Login(account, out error, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int Login(PortServerIce.PSIceAccount account, out PortServerIce.PSIceErrorCode error, Ice.Current current__);

        public int Logout(PortServerIce.PSIceAccount account, out PortServerIce.PSIceErrorCode error)
        {
            return Logout(account, out error, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int Logout(PortServerIce.PSIceAccount account, out PortServerIce.PSIceErrorCode error, Ice.Current current__);

        public bool SubscribAll(PortServerIce.PSIceAccount account)
        {
            return SubscribAll(account, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract bool SubscribAll(PortServerIce.PSIceAccount account, Ice.Current current__);

        public bool UnsubscribAll(PortServerIce.PSIceAccount account)
        {
            return UnsubscribAll(account, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract bool UnsubscribAll(PortServerIce.PSIceAccount account, Ice.Current current__);

        public int GetFundAccountList(PortServerIce.PSIceAccount account, out PortServerIce.PSIceFundAccount[] fundAccounts, out PortServerIce.PSIceErrorCode error)
        {
            return GetFundAccountList(account, out fundAccounts, out error, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int GetFundAccountList(PortServerIce.PSIceAccount account, out PortServerIce.PSIceFundAccount[] fundAccounts, out PortServerIce.PSIceErrorCode error, Ice.Current current__);

        public int GetStockAccountList(PortServerIce.PSIceAccount account, out PortServerIce.PSIceStockAccount[] stockAccounts, out PortServerIce.PSIceErrorCode error)
        {
            return GetStockAccountList(account, out stockAccounts, out error, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int GetStockAccountList(PortServerIce.PSIceAccount account, out PortServerIce.PSIceStockAccount[] stockAccounts, out PortServerIce.PSIceErrorCode error, Ice.Current current__);

        public int GetPositionList(PortServerIce.PSIceAccount account, out PortServerIce.PSIcePosition[] positions, out PortServerIce.PSIceErrorCode error)
        {
            return GetPositionList(account, out positions, out error, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int GetPositionList(PortServerIce.PSIceAccount account, out PortServerIce.PSIcePosition[] positions, out PortServerIce.PSIceErrorCode error, Ice.Current current__);

        public int GetFundSummary(PortServerIce.PSIceAccount account, out PortServerIce.PSIceFundSummary fund, out PortServerIce.PSIceErrorCode error)
        {
            return GetFundSummary(account, out fund, out error, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int GetFundSummary(PortServerIce.PSIceAccount account, out PortServerIce.PSIceFundSummary fund, out PortServerIce.PSIceErrorCode error, Ice.Current current__);

        public int GetSharePositionList(PortServerIce.PSIceAccount account, out PortServerIce.PSIceSharePosition[] positions, out PortServerIce.PSIceErrorCode error)
        {
            return GetSharePositionList(account, out positions, out error, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int GetSharePositionList(PortServerIce.PSIceAccount account, out PortServerIce.PSIceSharePosition[] positions, out PortServerIce.PSIceErrorCode error, Ice.Current current__);

        public int GetBrokerPositionList(PortServerIce.PSIceAccount account, string index, out PortServerIce.PSIceSharePosition[] positions, out PortServerIce.PSIceErrorCode error)
        {
            return GetBrokerPositionList(account, index, out positions, out error, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int GetBrokerPositionList(PortServerIce.PSIceAccount account, string index, out PortServerIce.PSIceSharePosition[] positions, out PortServerIce.PSIceErrorCode error, Ice.Current current__);

        public int GetEnableVolume(PortServerIce.PSIceAccount account, PortServerIce.PSIceVolumeSearch search, out int volume, out PortServerIce.PSIceErrorCode error)
        {
            return GetEnableVolume(account, search, out volume, out error, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int GetEnableVolume(PortServerIce.PSIceAccount account, PortServerIce.PSIceVolumeSearch search, out int volume, out PortServerIce.PSIceErrorCode error, Ice.Current current__);

        public int GetAssureInfoList(PortServerIce.PSIceAccount account, string index, out PortServerIce.PSIceAssureInfo[] infolist, out PortServerIce.PSIceErrorCode error)
        {
            return GetAssureInfoList(account, index, out infolist, out error, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int GetAssureInfoList(PortServerIce.PSIceAccount account, string index, out PortServerIce.PSIceAssureInfo[] infolist, out PortServerIce.PSIceErrorCode error, Ice.Current current__);

        public int GetObjectInfoList(PortServerIce.PSIceAccount account, string index, out PortServerIce.PSIceObjectInfo[] infolist, out PortServerIce.PSIceErrorCode error)
        {
            return GetObjectInfoList(account, index, out infolist, out error, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int GetObjectInfoList(PortServerIce.PSIceAccount account, string index, out PortServerIce.PSIceObjectInfo[] infolist, out PortServerIce.PSIceErrorCode error, Ice.Current current__);

        public int GetOrderContractList(PortServerIce.PSIceAccount account, PortServerIce.PSIceOrderContractSearch search, out PortServerIce.PSIceOrderContract[] contracts, out PortServerIce.PSIceErrorCode error)
        {
            return GetOrderContractList(account, search, out contracts, out error, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int GetOrderContractList(PortServerIce.PSIceAccount account, PortServerIce.PSIceOrderContractSearch search, out PortServerIce.PSIceOrderContract[] contracts, out PortServerIce.PSIceErrorCode error, Ice.Current current__);

        public int GetTodayOrderStatusList(PortServerIce.PSIceAccount account, PortServerIce.PSIceOrderSearch search, out PortServerIce.PSIceOrderStatus[] statuslist, out PortServerIce.PSIceErrorCode error)
        {
            return GetTodayOrderStatusList(account, search, out statuslist, out error, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int GetTodayOrderStatusList(PortServerIce.PSIceAccount account, PortServerIce.PSIceOrderSearch search, out PortServerIce.PSIceOrderStatus[] statuslist, out PortServerIce.PSIceErrorCode error, Ice.Current current__);

        public int GetTodayTransStatusList(PortServerIce.PSIceAccount account, PortServerIce.PSIceOrderSearch search, out PortServerIce.PSIceTransStatus[] statuslist, out PortServerIce.PSIceErrorCode error)
        {
            return GetTodayTransStatusList(account, search, out statuslist, out error, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int GetTodayTransStatusList(PortServerIce.PSIceAccount account, PortServerIce.PSIceOrderSearch search, out PortServerIce.PSIceTransStatus[] statuslist, out PortServerIce.PSIceErrorCode error, Ice.Current current__);

        public int GetOrderDetailList(int date, PortServerIce.PSIceAccount account, string index, out PortServerIce.PSIceOrderDetail[] orderlist, out PortServerIce.PSIceErrorCode error)
        {
            return GetOrderDetailList(date, account, index, out orderlist, out error, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int GetOrderDetailList(int date, PortServerIce.PSIceAccount account, string index, out PortServerIce.PSIceOrderDetail[] orderlist, out PortServerIce.PSIceErrorCode error, Ice.Current current__);

        public int GetTransDetailList(int date, PortServerIce.PSIceAccount account, string index, out PortServerIce.PSIceTransDetail[] Translist, out PortServerIce.PSIceErrorCode error)
        {
            return GetTransDetailList(date, account, index, out Translist, out error, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int GetTransDetailList(int date, PortServerIce.PSIceAccount account, string index, out PortServerIce.PSIceTransDetail[] Translist, out PortServerIce.PSIceErrorCode error, Ice.Current current__);

        public int GetTradeDetailList(int date, PortServerIce.PSIceAccount account, string index, out PortServerIce.PSIceTradeDetail[] tradelist, out PortServerIce.PSIceErrorCode error)
        {
            return GetTradeDetailList(date, account, index, out tradelist, out error, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int GetTradeDetailList(int date, PortServerIce.PSIceAccount account, string index, out PortServerIce.PSIceTradeDetail[] tradelist, out PortServerIce.PSIceErrorCode error, Ice.Current current__);

        #endregion

        #region Slice type-related members

        public static new readonly string[] ids__ = 
        {
            "::Ice::Object",
            "::PortServerIce::QueryServant"
        };

        public override bool ice_isA(string s)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override bool ice_isA(string s, Ice.Current current__)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids()
        {
            return ids__;
        }

        public override string[] ice_ids(Ice.Current current__)
        {
            return ids__;
        }

        public override string ice_id()
        {
            return ids__[1];
        }

        public override string ice_id(Ice.Current current__)
        {
            return ids__[1];
        }

        public static new string ice_staticId()
        {
            return ids__[1];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus Connect___(QueryServant obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            Ice.ObjectImpl.checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            PortServerIce.PSIceAccount account;
            account = null;
            account = PortServerIce.PSIceAccount.read__(is__, account);
            inS__.endReadParams();
            bool ret__ = obj__.Connect(account, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeBool(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus Disconnect___(QueryServant obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            Ice.ObjectImpl.checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            PortServerIce.PSIceAccount account;
            account = null;
            account = PortServerIce.PSIceAccount.read__(is__, account);
            inS__.endReadParams();
            bool ret__ = obj__.Disconnect(account, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeBool(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus Login___(QueryServant obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            Ice.ObjectImpl.checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            PortServerIce.PSIceAccount account;
            account = null;
            account = PortServerIce.PSIceAccount.read__(is__, account);
            inS__.endReadParams();
            PortServerIce.PSIceErrorCode error;
            int ret__ = obj__.Login(account, out error, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            PortServerIce.PSIceErrorCode.write__(os__, error);
            os__.writeInt(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus Logout___(QueryServant obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            Ice.ObjectImpl.checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            PortServerIce.PSIceAccount account;
            account = null;
            account = PortServerIce.PSIceAccount.read__(is__, account);
            inS__.endReadParams();
            PortServerIce.PSIceErrorCode error;
            int ret__ = obj__.Logout(account, out error, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            PortServerIce.PSIceErrorCode.write__(os__, error);
            os__.writeInt(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus SubscribAll___(QueryServant obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            Ice.ObjectImpl.checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            PortServerIce.PSIceAccount account;
            account = null;
            account = PortServerIce.PSIceAccount.read__(is__, account);
            inS__.endReadParams();
            bool ret__ = obj__.SubscribAll(account, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeBool(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus UnsubscribAll___(QueryServant obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            Ice.ObjectImpl.checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            PortServerIce.PSIceAccount account;
            account = null;
            account = PortServerIce.PSIceAccount.read__(is__, account);
            inS__.endReadParams();
            bool ret__ = obj__.UnsubscribAll(account, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeBool(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus GetFundAccountList___(QueryServant obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            Ice.ObjectImpl.checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            PortServerIce.PSIceAccount account;
            account = null;
            account = PortServerIce.PSIceAccount.read__(is__, account);
            inS__.endReadParams();
            PortServerIce.PSIceFundAccount[] fundAccounts;
            PortServerIce.PSIceErrorCode error;
            int ret__ = obj__.GetFundAccountList(account, out fundAccounts, out error, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            PortServerIce.PSIceFundAccountsHelper.write(os__, fundAccounts);
            PortServerIce.PSIceErrorCode.write__(os__, error);
            os__.writeInt(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus GetStockAccountList___(QueryServant obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            Ice.ObjectImpl.checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            PortServerIce.PSIceAccount account;
            account = null;
            account = PortServerIce.PSIceAccount.read__(is__, account);
            inS__.endReadParams();
            PortServerIce.PSIceStockAccount[] stockAccounts;
            PortServerIce.PSIceErrorCode error;
            int ret__ = obj__.GetStockAccountList(account, out stockAccounts, out error, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            PortServerIce.PSIceStockAccountsHelper.write(os__, stockAccounts);
            PortServerIce.PSIceErrorCode.write__(os__, error);
            os__.writeInt(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus GetPositionList___(QueryServant obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            Ice.ObjectImpl.checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            PortServerIce.PSIceAccount account;
            account = null;
            account = PortServerIce.PSIceAccount.read__(is__, account);
            inS__.endReadParams();
            PortServerIce.PSIcePosition[] positions;
            PortServerIce.PSIceErrorCode error;
            int ret__ = obj__.GetPositionList(account, out positions, out error, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            PortServerIce.PSIcePositionListHelper.write(os__, positions);
            PortServerIce.PSIceErrorCode.write__(os__, error);
            os__.writeInt(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus GetFundSummary___(QueryServant obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            Ice.ObjectImpl.checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            PortServerIce.PSIceAccount account;
            account = null;
            account = PortServerIce.PSIceAccount.read__(is__, account);
            inS__.endReadParams();
            PortServerIce.PSIceFundSummary fund;
            PortServerIce.PSIceErrorCode error;
            int ret__ = obj__.GetFundSummary(account, out fund, out error, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            PortServerIce.PSIceFundSummary.write__(os__, fund);
            PortServerIce.PSIceErrorCode.write__(os__, error);
            os__.writeInt(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus GetSharePositionList___(QueryServant obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            Ice.ObjectImpl.checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            PortServerIce.PSIceAccount account;
            account = null;
            account = PortServerIce.PSIceAccount.read__(is__, account);
            inS__.endReadParams();
            PortServerIce.PSIceSharePosition[] positions;
            PortServerIce.PSIceErrorCode error;
            int ret__ = obj__.GetSharePositionList(account, out positions, out error, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            PortServerIce.PSIceSharePositionListHelper.write(os__, positions);
            PortServerIce.PSIceErrorCode.write__(os__, error);
            os__.writeInt(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus GetBrokerPositionList___(QueryServant obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            Ice.ObjectImpl.checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            PortServerIce.PSIceAccount account;
            account = null;
            string index;
            account = PortServerIce.PSIceAccount.read__(is__, account);
            index = is__.readString();
            inS__.endReadParams();
            PortServerIce.PSIceSharePosition[] positions;
            PortServerIce.PSIceErrorCode error;
            int ret__ = obj__.GetBrokerPositionList(account, index, out positions, out error, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            PortServerIce.PSIceSharePositionListHelper.write(os__, positions);
            PortServerIce.PSIceErrorCode.write__(os__, error);
            os__.writeInt(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus GetEnableVolume___(QueryServant obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            Ice.ObjectImpl.checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            PortServerIce.PSIceAccount account;
            account = null;
            PortServerIce.PSIceVolumeSearch search;
            search = null;
            account = PortServerIce.PSIceAccount.read__(is__, account);
            search = PortServerIce.PSIceVolumeSearch.read__(is__, search);
            inS__.endReadParams();
            int volume;
            PortServerIce.PSIceErrorCode error;
            int ret__ = obj__.GetEnableVolume(account, search, out volume, out error, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeInt(volume);
            PortServerIce.PSIceErrorCode.write__(os__, error);
            os__.writeInt(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus GetAssureInfoList___(QueryServant obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            Ice.ObjectImpl.checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            PortServerIce.PSIceAccount account;
            account = null;
            string index;
            account = PortServerIce.PSIceAccount.read__(is__, account);
            index = is__.readString();
            inS__.endReadParams();
            PortServerIce.PSIceAssureInfo[] infolist;
            PortServerIce.PSIceErrorCode error;
            int ret__ = obj__.GetAssureInfoList(account, index, out infolist, out error, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            PortServerIce.PSIceAssureInfoListHelper.write(os__, infolist);
            PortServerIce.PSIceErrorCode.write__(os__, error);
            os__.writeInt(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus GetObjectInfoList___(QueryServant obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            Ice.ObjectImpl.checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            PortServerIce.PSIceAccount account;
            account = null;
            string index;
            account = PortServerIce.PSIceAccount.read__(is__, account);
            index = is__.readString();
            inS__.endReadParams();
            PortServerIce.PSIceObjectInfo[] infolist;
            PortServerIce.PSIceErrorCode error;
            int ret__ = obj__.GetObjectInfoList(account, index, out infolist, out error, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            PortServerIce.PSIceObjectInfoListHelper.write(os__, infolist);
            PortServerIce.PSIceErrorCode.write__(os__, error);
            os__.writeInt(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus GetOrderContractList___(QueryServant obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            Ice.ObjectImpl.checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            PortServerIce.PSIceAccount account;
            account = null;
            PortServerIce.PSIceOrderContractSearch search;
            search = null;
            account = PortServerIce.PSIceAccount.read__(is__, account);
            search = PortServerIce.PSIceOrderContractSearch.read__(is__, search);
            inS__.endReadParams();
            PortServerIce.PSIceOrderContract[] contracts;
            PortServerIce.PSIceErrorCode error;
            int ret__ = obj__.GetOrderContractList(account, search, out contracts, out error, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            PortServerIce.PSIceOrderContractListHelper.write(os__, contracts);
            PortServerIce.PSIceErrorCode.write__(os__, error);
            os__.writeInt(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus GetTodayOrderStatusList___(QueryServant obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            Ice.ObjectImpl.checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            PortServerIce.PSIceAccount account;
            account = null;
            PortServerIce.PSIceOrderSearch search;
            search = null;
            account = PortServerIce.PSIceAccount.read__(is__, account);
            search = PortServerIce.PSIceOrderSearch.read__(is__, search);
            inS__.endReadParams();
            PortServerIce.PSIceOrderStatus[] statuslist;
            PortServerIce.PSIceErrorCode error;
            int ret__ = obj__.GetTodayOrderStatusList(account, search, out statuslist, out error, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            PortServerIce.PSIceOrderStatusListHelper.write(os__, statuslist);
            PortServerIce.PSIceErrorCode.write__(os__, error);
            os__.writeInt(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus GetTodayTransStatusList___(QueryServant obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            Ice.ObjectImpl.checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            PortServerIce.PSIceAccount account;
            account = null;
            PortServerIce.PSIceOrderSearch search;
            search = null;
            account = PortServerIce.PSIceAccount.read__(is__, account);
            search = PortServerIce.PSIceOrderSearch.read__(is__, search);
            inS__.endReadParams();
            PortServerIce.PSIceTransStatus[] statuslist;
            PortServerIce.PSIceErrorCode error;
            int ret__ = obj__.GetTodayTransStatusList(account, search, out statuslist, out error, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            PortServerIce.PSIceTransStatusListHelper.write(os__, statuslist);
            PortServerIce.PSIceErrorCode.write__(os__, error);
            os__.writeInt(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus GetOrderDetailList___(QueryServant obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            Ice.ObjectImpl.checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            int date;
            PortServerIce.PSIceAccount account;
            account = null;
            string index;
            date = is__.readInt();
            account = PortServerIce.PSIceAccount.read__(is__, account);
            index = is__.readString();
            inS__.endReadParams();
            PortServerIce.PSIceOrderDetail[] orderlist;
            PortServerIce.PSIceErrorCode error;
            int ret__ = obj__.GetOrderDetailList(date, account, index, out orderlist, out error, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            PortServerIce.PSIceOrderDetailListHelper.write(os__, orderlist);
            PortServerIce.PSIceErrorCode.write__(os__, error);
            os__.writeInt(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus GetTransDetailList___(QueryServant obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            Ice.ObjectImpl.checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            int date;
            PortServerIce.PSIceAccount account;
            account = null;
            string index;
            date = is__.readInt();
            account = PortServerIce.PSIceAccount.read__(is__, account);
            index = is__.readString();
            inS__.endReadParams();
            PortServerIce.PSIceTransDetail[] Translist;
            PortServerIce.PSIceErrorCode error;
            int ret__ = obj__.GetTransDetailList(date, account, index, out Translist, out error, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            PortServerIce.PSIceTransDetailListHelper.write(os__, Translist);
            PortServerIce.PSIceErrorCode.write__(os__, error);
            os__.writeInt(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus GetTradeDetailList___(QueryServant obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            Ice.ObjectImpl.checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            int date;
            PortServerIce.PSIceAccount account;
            account = null;
            string index;
            date = is__.readInt();
            account = PortServerIce.PSIceAccount.read__(is__, account);
            index = is__.readString();
            inS__.endReadParams();
            PortServerIce.PSIceTradeDetail[] tradelist;
            PortServerIce.PSIceErrorCode error;
            int ret__ = obj__.GetTradeDetailList(date, account, index, out tradelist, out error, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            PortServerIce.PSIceTradeDetailListHelper.write(os__, tradelist);
            PortServerIce.PSIceErrorCode.write__(os__, error);
            os__.writeInt(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        private static string[] all__ =
        {
            "Connect",
            "Disconnect",
            "GetAssureInfoList",
            "GetBrokerPositionList",
            "GetEnableVolume",
            "GetFundAccountList",
            "GetFundSummary",
            "GetObjectInfoList",
            "GetOrderContractList",
            "GetOrderDetailList",
            "GetPositionList",
            "GetSharePositionList",
            "GetStockAccountList",
            "GetTodayOrderStatusList",
            "GetTodayTransStatusList",
            "GetTradeDetailList",
            "GetTransDetailList",
            "Login",
            "Logout",
            "SubscribAll",
            "UnsubscribAll",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override Ice.DispatchStatus dispatch__(IceInternal.Incoming inS__, Ice.Current current__)
        {
            int pos = _System.Array.BinarySearch(all__, current__.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return Connect___(this, inS__, current__);
                }
                case 1:
                {
                    return Disconnect___(this, inS__, current__);
                }
                case 2:
                {
                    return GetAssureInfoList___(this, inS__, current__);
                }
                case 3:
                {
                    return GetBrokerPositionList___(this, inS__, current__);
                }
                case 4:
                {
                    return GetEnableVolume___(this, inS__, current__);
                }
                case 5:
                {
                    return GetFundAccountList___(this, inS__, current__);
                }
                case 6:
                {
                    return GetFundSummary___(this, inS__, current__);
                }
                case 7:
                {
                    return GetObjectInfoList___(this, inS__, current__);
                }
                case 8:
                {
                    return GetOrderContractList___(this, inS__, current__);
                }
                case 9:
                {
                    return GetOrderDetailList___(this, inS__, current__);
                }
                case 10:
                {
                    return GetPositionList___(this, inS__, current__);
                }
                case 11:
                {
                    return GetSharePositionList___(this, inS__, current__);
                }
                case 12:
                {
                    return GetStockAccountList___(this, inS__, current__);
                }
                case 13:
                {
                    return GetTodayOrderStatusList___(this, inS__, current__);
                }
                case 14:
                {
                    return GetTodayTransStatusList___(this, inS__, current__);
                }
                case 15:
                {
                    return GetTradeDetailList___(this, inS__, current__);
                }
                case 16:
                {
                    return GetTransDetailList___(this, inS__, current__);
                }
                case 17:
                {
                    return Login___(this, inS__, current__);
                }
                case 18:
                {
                    return Logout___(this, inS__, current__);
                }
                case 19:
                {
                    return SubscribAll___(this, inS__, current__);
                }
                case 20:
                {
                    return UnsubscribAll___(this, inS__, current__);
                }
                case 21:
                {
                    return Ice.ObjectImpl.ice_id___(this, inS__, current__);
                }
                case 22:
                {
                    return Ice.ObjectImpl.ice_ids___(this, inS__, current__);
                }
                case 23:
                {
                    return Ice.ObjectImpl.ice_isA___(this, inS__, current__);
                }
                case 24:
                {
                    return Ice.ObjectImpl.ice_ping___(this, inS__, current__);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
        }

        #endregion

        #region Marshaling support

        protected override void writeImpl__(IceInternal.BasicStream os__)
        {
            os__.startWriteSlice(ice_staticId(), -1, true);
            os__.endWriteSlice();
        }

        protected override void readImpl__(IceInternal.BasicStream is__)
        {
            is__.startReadSlice();
            is__.endReadSlice();
        }

        #endregion
    }
}
