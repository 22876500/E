// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.2
//
// <auto-generated>
//
// Generated from file `DataService.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;
using _Microsoft = global::Microsoft;

#pragma warning disable 1591

namespace IceCompactId
{
}

namespace DataServerIce
{
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
#if !SILVERLIGHT
    [_System.Serializable]
#endif
    public partial class DSIceStockCode : _System.ICloneable
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public string Wind;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public string Code;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public string Market;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public string Name;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public string Pinyin;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public int Type;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public DSIceStockCode()
        {
            Wind = "";
            Code = "";
            Market = "";
            Name = "";
            Pinyin = "";
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public DSIceStockCode(string Wind, string Code, string Market, string Name, string Pinyin, int Type)
        {
            this.Wind = Wind;
            this.Code = Code;
            this.Market = Market;
            this.Name = Name;
            this.Pinyin = Pinyin;
            this.Type = Type;
        }

        #endregion

        #region ICloneable members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public override int GetHashCode()
        {
            int h__ = 5381;
            IceInternal.HashUtil.hashAdd(ref h__, "::DataServerIce::DSIceStockCode");
            IceInternal.HashUtil.hashAdd(ref h__, Wind);
            IceInternal.HashUtil.hashAdd(ref h__, Code);
            IceInternal.HashUtil.hashAdd(ref h__, Market);
            IceInternal.HashUtil.hashAdd(ref h__, Name);
            IceInternal.HashUtil.hashAdd(ref h__, Pinyin);
            IceInternal.HashUtil.hashAdd(ref h__, Type);
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public override bool Equals(object other__)
        {
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            if(other__ == null)
            {
                return false;
            }
            if(GetType() != other__.GetType())
            {
                return false;
            }
            DSIceStockCode o__ = (DSIceStockCode)other__;
            if(Wind == null)
            {
                if(o__.Wind != null)
                {
                    return false;
                }
            }
            else
            {
                if(!Wind.Equals(o__.Wind))
                {
                    return false;
                }
            }
            if(Code == null)
            {
                if(o__.Code != null)
                {
                    return false;
                }
            }
            else
            {
                if(!Code.Equals(o__.Code))
                {
                    return false;
                }
            }
            if(Market == null)
            {
                if(o__.Market != null)
                {
                    return false;
                }
            }
            else
            {
                if(!Market.Equals(o__.Market))
                {
                    return false;
                }
            }
            if(Name == null)
            {
                if(o__.Name != null)
                {
                    return false;
                }
            }
            else
            {
                if(!Name.Equals(o__.Name))
                {
                    return false;
                }
            }
            if(Pinyin == null)
            {
                if(o__.Pinyin != null)
                {
                    return false;
                }
            }
            else
            {
                if(!Pinyin.Equals(o__.Pinyin))
                {
                    return false;
                }
            }
            if(!Type.Equals(o__.Type))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static bool operator==(DSIceStockCode lhs__, DSIceStockCode rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static bool operator!=(DSIceStockCode lhs__, DSIceStockCode rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshalling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public void write__(IceInternal.BasicStream os__)
        {
            os__.writeString(Wind);
            os__.writeString(Code);
            os__.writeString(Market);
            os__.writeString(Name);
            os__.writeString(Pinyin);
            os__.writeInt(Type);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public void read__(IceInternal.BasicStream is__)
        {
            Wind = is__.readString();
            Code = is__.readString();
            Market = is__.readString();
            Name = is__.readString();
            Pinyin = is__.readString();
            Type = is__.readInt();
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static void write__(IceInternal.BasicStream os__, DSIceStockCode v__)
        {
            if(v__ == null)
            {
                nullMarshalValue__.write__(os__);
            }
            else
            {
                v__.write__(os__);
            }
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
        public static DSIceStockCode read__(IceInternal.BasicStream is__, DSIceStockCode v__)
        {
            if(v__ == null)
            {
                v__ = new DSIceStockCode();
            }
            v__.read__(is__);
            return v__;
        }
        
        private static readonly DSIceStockCode nullMarshalValue__ = new DSIceStockCode();

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface DataServant : Ice.Object, DataServantOperations_, DataServantOperationsNC_
    {
    }
}

namespace DataServerIce
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
    public delegate void Callback_DataServant_SubscribeCodes(int ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
    public delegate void Callback_DataServant_UnsubscribeCodes(int ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
    public delegate void Callback_DataServant_FlushCodes();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
    public delegate void Callback_DataServant_GetStockCodes(int ret__, DataServerIce.DSIceStockCode[] codes);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
    public delegate void Callback_DataServant_GetVipCodes(string ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
    public delegate void Callback_DataServant_GetStockCodesInfo(string ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
    public delegate void Callback_DataServant_SetSubType(bool ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
    public delegate void Callback_DataServant_GetSubType(int ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
    public delegate void Callback_DataServant_GetPubType(int ret__);
}

namespace DataServerIce
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
    public interface DataServantPrx : Ice.ObjectPrx
    {
        /// <summary>
        /// 订阅股票行情
        /// </summary>
        
        int SubscribeCodes(string username, string[] codelist);

        /// <summary>
        /// 订阅股票行情
        /// </summary>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        
        int SubscribeCodes(string username, string[] codelist, _System.Collections.Generic.Dictionary<string, string> ctx__);

        /// <summary>
        /// 订阅股票行情
        /// </summary>
        /// <returns>An asynchronous result object.</returns>
        Ice.AsyncResult<DataServerIce.Callback_DataServant_SubscribeCodes> begin_SubscribeCodes(string username, string[] codelist);

        /// <summary>
        /// 订阅股票行情
        /// </summary>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        Ice.AsyncResult<DataServerIce.Callback_DataServant_SubscribeCodes> begin_SubscribeCodes(string username, string[] codelist, _System.Collections.Generic.Dictionary<string, string> ctx__);

        /// <summary>
        /// 订阅股票行情
        /// </summary>
        /// <param name="cb__">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie__">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        Ice.AsyncResult begin_SubscribeCodes(string username, string[] codelist, Ice.AsyncCallback cb__, object cookie__);

        /// <summary>
        /// 订阅股票行情
        /// </summary>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        /// <param name="cb__">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie__">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        Ice.AsyncResult begin_SubscribeCodes(string username, string[] codelist, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        /// <summary>
        /// 订阅股票行情
        /// </summary>
        /// <param name="r__">The asynchronous result object for the invocation.</param>
        int end_SubscribeCodes(Ice.AsyncResult r__);

        /// <summary>
        /// 取消订阅股票行情
        /// </summary>
        
        int UnsubscribeCodes(string username, string[] codelist);

        /// <summary>
        /// 取消订阅股票行情
        /// </summary>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        
        int UnsubscribeCodes(string username, string[] codelist, _System.Collections.Generic.Dictionary<string, string> ctx__);

        /// <summary>
        /// 取消订阅股票行情
        /// </summary>
        /// <returns>An asynchronous result object.</returns>
        Ice.AsyncResult<DataServerIce.Callback_DataServant_UnsubscribeCodes> begin_UnsubscribeCodes(string username, string[] codelist);

        /// <summary>
        /// 取消订阅股票行情
        /// </summary>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        Ice.AsyncResult<DataServerIce.Callback_DataServant_UnsubscribeCodes> begin_UnsubscribeCodes(string username, string[] codelist, _System.Collections.Generic.Dictionary<string, string> ctx__);

        /// <summary>
        /// 取消订阅股票行情
        /// </summary>
        /// <param name="cb__">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie__">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        Ice.AsyncResult begin_UnsubscribeCodes(string username, string[] codelist, Ice.AsyncCallback cb__, object cookie__);

        /// <summary>
        /// 取消订阅股票行情
        /// </summary>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        /// <param name="cb__">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie__">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        Ice.AsyncResult begin_UnsubscribeCodes(string username, string[] codelist, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        /// <summary>
        /// 取消订阅股票行情
        /// </summary>
        /// <param name="r__">The asynchronous result object for the invocation.</param>
        int end_UnsubscribeCodes(Ice.AsyncResult r__);

        /// <summary>
        /// 刷新股票订阅列表，长时间未刷新的股票信息将自动取消订阅
        /// </summary>
        
        void FlushCodes(string username, string[] codelist);

        /// <summary>
        /// 刷新股票订阅列表，长时间未刷新的股票信息将自动取消订阅
        /// </summary>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        
        void FlushCodes(string username, string[] codelist, _System.Collections.Generic.Dictionary<string, string> ctx__);

        /// <summary>
        /// 刷新股票订阅列表，长时间未刷新的股票信息将自动取消订阅
        /// </summary>
        /// <returns>An asynchronous result object.</returns>
        Ice.AsyncResult<DataServerIce.Callback_DataServant_FlushCodes> begin_FlushCodes(string username, string[] codelist);

        /// <summary>
        /// 刷新股票订阅列表，长时间未刷新的股票信息将自动取消订阅
        /// </summary>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        Ice.AsyncResult<DataServerIce.Callback_DataServant_FlushCodes> begin_FlushCodes(string username, string[] codelist, _System.Collections.Generic.Dictionary<string, string> ctx__);

        /// <summary>
        /// 刷新股票订阅列表，长时间未刷新的股票信息将自动取消订阅
        /// </summary>
        /// <param name="cb__">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie__">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        Ice.AsyncResult begin_FlushCodes(string username, string[] codelist, Ice.AsyncCallback cb__, object cookie__);

        /// <summary>
        /// 刷新股票订阅列表，长时间未刷新的股票信息将自动取消订阅
        /// </summary>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        /// <param name="cb__">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie__">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        Ice.AsyncResult begin_FlushCodes(string username, string[] codelist, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        /// <summary>
        /// 刷新股票订阅列表，长时间未刷新的股票信息将自动取消订阅
        /// </summary>
        /// <param name="r__">The asynchronous result object for the invocation.</param>
        void end_FlushCodes(Ice.AsyncResult r__);

        /// <summary>
        /// 获取股票代码定义列表
        /// </summary>
        
        int GetStockCodes(out DataServerIce.DSIceStockCode[] codes);

        /// <summary>
        /// 获取股票代码定义列表
        /// </summary>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        
        int GetStockCodes(out DataServerIce.DSIceStockCode[] codes, _System.Collections.Generic.Dictionary<string, string> ctx__);

        /// <summary>
        /// 获取股票代码定义列表
        /// </summary>
        /// <returns>An asynchronous result object.</returns>
        Ice.AsyncResult<DataServerIce.Callback_DataServant_GetStockCodes> begin_GetStockCodes();

        /// <summary>
        /// 获取股票代码定义列表
        /// </summary>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        Ice.AsyncResult<DataServerIce.Callback_DataServant_GetStockCodes> begin_GetStockCodes(_System.Collections.Generic.Dictionary<string, string> ctx__);

        /// <summary>
        /// 获取股票代码定义列表
        /// </summary>
        /// <param name="cb__">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie__">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        Ice.AsyncResult begin_GetStockCodes(Ice.AsyncCallback cb__, object cookie__);

        /// <summary>
        /// 获取股票代码定义列表
        /// </summary>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        /// <param name="cb__">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie__">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        Ice.AsyncResult begin_GetStockCodes(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        /// <summary>
        /// 获取股票代码定义列表
        /// </summary>
        /// <param name="r__">The asynchronous result object for the invocation.</param>
        int end_GetStockCodes(out DataServerIce.DSIceStockCode[] codes, Ice.AsyncResult r__);

        /// <summary>
        /// 获取给定的股票代码
        /// </summary>
        
        string GetVipCodes();

        /// <summary>
        /// 获取给定的股票代码
        /// </summary>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        
        string GetVipCodes(_System.Collections.Generic.Dictionary<string, string> ctx__);

        /// <summary>
        /// 获取给定的股票代码
        /// </summary>
        /// <returns>An asynchronous result object.</returns>
        Ice.AsyncResult<DataServerIce.Callback_DataServant_GetVipCodes> begin_GetVipCodes();

        /// <summary>
        /// 获取给定的股票代码
        /// </summary>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        Ice.AsyncResult<DataServerIce.Callback_DataServant_GetVipCodes> begin_GetVipCodes(_System.Collections.Generic.Dictionary<string, string> ctx__);

        /// <summary>
        /// 获取给定的股票代码
        /// </summary>
        /// <param name="cb__">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie__">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        Ice.AsyncResult begin_GetVipCodes(Ice.AsyncCallback cb__, object cookie__);

        /// <summary>
        /// 获取给定的股票代码
        /// </summary>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        /// <param name="cb__">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie__">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        Ice.AsyncResult begin_GetVipCodes(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        /// <summary>
        /// 获取给定的股票代码
        /// </summary>
        /// <param name="r__">The asynchronous result object for the invocation.</param>
        string end_GetVipCodes(Ice.AsyncResult r__);

        /// <summary>
        /// 获取股票代码定义列表
        /// </summary>
        
        string GetStockCodesInfo();

        /// <summary>
        /// 获取股票代码定义列表
        /// </summary>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        
        string GetStockCodesInfo(_System.Collections.Generic.Dictionary<string, string> ctx__);

        /// <summary>
        /// 获取股票代码定义列表
        /// </summary>
        /// <returns>An asynchronous result object.</returns>
        Ice.AsyncResult<DataServerIce.Callback_DataServant_GetStockCodesInfo> begin_GetStockCodesInfo();

        /// <summary>
        /// 获取股票代码定义列表
        /// </summary>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        Ice.AsyncResult<DataServerIce.Callback_DataServant_GetStockCodesInfo> begin_GetStockCodesInfo(_System.Collections.Generic.Dictionary<string, string> ctx__);

        /// <summary>
        /// 获取股票代码定义列表
        /// </summary>
        /// <param name="cb__">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie__">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        Ice.AsyncResult begin_GetStockCodesInfo(Ice.AsyncCallback cb__, object cookie__);

        /// <summary>
        /// 获取股票代码定义列表
        /// </summary>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        /// <param name="cb__">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie__">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        Ice.AsyncResult begin_GetStockCodesInfo(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        /// <summary>
        /// 获取股票代码定义列表
        /// </summary>
        /// <param name="r__">The asynchronous result object for the invocation.</param>
        string end_GetStockCodesInfo(Ice.AsyncResult r__);

        /// <summary>
        /// 设置订阅模式
        /// </summary>
        
        bool SetSubType(string username, int subType);

        /// <summary>
        /// 设置订阅模式
        /// </summary>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        
        bool SetSubType(string username, int subType, _System.Collections.Generic.Dictionary<string, string> ctx__);

        /// <summary>
        /// 设置订阅模式
        /// </summary>
        /// <returns>An asynchronous result object.</returns>
        Ice.AsyncResult<DataServerIce.Callback_DataServant_SetSubType> begin_SetSubType(string username, int subType);

        /// <summary>
        /// 设置订阅模式
        /// </summary>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        Ice.AsyncResult<DataServerIce.Callback_DataServant_SetSubType> begin_SetSubType(string username, int subType, _System.Collections.Generic.Dictionary<string, string> ctx__);

        /// <summary>
        /// 设置订阅模式
        /// </summary>
        /// <param name="cb__">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie__">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        Ice.AsyncResult begin_SetSubType(string username, int subType, Ice.AsyncCallback cb__, object cookie__);

        /// <summary>
        /// 设置订阅模式
        /// </summary>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        /// <param name="cb__">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie__">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        Ice.AsyncResult begin_SetSubType(string username, int subType, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        /// <summary>
        /// 设置订阅模式
        /// </summary>
        /// <param name="r__">The asynchronous result object for the invocation.</param>
        bool end_SetSubType(Ice.AsyncResult r__);

        /// <summary>
        /// 获取订阅模式
        /// </summary>
        
        int GetSubType();

        /// <summary>
        /// 获取订阅模式
        /// </summary>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        
        int GetSubType(_System.Collections.Generic.Dictionary<string, string> ctx__);

        /// <summary>
        /// 获取订阅模式
        /// </summary>
        /// <returns>An asynchronous result object.</returns>
        Ice.AsyncResult<DataServerIce.Callback_DataServant_GetSubType> begin_GetSubType();

        /// <summary>
        /// 获取订阅模式
        /// </summary>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        Ice.AsyncResult<DataServerIce.Callback_DataServant_GetSubType> begin_GetSubType(_System.Collections.Generic.Dictionary<string, string> ctx__);

        /// <summary>
        /// 获取订阅模式
        /// </summary>
        /// <param name="cb__">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie__">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        Ice.AsyncResult begin_GetSubType(Ice.AsyncCallback cb__, object cookie__);

        /// <summary>
        /// 获取订阅模式
        /// </summary>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        /// <param name="cb__">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie__">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        Ice.AsyncResult begin_GetSubType(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        /// <summary>
        /// 获取订阅模式
        /// </summary>
        /// <param name="r__">The asynchronous result object for the invocation.</param>
        int end_GetSubType(Ice.AsyncResult r__);

        int GetPubType();

        int GetPubType(_System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult<DataServerIce.Callback_DataServant_GetPubType> begin_GetPubType();

        Ice.AsyncResult<DataServerIce.Callback_DataServant_GetPubType> begin_GetPubType(_System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_GetPubType(Ice.AsyncCallback cb__, object cookie__);

        Ice.AsyncResult begin_GetPubType(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_GetPubType(Ice.AsyncResult r__);
    }
}

namespace DataServerIce
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
    public interface DataServantOperations_
    {
        /// <summary>
        /// 订阅股票行情
        /// </summary>
        /// <param name="current__">The Current object for the invocation.</param>
        
        int SubscribeCodes(string username, string[] codelist, Ice.Current current__);

        /// <summary>
        /// 取消订阅股票行情
        /// </summary>
        /// <param name="current__">The Current object for the invocation.</param>
        
        int UnsubscribeCodes(string username, string[] codelist, Ice.Current current__);

        /// <summary>
        /// 刷新股票订阅列表，长时间未刷新的股票信息将自动取消订阅
        /// </summary>
        /// <param name="current__">The Current object for the invocation.</param>
        
        void FlushCodes(string username, string[] codelist, Ice.Current current__);

        /// <summary>
        /// 获取股票代码定义列表
        /// </summary>
        /// <param name="current__">The Current object for the invocation.</param>
        
        int GetStockCodes(out DataServerIce.DSIceStockCode[] codes, Ice.Current current__);

        /// <summary>
        /// 获取给定的股票代码
        /// </summary>
        /// <param name="current__">The Current object for the invocation.</param>
        
        string GetVipCodes(Ice.Current current__);

        /// <summary>
        /// 获取股票代码定义列表
        /// </summary>
        /// <param name="current__">The Current object for the invocation.</param>
        
        string GetStockCodesInfo(Ice.Current current__);

        /// <summary>
        /// 设置订阅模式
        /// </summary>
        /// <param name="current__">The Current object for the invocation.</param>
        
        bool SetSubType(string username, int subType, Ice.Current current__);

        /// <summary>
        /// 获取订阅模式
        /// </summary>
        /// <param name="current__">The Current object for the invocation.</param>
        
        int GetSubType(Ice.Current current__);

        int GetPubType(Ice.Current current__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
    public interface DataServantOperationsNC_
    {
        /// <summary>
        /// 订阅股票行情
        /// </summary>
        
        int SubscribeCodes(string username, string[] codelist);

        /// <summary>
        /// 取消订阅股票行情
        /// </summary>
        
        int UnsubscribeCodes(string username, string[] codelist);

        /// <summary>
        /// 刷新股票订阅列表，长时间未刷新的股票信息将自动取消订阅
        /// </summary>
        
        void FlushCodes(string username, string[] codelist);

        /// <summary>
        /// 获取股票代码定义列表
        /// </summary>
        
        int GetStockCodes(out DataServerIce.DSIceStockCode[] codes);

        /// <summary>
        /// 获取给定的股票代码
        /// </summary>
        
        string GetVipCodes();

        /// <summary>
        /// 获取股票代码定义列表
        /// </summary>
        
        string GetStockCodesInfo();

        /// <summary>
        /// 设置订阅模式
        /// </summary>
        
        bool SetSubType(string username, int subType);

        /// <summary>
        /// 获取订阅模式
        /// </summary>
        
        int GetSubType();

        int GetPubType();
    }
}

namespace DataServerIce
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
    public sealed class DSIceCodesHelper
    {
        public static void write(IceInternal.BasicStream os__, string[] v__)
        {
            os__.writeStringSeq(v__);
        }

        public static string[] read(IceInternal.BasicStream is__)
        {
            string[] v__;
            v__ = is__.readStringSeq();
            return v__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
    public sealed class DSIceStockCodesHelper
    {
        public static void write(IceInternal.BasicStream os__, DataServerIce.DSIceStockCode[] v__)
        {
            if(v__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(v__.Length);
                for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                {
                    (v__[ix__] == null ? new DataServerIce.DSIceStockCode() : v__[ix__]).write__(os__);
                }
            }
        }

        public static DataServerIce.DSIceStockCode[] read(IceInternal.BasicStream is__)
        {
            DataServerIce.DSIceStockCode[] v__;
            {
                int szx__ = is__.readAndCheckSeqSize(9);
                v__ = new DataServerIce.DSIceStockCode[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    v__[ix__] = new DataServerIce.DSIceStockCode();
                    v__[ix__].read__(is__);
                }
            }
            return v__;
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
    public sealed class DataServantPrxHelper : Ice.ObjectPrxHelperBase, DataServantPrx
    {
        #region Synchronous operations

        public void FlushCodes(string username, string[] codelist)
        {
            this.FlushCodes(username, codelist, null, false);
        }

        public void FlushCodes(string username, string[] codelist, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            this.FlushCodes(username, codelist, ctx__, true);
        }

        private void FlushCodes(string username, string[] codelist, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitCtx__)
        {
            end_FlushCodes(begin_FlushCodes(username, codelist, context__, explicitCtx__, true, null, null));
        }

        public int GetPubType()
        {
            return this.GetPubType(null, false);
        }

        public int GetPubType(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return this.GetPubType(ctx__, true);
        }

        private int GetPubType(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitCtx__)
        {
            checkTwowayOnly__(__GetPubType_name);
            return end_GetPubType(begin_GetPubType(context__, explicitCtx__, true, null, null));
        }

        public int GetStockCodes(out DataServerIce.DSIceStockCode[] codes)
        {
            return this.GetStockCodes(out codes, null, false);
        }

        public int GetStockCodes(out DataServerIce.DSIceStockCode[] codes, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return this.GetStockCodes(out codes, ctx__, true);
        }

        private int GetStockCodes(out DataServerIce.DSIceStockCode[] codes, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitCtx__)
        {
            checkTwowayOnly__(__GetStockCodes_name);
            return end_GetStockCodes(out codes, begin_GetStockCodes(context__, explicitCtx__, true, null, null));
        }

        public string GetStockCodesInfo()
        {
            return this.GetStockCodesInfo(null, false);
        }

        public string GetStockCodesInfo(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return this.GetStockCodesInfo(ctx__, true);
        }

        private string GetStockCodesInfo(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitCtx__)
        {
            checkTwowayOnly__(__GetStockCodesInfo_name);
            return end_GetStockCodesInfo(begin_GetStockCodesInfo(context__, explicitCtx__, true, null, null));
        }

        public int GetSubType()
        {
            return this.GetSubType(null, false);
        }

        public int GetSubType(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return this.GetSubType(ctx__, true);
        }

        private int GetSubType(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitCtx__)
        {
            checkTwowayOnly__(__GetSubType_name);
            return end_GetSubType(begin_GetSubType(context__, explicitCtx__, true, null, null));
        }

        public string GetVipCodes()
        {
            return this.GetVipCodes(null, false);
        }

        public string GetVipCodes(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return this.GetVipCodes(ctx__, true);
        }

        private string GetVipCodes(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitCtx__)
        {
            checkTwowayOnly__(__GetVipCodes_name);
            return end_GetVipCodes(begin_GetVipCodes(context__, explicitCtx__, true, null, null));
        }

        public bool SetSubType(string username, int subType)
        {
            return this.SetSubType(username, subType, null, false);
        }

        public bool SetSubType(string username, int subType, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return this.SetSubType(username, subType, ctx__, true);
        }

        private bool SetSubType(string username, int subType, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitCtx__)
        {
            checkTwowayOnly__(__SetSubType_name);
            return end_SetSubType(begin_SetSubType(username, subType, context__, explicitCtx__, true, null, null));
        }

        public int SubscribeCodes(string username, string[] codelist)
        {
            return this.SubscribeCodes(username, codelist, null, false);
        }

        public int SubscribeCodes(string username, string[] codelist, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return this.SubscribeCodes(username, codelist, ctx__, true);
        }

        private int SubscribeCodes(string username, string[] codelist, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitCtx__)
        {
            checkTwowayOnly__(__SubscribeCodes_name);
            return end_SubscribeCodes(begin_SubscribeCodes(username, codelist, context__, explicitCtx__, true, null, null));
        }

        public int UnsubscribeCodes(string username, string[] codelist)
        {
            return this.UnsubscribeCodes(username, codelist, null, false);
        }

        public int UnsubscribeCodes(string username, string[] codelist, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return this.UnsubscribeCodes(username, codelist, ctx__, true);
        }

        private int UnsubscribeCodes(string username, string[] codelist, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitCtx__)
        {
            checkTwowayOnly__(__UnsubscribeCodes_name);
            return end_UnsubscribeCodes(begin_UnsubscribeCodes(username, codelist, context__, explicitCtx__, true, null, null));
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<DataServerIce.Callback_DataServant_FlushCodes> begin_FlushCodes(string username, string[] codelist)
        {
            return begin_FlushCodes(username, codelist, null, false, false, null, null);
        }

        public Ice.AsyncResult<DataServerIce.Callback_DataServant_FlushCodes> begin_FlushCodes(string username, string[] codelist, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_FlushCodes(username, codelist, ctx__, true, false, null, null);
        }

        public Ice.AsyncResult begin_FlushCodes(string username, string[] codelist, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_FlushCodes(username, codelist, null, false, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_FlushCodes(string username, string[] codelist, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_FlushCodes(username, codelist, ctx__, true, false, cb__, cookie__);
        }

        private const string __FlushCodes_name = "FlushCodes";

        public void end_FlushCodes(Ice.AsyncResult r__)
        {
            end__(r__, __FlushCodes_name);
        }

        private Ice.AsyncResult<DataServerIce.Callback_DataServant_FlushCodes> begin_FlushCodes(string username, string[] codelist, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, bool synchronous__, Ice.AsyncCallback cb__, object cookie__)
        {
            IceInternal.OnewayOutgoingAsync<DataServerIce.Callback_DataServant_FlushCodes> result__ = getOnewayOutgoingAsync<DataServerIce.Callback_DataServant_FlushCodes>(__FlushCodes_name, FlushCodes_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare(__FlushCodes_name, Ice.OperationMode.Normal, ctx__, explicitContext__, synchronous__);
                IceInternal.BasicStream os__ = result__.startWriteParams(Ice.FormatType.DefaultFormat);
                os__.writeString(username);
                DataServerIce.DSIceCodesHelper.write(os__, codelist);
                result__.endWriteParams();
                result__.invoke();
            }
            catch(Ice.Exception ex__)
            {
                result__.abort(ex__);
            }
            return result__;
        }

        private void FlushCodes_completed__(DataServerIce.Callback_DataServant_FlushCodes cb__)
        {
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<DataServerIce.Callback_DataServant_GetPubType> begin_GetPubType()
        {
            return begin_GetPubType(null, false, false, null, null);
        }

        public Ice.AsyncResult<DataServerIce.Callback_DataServant_GetPubType> begin_GetPubType(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_GetPubType(ctx__, true, false, null, null);
        }

        public Ice.AsyncResult begin_GetPubType(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetPubType(null, false, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_GetPubType(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetPubType(ctx__, true, false, cb__, cookie__);
        }

        private const string __GetPubType_name = "GetPubType";

        public int end_GetPubType(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = IceInternal.OutgoingAsync.check(r__, this, __GetPubType_name);
            try
            {
                if(!outAsync__.wait())
                {
                    try
                    {
                        outAsync__.throwUserException();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                int ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams();
                ret__ = is__.readInt();
                outAsync__.endReadParams();
                return ret__;
            }
            finally
            {
                outAsync__.cacheMessageBuffers();
            }
        }

        private Ice.AsyncResult<DataServerIce.Callback_DataServant_GetPubType> begin_GetPubType(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, bool synchronous__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__GetPubType_name);
            IceInternal.TwowayOutgoingAsync<DataServerIce.Callback_DataServant_GetPubType> result__ =  getTwowayOutgoingAsync<DataServerIce.Callback_DataServant_GetPubType>(__GetPubType_name, GetPubType_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare(__GetPubType_name, Ice.OperationMode.Normal, ctx__, explicitContext__, synchronous__);
                result__.writeEmptyParams();
                result__.invoke();
            }
            catch(Ice.Exception ex__)
            {
                result__.abort(ex__);
            }
            return result__;
        }

        private void GetPubType_completed__(Ice.AsyncResult r__, DataServerIce.Callback_DataServant_GetPubType cb__, Ice.ExceptionCallback excb__)
        {
            int ret__;
            try
            {
                ret__ = end_GetPubType(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<DataServerIce.Callback_DataServant_GetStockCodes> begin_GetStockCodes()
        {
            return begin_GetStockCodes(null, false, false, null, null);
        }

        public Ice.AsyncResult<DataServerIce.Callback_DataServant_GetStockCodes> begin_GetStockCodes(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_GetStockCodes(ctx__, true, false, null, null);
        }

        public Ice.AsyncResult begin_GetStockCodes(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetStockCodes(null, false, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_GetStockCodes(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetStockCodes(ctx__, true, false, cb__, cookie__);
        }

        private const string __GetStockCodes_name = "GetStockCodes";

        public int end_GetStockCodes(out DataServerIce.DSIceStockCode[] codes, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = IceInternal.OutgoingAsync.check(r__, this, __GetStockCodes_name);
            try
            {
                if(!outAsync__.wait())
                {
                    try
                    {
                        outAsync__.throwUserException();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                int ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams();
                codes = DataServerIce.DSIceStockCodesHelper.read(is__);
                ret__ = is__.readInt();
                outAsync__.endReadParams();
                return ret__;
            }
            finally
            {
                outAsync__.cacheMessageBuffers();
            }
        }

        private Ice.AsyncResult<DataServerIce.Callback_DataServant_GetStockCodes> begin_GetStockCodes(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, bool synchronous__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__GetStockCodes_name);
            IceInternal.TwowayOutgoingAsync<DataServerIce.Callback_DataServant_GetStockCodes> result__ =  getTwowayOutgoingAsync<DataServerIce.Callback_DataServant_GetStockCodes>(__GetStockCodes_name, GetStockCodes_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare(__GetStockCodes_name, Ice.OperationMode.Normal, ctx__, explicitContext__, synchronous__);
                result__.writeEmptyParams();
                result__.invoke();
            }
            catch(Ice.Exception ex__)
            {
                result__.abort(ex__);
            }
            return result__;
        }

        private void GetStockCodes_completed__(Ice.AsyncResult r__, DataServerIce.Callback_DataServant_GetStockCodes cb__, Ice.ExceptionCallback excb__)
        {
            DataServerIce.DSIceStockCode[] codes;
            int ret__;
            try
            {
                ret__ = end_GetStockCodes(out codes, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, codes);
            }
        }

        public Ice.AsyncResult<DataServerIce.Callback_DataServant_GetStockCodesInfo> begin_GetStockCodesInfo()
        {
            return begin_GetStockCodesInfo(null, false, false, null, null);
        }

        public Ice.AsyncResult<DataServerIce.Callback_DataServant_GetStockCodesInfo> begin_GetStockCodesInfo(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_GetStockCodesInfo(ctx__, true, false, null, null);
        }

        public Ice.AsyncResult begin_GetStockCodesInfo(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetStockCodesInfo(null, false, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_GetStockCodesInfo(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetStockCodesInfo(ctx__, true, false, cb__, cookie__);
        }

        private const string __GetStockCodesInfo_name = "GetStockCodesInfo";

        public string end_GetStockCodesInfo(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = IceInternal.OutgoingAsync.check(r__, this, __GetStockCodesInfo_name);
            try
            {
                if(!outAsync__.wait())
                {
                    try
                    {
                        outAsync__.throwUserException();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                string ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams();
                ret__ = is__.readString();
                outAsync__.endReadParams();
                return ret__;
            }
            finally
            {
                outAsync__.cacheMessageBuffers();
            }
        }

        private Ice.AsyncResult<DataServerIce.Callback_DataServant_GetStockCodesInfo> begin_GetStockCodesInfo(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, bool synchronous__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__GetStockCodesInfo_name);
            IceInternal.TwowayOutgoingAsync<DataServerIce.Callback_DataServant_GetStockCodesInfo> result__ =  getTwowayOutgoingAsync<DataServerIce.Callback_DataServant_GetStockCodesInfo>(__GetStockCodesInfo_name, GetStockCodesInfo_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare(__GetStockCodesInfo_name, Ice.OperationMode.Normal, ctx__, explicitContext__, synchronous__);
                result__.writeEmptyParams();
                result__.invoke();
            }
            catch(Ice.Exception ex__)
            {
                result__.abort(ex__);
            }
            return result__;
        }

        private void GetStockCodesInfo_completed__(Ice.AsyncResult r__, DataServerIce.Callback_DataServant_GetStockCodesInfo cb__, Ice.ExceptionCallback excb__)
        {
            string ret__;
            try
            {
                ret__ = end_GetStockCodesInfo(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<DataServerIce.Callback_DataServant_GetSubType> begin_GetSubType()
        {
            return begin_GetSubType(null, false, false, null, null);
        }

        public Ice.AsyncResult<DataServerIce.Callback_DataServant_GetSubType> begin_GetSubType(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_GetSubType(ctx__, true, false, null, null);
        }

        public Ice.AsyncResult begin_GetSubType(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetSubType(null, false, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_GetSubType(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetSubType(ctx__, true, false, cb__, cookie__);
        }

        private const string __GetSubType_name = "GetSubType";

        public int end_GetSubType(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = IceInternal.OutgoingAsync.check(r__, this, __GetSubType_name);
            try
            {
                if(!outAsync__.wait())
                {
                    try
                    {
                        outAsync__.throwUserException();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                int ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams();
                ret__ = is__.readInt();
                outAsync__.endReadParams();
                return ret__;
            }
            finally
            {
                outAsync__.cacheMessageBuffers();
            }
        }

        private Ice.AsyncResult<DataServerIce.Callback_DataServant_GetSubType> begin_GetSubType(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, bool synchronous__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__GetSubType_name);
            IceInternal.TwowayOutgoingAsync<DataServerIce.Callback_DataServant_GetSubType> result__ =  getTwowayOutgoingAsync<DataServerIce.Callback_DataServant_GetSubType>(__GetSubType_name, GetSubType_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare(__GetSubType_name, Ice.OperationMode.Normal, ctx__, explicitContext__, synchronous__);
                result__.writeEmptyParams();
                result__.invoke();
            }
            catch(Ice.Exception ex__)
            {
                result__.abort(ex__);
            }
            return result__;
        }

        private void GetSubType_completed__(Ice.AsyncResult r__, DataServerIce.Callback_DataServant_GetSubType cb__, Ice.ExceptionCallback excb__)
        {
            int ret__;
            try
            {
                ret__ = end_GetSubType(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<DataServerIce.Callback_DataServant_GetVipCodes> begin_GetVipCodes()
        {
            return begin_GetVipCodes(null, false, false, null, null);
        }

        public Ice.AsyncResult<DataServerIce.Callback_DataServant_GetVipCodes> begin_GetVipCodes(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_GetVipCodes(ctx__, true, false, null, null);
        }

        public Ice.AsyncResult begin_GetVipCodes(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetVipCodes(null, false, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_GetVipCodes(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetVipCodes(ctx__, true, false, cb__, cookie__);
        }

        private const string __GetVipCodes_name = "GetVipCodes";

        public string end_GetVipCodes(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = IceInternal.OutgoingAsync.check(r__, this, __GetVipCodes_name);
            try
            {
                if(!outAsync__.wait())
                {
                    try
                    {
                        outAsync__.throwUserException();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                string ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams();
                ret__ = is__.readString();
                outAsync__.endReadParams();
                return ret__;
            }
            finally
            {
                outAsync__.cacheMessageBuffers();
            }
        }

        private Ice.AsyncResult<DataServerIce.Callback_DataServant_GetVipCodes> begin_GetVipCodes(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, bool synchronous__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__GetVipCodes_name);
            IceInternal.TwowayOutgoingAsync<DataServerIce.Callback_DataServant_GetVipCodes> result__ =  getTwowayOutgoingAsync<DataServerIce.Callback_DataServant_GetVipCodes>(__GetVipCodes_name, GetVipCodes_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare(__GetVipCodes_name, Ice.OperationMode.Normal, ctx__, explicitContext__, synchronous__);
                result__.writeEmptyParams();
                result__.invoke();
            }
            catch(Ice.Exception ex__)
            {
                result__.abort(ex__);
            }
            return result__;
        }

        private void GetVipCodes_completed__(Ice.AsyncResult r__, DataServerIce.Callback_DataServant_GetVipCodes cb__, Ice.ExceptionCallback excb__)
        {
            string ret__;
            try
            {
                ret__ = end_GetVipCodes(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<DataServerIce.Callback_DataServant_SetSubType> begin_SetSubType(string username, int subType)
        {
            return begin_SetSubType(username, subType, null, false, false, null, null);
        }

        public Ice.AsyncResult<DataServerIce.Callback_DataServant_SetSubType> begin_SetSubType(string username, int subType, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_SetSubType(username, subType, ctx__, true, false, null, null);
        }

        public Ice.AsyncResult begin_SetSubType(string username, int subType, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_SetSubType(username, subType, null, false, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_SetSubType(string username, int subType, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_SetSubType(username, subType, ctx__, true, false, cb__, cookie__);
        }

        private const string __SetSubType_name = "SetSubType";

        public bool end_SetSubType(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = IceInternal.OutgoingAsync.check(r__, this, __SetSubType_name);
            try
            {
                if(!outAsync__.wait())
                {
                    try
                    {
                        outAsync__.throwUserException();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                bool ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams();
                ret__ = is__.readBool();
                outAsync__.endReadParams();
                return ret__;
            }
            finally
            {
                outAsync__.cacheMessageBuffers();
            }
        }

        private Ice.AsyncResult<DataServerIce.Callback_DataServant_SetSubType> begin_SetSubType(string username, int subType, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, bool synchronous__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__SetSubType_name);
            IceInternal.TwowayOutgoingAsync<DataServerIce.Callback_DataServant_SetSubType> result__ =  getTwowayOutgoingAsync<DataServerIce.Callback_DataServant_SetSubType>(__SetSubType_name, SetSubType_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare(__SetSubType_name, Ice.OperationMode.Normal, ctx__, explicitContext__, synchronous__);
                IceInternal.BasicStream os__ = result__.startWriteParams(Ice.FormatType.DefaultFormat);
                os__.writeString(username);
                os__.writeInt(subType);
                result__.endWriteParams();
                result__.invoke();
            }
            catch(Ice.Exception ex__)
            {
                result__.abort(ex__);
            }
            return result__;
        }

        private void SetSubType_completed__(Ice.AsyncResult r__, DataServerIce.Callback_DataServant_SetSubType cb__, Ice.ExceptionCallback excb__)
        {
            bool ret__;
            try
            {
                ret__ = end_SetSubType(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<DataServerIce.Callback_DataServant_SubscribeCodes> begin_SubscribeCodes(string username, string[] codelist)
        {
            return begin_SubscribeCodes(username, codelist, null, false, false, null, null);
        }

        public Ice.AsyncResult<DataServerIce.Callback_DataServant_SubscribeCodes> begin_SubscribeCodes(string username, string[] codelist, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_SubscribeCodes(username, codelist, ctx__, true, false, null, null);
        }

        public Ice.AsyncResult begin_SubscribeCodes(string username, string[] codelist, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_SubscribeCodes(username, codelist, null, false, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_SubscribeCodes(string username, string[] codelist, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_SubscribeCodes(username, codelist, ctx__, true, false, cb__, cookie__);
        }

        private const string __SubscribeCodes_name = "SubscribeCodes";

        public int end_SubscribeCodes(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = IceInternal.OutgoingAsync.check(r__, this, __SubscribeCodes_name);
            try
            {
                if(!outAsync__.wait())
                {
                    try
                    {
                        outAsync__.throwUserException();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                int ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams();
                ret__ = is__.readInt();
                outAsync__.endReadParams();
                return ret__;
            }
            finally
            {
                outAsync__.cacheMessageBuffers();
            }
        }

        private Ice.AsyncResult<DataServerIce.Callback_DataServant_SubscribeCodes> begin_SubscribeCodes(string username, string[] codelist, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, bool synchronous__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__SubscribeCodes_name);
            IceInternal.TwowayOutgoingAsync<DataServerIce.Callback_DataServant_SubscribeCodes> result__ =  getTwowayOutgoingAsync<DataServerIce.Callback_DataServant_SubscribeCodes>(__SubscribeCodes_name, SubscribeCodes_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare(__SubscribeCodes_name, Ice.OperationMode.Normal, ctx__, explicitContext__, synchronous__);
                IceInternal.BasicStream os__ = result__.startWriteParams(Ice.FormatType.DefaultFormat);
                os__.writeString(username);
                DataServerIce.DSIceCodesHelper.write(os__, codelist);
                result__.endWriteParams();
                result__.invoke();
            }
            catch(Ice.Exception ex__)
            {
                result__.abort(ex__);
            }
            return result__;
        }

        private void SubscribeCodes_completed__(Ice.AsyncResult r__, DataServerIce.Callback_DataServant_SubscribeCodes cb__, Ice.ExceptionCallback excb__)
        {
            int ret__;
            try
            {
                ret__ = end_SubscribeCodes(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<DataServerIce.Callback_DataServant_UnsubscribeCodes> begin_UnsubscribeCodes(string username, string[] codelist)
        {
            return begin_UnsubscribeCodes(username, codelist, null, false, false, null, null);
        }

        public Ice.AsyncResult<DataServerIce.Callback_DataServant_UnsubscribeCodes> begin_UnsubscribeCodes(string username, string[] codelist, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_UnsubscribeCodes(username, codelist, ctx__, true, false, null, null);
        }

        public Ice.AsyncResult begin_UnsubscribeCodes(string username, string[] codelist, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_UnsubscribeCodes(username, codelist, null, false, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_UnsubscribeCodes(string username, string[] codelist, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_UnsubscribeCodes(username, codelist, ctx__, true, false, cb__, cookie__);
        }

        private const string __UnsubscribeCodes_name = "UnsubscribeCodes";

        public int end_UnsubscribeCodes(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = IceInternal.OutgoingAsync.check(r__, this, __UnsubscribeCodes_name);
            try
            {
                if(!outAsync__.wait())
                {
                    try
                    {
                        outAsync__.throwUserException();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                int ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams();
                ret__ = is__.readInt();
                outAsync__.endReadParams();
                return ret__;
            }
            finally
            {
                outAsync__.cacheMessageBuffers();
            }
        }

        private Ice.AsyncResult<DataServerIce.Callback_DataServant_UnsubscribeCodes> begin_UnsubscribeCodes(string username, string[] codelist, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, bool synchronous__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__UnsubscribeCodes_name);
            IceInternal.TwowayOutgoingAsync<DataServerIce.Callback_DataServant_UnsubscribeCodes> result__ =  getTwowayOutgoingAsync<DataServerIce.Callback_DataServant_UnsubscribeCodes>(__UnsubscribeCodes_name, UnsubscribeCodes_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare(__UnsubscribeCodes_name, Ice.OperationMode.Normal, ctx__, explicitContext__, synchronous__);
                IceInternal.BasicStream os__ = result__.startWriteParams(Ice.FormatType.DefaultFormat);
                os__.writeString(username);
                DataServerIce.DSIceCodesHelper.write(os__, codelist);
                result__.endWriteParams();
                result__.invoke();
            }
            catch(Ice.Exception ex__)
            {
                result__.abort(ex__);
            }
            return result__;
        }

        private void UnsubscribeCodes_completed__(Ice.AsyncResult r__, DataServerIce.Callback_DataServant_UnsubscribeCodes cb__, Ice.ExceptionCallback excb__)
        {
            int ret__;
            try
            {
                ret__ = end_UnsubscribeCodes(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        #endregion

        #region Checked and unchecked cast operations

        public static DataServantPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            DataServantPrx r = b as DataServantPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                DataServantPrxHelper h = new DataServantPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static DataServantPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            DataServantPrx r = b as DataServantPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                DataServantPrxHelper h = new DataServantPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static DataServantPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    DataServantPrxHelper h = new DataServantPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static DataServantPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    DataServantPrxHelper h = new DataServantPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static DataServantPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            DataServantPrx r = b as DataServantPrx;
            if(r == null)
            {
                DataServantPrxHelper h = new DataServantPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static DataServantPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            DataServantPrxHelper h = new DataServantPrxHelper();
            h.copyFrom__(bb);
            return h;
        }

        public static readonly string[] ids__ =
        {
            "::DataServerIce::DataServant",
            "::Ice::Object"
        };

        public static string ice_staticId()
        {
            return ids__[0];
        }

        #endregion

        #region Marshaling support

        public static void write__(IceInternal.BasicStream os__, DataServantPrx v__)
        {
            os__.writeProxy(v__);
        }

        public static DataServantPrx read__(IceInternal.BasicStream is__)
        {
            Ice.ObjectPrx proxy = is__.readProxy();
            if(proxy != null)
            {
                DataServantPrxHelper result = new DataServantPrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace DataServerIce
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.2")]
    public abstract class DataServantDisp_ : Ice.ObjectImpl, DataServant
    {
        #region Slice operations

        public int SubscribeCodes(string username, string[] codelist)
        {
            return SubscribeCodes(username, codelist, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int SubscribeCodes(string username, string[] codelist, Ice.Current current__);

        public int UnsubscribeCodes(string username, string[] codelist)
        {
            return UnsubscribeCodes(username, codelist, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int UnsubscribeCodes(string username, string[] codelist, Ice.Current current__);

        public void FlushCodes(string username, string[] codelist)
        {
            FlushCodes(username, codelist, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void FlushCodes(string username, string[] codelist, Ice.Current current__);

        public int GetStockCodes(out DataServerIce.DSIceStockCode[] codes)
        {
            return GetStockCodes(out codes, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int GetStockCodes(out DataServerIce.DSIceStockCode[] codes, Ice.Current current__);

        public string GetVipCodes()
        {
            return GetVipCodes(Ice.ObjectImpl.defaultCurrent);
        }

        public abstract string GetVipCodes(Ice.Current current__);

        public string GetStockCodesInfo()
        {
            return GetStockCodesInfo(Ice.ObjectImpl.defaultCurrent);
        }

        public abstract string GetStockCodesInfo(Ice.Current current__);

        public bool SetSubType(string username, int subType)
        {
            return SetSubType(username, subType, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract bool SetSubType(string username, int subType, Ice.Current current__);

        public int GetSubType()
        {
            return GetSubType(Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int GetSubType(Ice.Current current__);

        public int GetPubType()
        {
            return GetPubType(Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int GetPubType(Ice.Current current__);

        #endregion

        #region Slice type-related members

        public static new readonly string[] ids__ = 
        {
            "::DataServerIce::DataServant",
            "::Ice::Object"
        };

        public override bool ice_isA(string s)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override bool ice_isA(string s, Ice.Current current__)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids()
        {
            return ids__;
        }

        public override string[] ice_ids(Ice.Current current__)
        {
            return ids__;
        }

        public override string ice_id()
        {
            return ids__[0];
        }

        public override string ice_id(Ice.Current current__)
        {
            return ids__[0];
        }

        public static new string ice_staticId()
        {
            return ids__[0];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus SubscribeCodes___(DataServant obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            Ice.ObjectImpl.checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            string username;
            string[] codelist;
            username = is__.readString();
            codelist = DataServerIce.DSIceCodesHelper.read(is__);
            inS__.endReadParams();
            int ret__ = obj__.SubscribeCodes(username, codelist, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeInt(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus UnsubscribeCodes___(DataServant obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            Ice.ObjectImpl.checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            string username;
            string[] codelist;
            username = is__.readString();
            codelist = DataServerIce.DSIceCodesHelper.read(is__);
            inS__.endReadParams();
            int ret__ = obj__.UnsubscribeCodes(username, codelist, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeInt(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus FlushCodes___(DataServant obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            Ice.ObjectImpl.checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            string username;
            string[] codelist;
            username = is__.readString();
            codelist = DataServerIce.DSIceCodesHelper.read(is__);
            inS__.endReadParams();
            obj__.FlushCodes(username, codelist, current__);
            inS__.writeEmptyParams__();
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus GetStockCodes___(DataServant obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            Ice.ObjectImpl.checkMode__(Ice.OperationMode.Normal, current__.mode);
            inS__.readEmptyParams();
            DataServerIce.DSIceStockCode[] codes;
            int ret__ = obj__.GetStockCodes(out codes, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            DataServerIce.DSIceStockCodesHelper.write(os__, codes);
            os__.writeInt(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus GetVipCodes___(DataServant obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            Ice.ObjectImpl.checkMode__(Ice.OperationMode.Normal, current__.mode);
            inS__.readEmptyParams();
            string ret__ = obj__.GetVipCodes(current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeString(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus GetStockCodesInfo___(DataServant obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            Ice.ObjectImpl.checkMode__(Ice.OperationMode.Normal, current__.mode);
            inS__.readEmptyParams();
            string ret__ = obj__.GetStockCodesInfo(current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeString(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus SetSubType___(DataServant obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            Ice.ObjectImpl.checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            string username;
            int subType;
            username = is__.readString();
            subType = is__.readInt();
            inS__.endReadParams();
            bool ret__ = obj__.SetSubType(username, subType, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeBool(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus GetSubType___(DataServant obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            Ice.ObjectImpl.checkMode__(Ice.OperationMode.Normal, current__.mode);
            inS__.readEmptyParams();
            int ret__ = obj__.GetSubType(current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeInt(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus GetPubType___(DataServant obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            Ice.ObjectImpl.checkMode__(Ice.OperationMode.Normal, current__.mode);
            inS__.readEmptyParams();
            int ret__ = obj__.GetPubType(current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeInt(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        private static string[] all__ =
        {
            "FlushCodes",
            "GetPubType",
            "GetStockCodes",
            "GetStockCodesInfo",
            "GetSubType",
            "GetVipCodes",
            "SetSubType",
            "SubscribeCodes",
            "UnsubscribeCodes",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override Ice.DispatchStatus dispatch__(IceInternal.Incoming inS__, Ice.Current current__)
        {
            int pos = _System.Array.BinarySearch(all__, current__.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return FlushCodes___(this, inS__, current__);
                }
                case 1:
                {
                    return GetPubType___(this, inS__, current__);
                }
                case 2:
                {
                    return GetStockCodes___(this, inS__, current__);
                }
                case 3:
                {
                    return GetStockCodesInfo___(this, inS__, current__);
                }
                case 4:
                {
                    return GetSubType___(this, inS__, current__);
                }
                case 5:
                {
                    return GetVipCodes___(this, inS__, current__);
                }
                case 6:
                {
                    return SetSubType___(this, inS__, current__);
                }
                case 7:
                {
                    return SubscribeCodes___(this, inS__, current__);
                }
                case 8:
                {
                    return UnsubscribeCodes___(this, inS__, current__);
                }
                case 9:
                {
                    return Ice.ObjectImpl.ice_id___(this, inS__, current__);
                }
                case 10:
                {
                    return Ice.ObjectImpl.ice_ids___(this, inS__, current__);
                }
                case 11:
                {
                    return Ice.ObjectImpl.ice_isA___(this, inS__, current__);
                }
                case 12:
                {
                    return Ice.ObjectImpl.ice_ping___(this, inS__, current__);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
        }

        #endregion

        #region Marshaling support

        protected override void writeImpl__(IceInternal.BasicStream os__)
        {
            os__.startWriteSlice(ice_staticId(), -1, true);
            os__.endWriteSlice();
        }

        protected override void readImpl__(IceInternal.BasicStream is__)
        {
            is__.startReadSlice();
            is__.endReadSlice();
        }

        #endregion
    }
}
